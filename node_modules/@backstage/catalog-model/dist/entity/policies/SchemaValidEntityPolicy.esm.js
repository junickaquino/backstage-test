import Ajv from 'ajv';
import entitySchema from '../../schema/Entity.schema.json.esm.js';
import entityMetaSchema from '../../schema/EntityMeta.schema.json.esm.js';
import commonSchema from '../../schema/shared/common.schema.json.esm.js';

var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, key + "" , value);
  return value;
};
class SchemaValidEntityPolicy {
  constructor() {
    __publicField(this, "validate");
  }
  async enforce(entity) {
    if (!this.validate) {
      const ajv = new Ajv({ allowUnionTypes: true });
      this.validate = ajv.addSchema([commonSchema, entityMetaSchema], void 0, void 0, true).compile(entitySchema);
    }
    const result = this.validate(entity);
    if (result === true) {
      return entity;
    }
    const [error] = this.validate.errors || [];
    if (!error) {
      throw new Error(`Malformed envelope, Unknown error`);
    }
    throw new Error(
      `Malformed envelope, ${error.instancePath || "<root>"} ${error.message}`
    );
  }
}

export { SchemaValidEntityPolicy };
//# sourceMappingURL=SchemaValidEntityPolicy.esm.js.map
