import React, { useCallback } from 'react';
import { useNavigate } from 'react-router-dom';
import { useRouteRef, useApp } from '@backstage/core-plugin-api';
import { DocsIcon, Page, Header, Content, ContentHeader, SupportButton } from '@backstage/core-components';
import { EntityListProvider, CatalogFilterLayout, EntitySearchBar, EntityKindPicker, UserListPicker, EntityTagPicker } from '@backstage/plugin-catalog-react';
import { ScaffolderPageContextMenu, TemplateCategoryPicker, TemplateGroups } from '@backstage/plugin-scaffolder-react/alpha';
import { RegisterExistingButton } from './RegisterExistingButton.esm.js';
import { registerComponentRouteRef, editRouteRef, actionsRouteRef, scaffolderListTaskRouteRef, viewTechDocRouteRef, selectedTemplateRouteRef } from '../../routes.esm.js';
import { parseEntityRef, stringifyEntityRef } from '@backstage/catalog-model';

const defaultGroup = {
  title: "Templates",
  filter: () => true
};
const createGroupsWithOther = (groups) => [
  ...groups,
  {
    title: "Other Templates",
    filter: (e) => ![...groups].some(({ filter }) => filter(e))
  }
];
const TemplateListPage = (props) => {
  const registerComponentLink = useRouteRef(registerComponentRouteRef);
  const {
    TemplateCardComponent,
    groups: givenGroups = [],
    templateFilter,
    headerOptions
  } = props;
  const navigate = useNavigate();
  const editorLink = useRouteRef(editRouteRef);
  const actionsLink = useRouteRef(actionsRouteRef);
  const tasksLink = useRouteRef(scaffolderListTaskRouteRef);
  const viewTechDocsLink = useRouteRef(viewTechDocRouteRef);
  const templateRoute = useRouteRef(selectedTemplateRouteRef);
  const app = useApp();
  const groups = givenGroups.length ? createGroupsWithOther(givenGroups) : [defaultGroup];
  const scaffolderPageContextMenuProps = {
    onEditorClicked: props?.contextMenu?.editor !== false ? () => navigate(editorLink()) : void 0,
    onActionsClicked: props?.contextMenu?.actions !== false ? () => navigate(actionsLink()) : void 0,
    onTasksClicked: props?.contextMenu?.tasks !== false ? () => navigate(tasksLink()) : void 0
  };
  const additionalLinksForEntity = useCallback(
    (template) => {
      const { kind, namespace, name } = parseEntityRef(
        stringifyEntityRef(template)
      );
      return template.metadata.annotations?.["backstage.io/techdocs-ref"] && viewTechDocsLink ? [
        {
          icon: app.getSystemIcon("docs") ?? DocsIcon,
          text: "View TechDocs",
          url: viewTechDocsLink({ kind, namespace, name })
        }
      ] : [];
    },
    [app, viewTechDocsLink]
  );
  const onTemplateSelected = useCallback(
    (template) => {
      const { namespace, name } = parseEntityRef(stringifyEntityRef(template));
      navigate(templateRoute({ namespace, templateName: name }));
    },
    [navigate, templateRoute]
  );
  return /* @__PURE__ */ React.createElement(EntityListProvider, null, /* @__PURE__ */ React.createElement(Page, { themeId: "home" }, /* @__PURE__ */ React.createElement(
    Header,
    {
      pageTitleOverride: "Create a new component",
      title: "Create a new component",
      subtitle: "Create new software components using standard templates in your organization",
      ...headerOptions
    },
    /* @__PURE__ */ React.createElement(ScaffolderPageContextMenu, { ...scaffolderPageContextMenuProps })
  ), /* @__PURE__ */ React.createElement(Content, null, /* @__PURE__ */ React.createElement(ContentHeader, { title: "Available Templates" }, /* @__PURE__ */ React.createElement(
    RegisterExistingButton,
    {
      title: "Register Existing Component",
      to: registerComponentLink && registerComponentLink()
    }
  ), /* @__PURE__ */ React.createElement(SupportButton, null, "Create new software components using standard templates. Different templates create different kinds of components (services, websites, documentation, ...).")), /* @__PURE__ */ React.createElement(CatalogFilterLayout, null, /* @__PURE__ */ React.createElement(CatalogFilterLayout.Filters, null, /* @__PURE__ */ React.createElement(EntitySearchBar, null), /* @__PURE__ */ React.createElement(EntityKindPicker, { initialFilter: "template", hidden: true }), /* @__PURE__ */ React.createElement(
    UserListPicker,
    {
      initialFilter: "all",
      availableFilters: ["all", "starred"]
    }
  ), /* @__PURE__ */ React.createElement(TemplateCategoryPicker, null), /* @__PURE__ */ React.createElement(EntityTagPicker, null)), /* @__PURE__ */ React.createElement(CatalogFilterLayout.Content, null, /* @__PURE__ */ React.createElement(
    TemplateGroups,
    {
      groups,
      templateFilter,
      TemplateCardComponent,
      onTemplateSelected,
      additionalLinksForEntity
    }
  ))))));
};

export { TemplateListPage };
//# sourceMappingURL=TemplateListPage.esm.js.map
