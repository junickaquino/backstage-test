import React from 'react';
import { createApiExtension, createApiFactory, discoveryApiRef, fetchApiRef, identityApiRef, createPageExtension, createNavItemExtension, createPlugin } from '@backstage/frontend-plugin-api';
import CreateComponentIcon from '@material-ui/icons/AddCircleOutline';
import { convertLegacyRouteRef, compatWrapper, convertLegacyRouteRefs } from '@backstage/core-compat-api';
import { scmIntegrationsApiRef } from '@backstage/integration-react';
import { scaffolderApiRef } from '@backstage/plugin-scaffolder-react';
import { ScaffolderClient } from './api.esm.js';
import { rootRouteRef, selectedTemplateRouteRef, scaffolderTaskRouteRef, actionsRouteRef, scaffolderListTaskRouteRef, editRouteRef, registerComponentRouteRef, viewTechDocRouteRef } from './routes.esm.js';

const scaffolderApi = createApiExtension({
  factory: createApiFactory({
    api: scaffolderApiRef,
    deps: {
      discoveryApi: discoveryApiRef,
      scmIntegrationsApi: scmIntegrationsApiRef,
      fetchApi: fetchApiRef,
      identityApi: identityApiRef
    },
    factory: ({ discoveryApi, scmIntegrationsApi, fetchApi, identityApi }) => new ScaffolderClient({
      discoveryApi,
      scmIntegrationsApi,
      fetchApi,
      identityApi
    })
  })
});
const scaffolderPage = createPageExtension({
  routeRef: convertLegacyRouteRef(rootRouteRef),
  defaultPath: "/create",
  loader: () => import('./components/Router/index.esm.js').then((m) => compatWrapper(/* @__PURE__ */ React.createElement(m.Router, null)))
});
const scaffolderNavItem = createNavItemExtension({
  routeRef: convertLegacyRouteRef(rootRouteRef),
  title: "Create...",
  icon: CreateComponentIcon
});
var alpha = createPlugin({
  id: "scaffolder",
  routes: convertLegacyRouteRefs({
    root: rootRouteRef,
    selectedTemplate: selectedTemplateRouteRef,
    ongoingTask: scaffolderTaskRouteRef,
    actions: actionsRouteRef,
    listTasks: scaffolderListTaskRouteRef,
    edit: editRouteRef
  }),
  externalRoutes: convertLegacyRouteRefs({
    registerComponent: registerComponentRouteRef,
    viewTechDoc: viewTechDocRouteRef
  }),
  extensions: [scaffolderApi, scaffolderPage, scaffolderNavItem]
});

export { alpha as default };
//# sourceMappingURL=alpha.esm.js.map
