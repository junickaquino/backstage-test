import React from 'react';
import { useOutlet, Routes, Route } from 'react-router-dom';
import { useCustomFieldExtensions, useCustomLayouts, SecretsContextProvider } from '@backstage/plugin-scaffolder-react';
import { DEFAULT_SCAFFOLDER_FIELD_EXTENSIONS } from '../../extensions/default.esm.js';
import { selectedTemplateRouteRef, scaffolderTaskRouteRef, editRouteRef, actionsRouteRef, scaffolderListTaskRouteRef } from '../../routes.esm.js';
import { ErrorPage } from '@backstage/core-components';
import { ActionsPage } from '../ActionsPage/ActionsPage.esm.js';
import { ListTasksPage } from '../ListTasksPage/ListTasksPage.esm.js';
import { TemplateListPage } from '../../next/TemplateListPage/TemplateListPage.esm.js';
import { TemplateWizardPage } from '../../next/TemplateWizardPage/TemplateWizardPage.esm.js';
import { OngoingTask } from '../OngoingTask/OngoingTask.esm.js';
import { TemplateEditorPage } from '../../next/TemplateEditorPage/TemplateEditorPage.esm.js';

const Router = (props) => {
  const {
    components: {
      TemplateCardComponent,
      TaskPageComponent = OngoingTask,
      ReviewStepComponent,
      EXPERIMENTAL_TemplateOutputsComponent: TemplateOutputsComponent,
      EXPERIMENTAL_TemplateListPageComponent: TemplateListPageComponent = TemplateListPage,
      EXPERIMENTAL_TemplateWizardPageComponent: TemplateWizardPageComponent = TemplateWizardPage
    } = {}
  } = props;
  const outlet = useOutlet() || props.children;
  const customFieldExtensions = useCustomFieldExtensions(outlet);
  const fieldExtensions = [
    ...customFieldExtensions,
    ...DEFAULT_SCAFFOLDER_FIELD_EXTENSIONS.filter(
      ({ name }) => !customFieldExtensions.some(
        (customFieldExtension) => customFieldExtension.name === name
      )
    )
  ];
  const customLayouts = useCustomLayouts(outlet);
  return /* @__PURE__ */ React.createElement(Routes, null, /* @__PURE__ */ React.createElement(
    Route,
    {
      path: "/",
      element: /* @__PURE__ */ React.createElement(
        TemplateListPageComponent,
        {
          TemplateCardComponent,
          contextMenu: props.contextMenu,
          groups: props.groups,
          templateFilter: props.templateFilter,
          headerOptions: props.headerOptions
        }
      )
    }
  ), /* @__PURE__ */ React.createElement(
    Route,
    {
      path: selectedTemplateRouteRef.path,
      element: /* @__PURE__ */ React.createElement(SecretsContextProvider, null, /* @__PURE__ */ React.createElement(
        TemplateWizardPageComponent,
        {
          headerOptions: props.headerOptions,
          customFieldExtensions: fieldExtensions,
          layouts: customLayouts,
          components: { ReviewStepComponent },
          formProps: props.formProps
        }
      ))
    }
  ), /* @__PURE__ */ React.createElement(
    Route,
    {
      path: scaffolderTaskRouteRef.path,
      element: /* @__PURE__ */ React.createElement(
        TaskPageComponent,
        {
          TemplateOutputsComponent
        }
      )
    }
  ), /* @__PURE__ */ React.createElement(
    Route,
    {
      path: editRouteRef.path,
      element: /* @__PURE__ */ React.createElement(SecretsContextProvider, null, /* @__PURE__ */ React.createElement(
        TemplateEditorPage,
        {
          customFieldExtensions: fieldExtensions,
          layouts: customLayouts
        }
      ))
    }
  ), /* @__PURE__ */ React.createElement(Route, { path: actionsRouteRef.path, element: /* @__PURE__ */ React.createElement(ActionsPage, null) }), /* @__PURE__ */ React.createElement(
    Route,
    {
      path: scaffolderListTaskRouteRef.path,
      element: /* @__PURE__ */ React.createElement(ListTasksPage, null)
    }
  ), /* @__PURE__ */ React.createElement(
    Route,
    {
      path: "*",
      element: /* @__PURE__ */ React.createElement(ErrorPage, { status: "404", statusMessage: "Page not found" })
    }
  ));
};

export { Router };
//# sourceMappingURL=Router.esm.js.map
