import React, { useEffect, useState } from 'react';
import FormControl from '@material-ui/core/FormControl';
import FormHelperText from '@material-ui/core/FormHelperText';
import { Select } from '@backstage/core-components';
import Autocomplete from '@material-ui/lab/Autocomplete';
import TextField from '@material-ui/core/TextField';
import useDebounce from 'react-use/esm/useDebounce';
import { useApi } from '@backstage/core-plugin-api';
import { scaffolderApiRef } from '@backstage/plugin-scaffolder-react';

const BitbucketRepoPicker = (props) => {
  const {
    allowedOwners = [],
    allowedProjects = [],
    onChange,
    rawErrors,
    state,
    accessToken
  } = props;
  const { host, workspace, project } = state;
  const ownerItems = allowedOwners ? allowedOwners?.map((i) => ({ label: i, value: i })) : [];
  const projectItems = allowedProjects ? allowedProjects?.map((i) => ({ label: i, value: i })) : [];
  useEffect(() => {
    if (host === "bitbucket.org" && allowedOwners.length) {
      onChange({ workspace: allowedOwners[0] });
    }
  }, [allowedOwners, host, onChange]);
  const scaffolderApi = useApi(scaffolderApiRef);
  const [availableWorkspaces, setAvailableWorkspaces] = useState([]);
  const [availableProjects, setAvailableProjects] = useState([]);
  useDebounce(
    () => {
      const updateAvailableWorkspaces = async () => {
        if (host === "bitbucket.org" && accessToken && scaffolderApi.autocomplete) {
          const { results } = await scaffolderApi.autocomplete({
            token: accessToken,
            resource: "workspaces",
            context: {},
            provider: "bitbucket-cloud"
          });
          setAvailableWorkspaces(results.map((r) => r.title));
        } else {
          setAvailableWorkspaces([]);
        }
      };
      updateAvailableWorkspaces().catch(() => setAvailableWorkspaces([]));
    },
    500,
    [host, accessToken]
  );
  useDebounce(
    () => {
      const updateAvailableProjects = async () => {
        if (host === "bitbucket.org" && accessToken && workspace && scaffolderApi.autocomplete) {
          const { results } = await scaffolderApi.autocomplete({
            token: accessToken,
            resource: "projects",
            context: { workspace },
            provider: "bitbucket-cloud"
          });
          setAvailableProjects(results.map((r) => r.title));
        } else {
          setAvailableProjects([]);
        }
      };
      updateAvailableProjects().catch(() => setAvailableProjects([]));
    },
    500,
    [host, accessToken, workspace]
  );
  useDebounce(
    () => {
      const updateAvailableRepositories = async () => {
        if (host === "bitbucket.org" && accessToken && workspace && project && scaffolderApi.autocomplete) {
          const { results } = await scaffolderApi.autocomplete({
            token: accessToken,
            resource: "repositories",
            context: { workspace, project },
            provider: "bitbucket-cloud"
          });
          onChange({ availableRepos: results.map((r) => r.title) });
        } else {
          onChange({ availableRepos: [] });
        }
      };
      updateAvailableRepositories().catch(
        () => onChange({ availableRepos: [] })
      );
    },
    500,
    [host, accessToken, workspace, project]
  );
  return /* @__PURE__ */ React.createElement(React.Fragment, null, host === "bitbucket.org" && /* @__PURE__ */ React.createElement(
    FormControl,
    {
      margin: "normal",
      required: true,
      error: rawErrors?.length > 0 && !workspace
    },
    allowedOwners?.length ? /* @__PURE__ */ React.createElement(
      Select,
      {
        native: true,
        label: "Allowed Workspaces",
        onChange: (s) => onChange({ workspace: String(Array.isArray(s) ? s[0] : s) }),
        disabled: allowedOwners.length === 1,
        selected: workspace,
        items: ownerItems
      }
    ) : /* @__PURE__ */ React.createElement(
      Autocomplete,
      {
        value: workspace,
        onChange: (_, newValue) => {
          onChange({ workspace: newValue || "" });
        },
        options: availableWorkspaces,
        renderInput: (params) => /* @__PURE__ */ React.createElement(TextField, { ...params, label: "Workspace", required: true }),
        freeSolo: true,
        autoSelect: true
      }
    ),
    /* @__PURE__ */ React.createElement(FormHelperText, null, "The Workspace that this repo will belong to")
  ), /* @__PURE__ */ React.createElement(
    FormControl,
    {
      margin: "normal",
      required: true,
      error: rawErrors?.length > 0 && !project
    },
    allowedProjects?.length ? /* @__PURE__ */ React.createElement(
      Select,
      {
        native: true,
        label: "Allowed Projects",
        onChange: (s) => onChange({ project: String(Array.isArray(s) ? s[0] : s) }),
        disabled: allowedProjects.length === 1,
        selected: project,
        items: projectItems
      }
    ) : /* @__PURE__ */ React.createElement(
      Autocomplete,
      {
        value: project,
        onChange: (_, newValue) => {
          onChange({ project: newValue || "" });
        },
        options: availableProjects,
        renderInput: (params) => /* @__PURE__ */ React.createElement(TextField, { ...params, label: "Project", required: true }),
        freeSolo: true,
        autoSelect: true
      }
    ),
    /* @__PURE__ */ React.createElement(FormHelperText, null, "The Project that this repo will belong to")
  ));
};

export { BitbucketRepoPicker };
//# sourceMappingURL=BitbucketRepoPicker.esm.js.map
