import React, { useState } from 'react';
import { useApi, identityApiRef, errorApiRef } from '@backstage/core-plugin-api';
import TextField from '@material-ui/core/TextField';
import FormControl from '@material-ui/core/FormControl';
export { MyGroupsPickerSchema } from './schema.esm.js';
import Autocomplete from '@material-ui/lab/Autocomplete';
import { catalogApiRef } from '@backstage/plugin-catalog-react';
import { NotFoundError } from '@backstage/errors';
import useAsync from 'react-use/esm/useAsync';
import { stringifyEntityRef } from '@backstage/catalog-model';

const MyGroupsPicker = (props) => {
  const {
    schema: { title, description },
    required,
    rawErrors,
    onChange,
    formData
  } = props;
  const identityApi = useApi(identityApiRef);
  const catalogApi = useApi(catalogApiRef);
  const errorApi = useApi(errorApiRef);
  const [groups, setGroups] = useState([]);
  useAsync(async () => {
    const { userEntityRef } = await identityApi.getBackstageIdentity();
    if (!userEntityRef) {
      errorApi.post(new NotFoundError("No user entity ref found"));
      return;
    }
    const { items } = await catalogApi.getEntities({
      filter: {
        kind: "Group",
        ["relations.hasMember"]: [userEntityRef]
      }
    });
    const groupValues = items.filter((e) => Boolean(e)).map((item) => ({
      label: item.metadata.title ?? item.metadata.name,
      ref: stringifyEntityRef(item)
    }));
    setGroups(groupValues);
  });
  const updateChange = (_, value) => {
    onChange(value?.ref ?? "");
  };
  const selectedEntity = groups?.find((e) => e.ref === formData) || null;
  return /* @__PURE__ */ React.createElement(
    FormControl,
    {
      margin: "normal",
      required,
      error: rawErrors?.length > 0
    },
    /* @__PURE__ */ React.createElement(
      Autocomplete,
      {
        id: "OwnershipEntityRefPicker-dropdown",
        options: groups || [],
        value: selectedEntity,
        onChange: updateChange,
        getOptionLabel: (group) => group.label,
        renderInput: (params) => /* @__PURE__ */ React.createElement(
          TextField,
          {
            ...params,
            label: title,
            margin: "dense",
            helperText: description,
            FormHelperTextProps: { margin: "dense", style: { marginLeft: 0 } },
            variant: "outlined",
            required
          }
        )
      }
    )
  );
};

export { MyGroupsPicker };
//# sourceMappingURL=MyGroupsPicker.esm.js.map
