import IconButton from '@material-ui/core/IconButton';
import ListItemIcon from '@material-ui/core/ListItemIcon';
import ListItemText from '@material-ui/core/ListItemText';
import MenuItem from '@material-ui/core/MenuItem';
import MenuList from '@material-ui/core/MenuList';
import Popover from '@material-ui/core/Popover';
import { makeStyles, useTheme } from '@material-ui/core/styles';
import { useAsync } from '@react-hookz/web';
import Cancel from '@material-ui/icons/Cancel';
import Retry from '@material-ui/icons/Repeat';
import Toc from '@material-ui/icons/Toc';
import ControlPointIcon from '@material-ui/icons/ControlPoint';
import MoreVert from '@material-ui/icons/MoreVert';
import React, { useState } from 'react';
import { useApi, useAnalytics } from '@backstage/core-plugin-api';
import { scaffolderApiRef } from '@backstage/plugin-scaffolder-react';
import { usePermission } from '@backstage/plugin-permission-react';
import { taskCancelPermission, taskReadPermission, taskCreatePermission } from '@backstage/plugin-scaffolder-common/alpha';

const useStyles = makeStyles(() => ({
  button: {
    color: ({ fontColor }) => fontColor
  }
}));
const ContextMenu = (props) => {
  const {
    cancelEnabled,
    logsVisible,
    buttonBarVisible,
    onStartOver,
    onToggleLogs,
    onToggleButtonBar,
    taskId
  } = props;
  const { getPageTheme } = useTheme();
  const pageTheme = getPageTheme({ themeId: "website" });
  const classes = useStyles({ fontColor: pageTheme.fontColor });
  const scaffolderApi = useApi(scaffolderApiRef);
  const analytics = useAnalytics();
  const [anchorEl, setAnchorEl] = useState();
  const [{ status: cancelStatus }, { execute: cancel }] = useAsync(async () => {
    if (taskId) {
      analytics.captureEvent("cancelled", "Template has been cancelled");
      await scaffolderApi.cancelTask(taskId);
    }
  });
  const { allowed: canCancelTask } = usePermission({
    permission: taskCancelPermission
  });
  const { allowed: canReadTask } = usePermission({
    permission: taskReadPermission
  });
  const { allowed: canCreateTask } = usePermission({
    permission: taskCreatePermission
  });
  const canStartOver = canReadTask && canCreateTask;
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(
    IconButton,
    {
      "aria-label": "more",
      "aria-controls": "long-menu",
      "aria-haspopup": "true",
      onClick: (event) => {
        setAnchorEl(event.currentTarget);
      },
      "data-testid": "menu-button",
      className: classes.button
    },
    /* @__PURE__ */ React.createElement(MoreVert, null)
  ), /* @__PURE__ */ React.createElement(
    Popover,
    {
      open: Boolean(anchorEl),
      onClose: () => setAnchorEl(void 0),
      anchorEl,
      anchorOrigin: { vertical: "bottom", horizontal: "right" },
      transformOrigin: { vertical: "top", horizontal: "right" }
    },
    /* @__PURE__ */ React.createElement(MenuList, null, /* @__PURE__ */ React.createElement(MenuItem, { onClick: () => onToggleLogs?.(!logsVisible) }, /* @__PURE__ */ React.createElement(ListItemIcon, null, /* @__PURE__ */ React.createElement(Toc, { fontSize: "small" })), /* @__PURE__ */ React.createElement(ListItemText, { primary: logsVisible ? "Hide Logs" : "Show Logs" })), /* @__PURE__ */ React.createElement(MenuItem, { onClick: () => onToggleButtonBar?.(!buttonBarVisible) }, /* @__PURE__ */ React.createElement(ListItemIcon, null, /* @__PURE__ */ React.createElement(ControlPointIcon, { fontSize: "small" })), /* @__PURE__ */ React.createElement(
      ListItemText,
      {
        primary: buttonBarVisible ? "Hide Button Bar" : "Show Button Bar"
      }
    )), /* @__PURE__ */ React.createElement(
      MenuItem,
      {
        onClick: onStartOver,
        disabled: cancelEnabled || !canStartOver,
        "data-testid": "start-over-task"
      },
      /* @__PURE__ */ React.createElement(ListItemIcon, null, /* @__PURE__ */ React.createElement(Retry, { fontSize: "small" })),
      /* @__PURE__ */ React.createElement(ListItemText, { primary: "Start Over" })
    ), /* @__PURE__ */ React.createElement(
      MenuItem,
      {
        onClick: cancel,
        disabled: !cancelEnabled || cancelStatus !== "not-executed" || !canCancelTask,
        "data-testid": "cancel-task"
      },
      /* @__PURE__ */ React.createElement(ListItemIcon, null, /* @__PURE__ */ React.createElement(Cancel, { fontSize: "small" })),
      /* @__PURE__ */ React.createElement(ListItemText, { primary: "Cancel" })
    ))
  ));
};

export { ContextMenu };
//# sourceMappingURL=ContextMenu.esm.js.map
