/// <reference types="react" />
import * as _backstage_frontend_plugin_api from '@backstage/frontend-plugin-api';
import { AnyExtensionInputMap, PortableSchema } from '@backstage/frontend-plugin-api';
import * as _backstage_core_plugin_api_alpha from '@backstage/core-plugin-api/alpha';

/** @alpha */
declare const _default: _backstage_frontend_plugin_api.BackstagePlugin<{
    catalogIndex: _backstage_frontend_plugin_api.RouteRef<undefined>;
    catalogEntity: _backstage_frontend_plugin_api.RouteRef<{
        name: string;
        kind: string;
        namespace: string;
    }>;
}, {
    viewTechDoc: _backstage_frontend_plugin_api.ExternalRouteRef<{
        name: string;
        kind: string;
        namespace: string;
    }, true>;
    createComponent: _backstage_frontend_plugin_api.ExternalRouteRef<undefined, true>;
    createFromTemplate: _backstage_frontend_plugin_api.ExternalRouteRef<{
        namespace: string;
        templateName: string;
    }, true>;
    unregisterRedirect: _backstage_frontend_plugin_api.ExternalRouteRef<undefined, true>;
}>;

/** @alpha */
declare function createCatalogFilterExtension<TInputs extends AnyExtensionInputMap, TConfig = never>(options: {
    namespace?: string;
    name?: string;
    inputs?: TInputs;
    configSchema?: PortableSchema<TConfig>;
    loader: (options: {
        config: TConfig;
    }) => Promise<JSX.Element>;
}): _backstage_frontend_plugin_api.ExtensionDefinition<TConfig>;

/** @alpha */
declare const catalogTranslationRef: _backstage_core_plugin_api_alpha.TranslationRef<"catalog", {
    readonly "deleteEntity.description": "This entity is not referenced by any location and is therefore not receiving updates. Click here to delete.";
    readonly "deleteEntity.cancelButtonTitle": "Cancel";
    readonly "deleteEntity.deleteButtonTitle": "Delete";
    readonly "deleteEntity.dialogTitle": "Are you sure you want to delete this entity?";
    readonly "indexPage.title": "{{orgName}} Catalog";
    readonly "indexPage.createButtonTitle": "Create";
    readonly "indexPage.supportButtonContent": "All your software catalog entities";
    readonly "aboutCard.title": "About";
    readonly "aboutCard.refreshButtonTitle": "Schedule entity refresh";
    readonly "aboutCard.editButtonTitle": "Edit Metadata";
    readonly "aboutCard.createSimilarButtonTitle": "Create something similar";
    readonly "aboutCard.refreshScheduledMessage": "Refresh scheduled";
    readonly "aboutCard.launchTemplate": "Launch Template";
    readonly "aboutCard.viewTechdocs": "View TechDocs";
    readonly "aboutCard.viewSource": "View Source";
    readonly "aboutCard.descriptionField.value": "No description";
    readonly "aboutCard.descriptionField.label": "Description";
    readonly "aboutCard.ownerField.value": "No Owner";
    readonly "aboutCard.ownerField.label": "Owner";
    readonly "aboutCard.domainField.value": "No Domain";
    readonly "aboutCard.domainField.label": "Domain";
    readonly "aboutCard.systemField.value": "No System";
    readonly "aboutCard.systemField.label": "System";
    readonly "aboutCard.parentComponentField.value": "No Parent Component";
    readonly "aboutCard.parentComponentField.label": "Parent Component";
    readonly "aboutCard.typeField.label": "Type";
    readonly "aboutCard.lifecycleField.label": "Lifecycle";
    readonly "aboutCard.tagsField.value": "No Tags";
    readonly "aboutCard.tagsField.label": "Tags";
    readonly "aboutCard.targetsField.label": "Targets";
    readonly "searchResultItem.lifecycle": "Lifecycle";
    readonly "searchResultItem.Owner": "Owner";
    readonly "catalogTable.warningPanelTitle": "Could not fetch catalog entities.";
    readonly "catalogTable.viewActionTitle": "View";
    readonly "catalogTable.editActionTitle": "Edit";
    readonly "catalogTable.starActionTitle": "Add to favorites";
    readonly "catalogTable.unStarActionTitle": "Remove from favorites";
    readonly "dependencyOfComponentsCard.title": "Dependency of components";
    readonly "dependencyOfComponentsCard.emptyMessage": "No component depends on this component";
    readonly "dependsOnComponentsCard.title": "Depends on components";
    readonly "dependsOnComponentsCard.emptyMessage": "No component is a dependency of this component";
    readonly "dependsOnResourcesCard.title": "Depends on resources";
    readonly "dependsOnResourcesCard.emptyMessage": "No resource is a dependency of this component";
    readonly "entityContextMenu.copiedMessage": "Copied!";
    readonly "entityContextMenu.moreButtonTitle": "More";
    readonly "entityContextMenu.inspectMenuTitle": "Inspect entity";
    readonly "entityContextMenu.copyURLMenuTitle": "Copy entity URL";
    readonly "entityContextMenu.unregisterMenuTitle": "Unregister entity";
    readonly "entityLabelsCard.title": "Labels";
    readonly "entityLabelsCard.emptyDescription": "No labels defined for this entity. You can add labels to your entity YAML as shown in the highlighted example below:";
    readonly "entityLabelsCard.readMoreButtonTitle": "Read more";
    readonly "entityLabels.warningPanelTitle": "Entity not found";
    readonly "entityLabels.ownerLabel": "Owner";
    readonly "entityLabels.lifecycleLabel": "Lifecycle";
    readonly "entityLinksCard.title": "Links";
    readonly "entityLinksCard.emptyDescription": "No links defined for this entity. You can add links to your entity YAML as shown in the highlighted example below:";
    readonly "entityLinksCard.readMoreButtonTitle": "Read more";
    readonly "entityNotFound.title": "Entity was not found";
    readonly "entityNotFound.description": "Want to help us build this? Check out our Getting Started documentation.";
    readonly "entityNotFound.docButtonTitle": "DOCS";
    readonly entityProcessingErrorsDescription: "The error below originates from";
    readonly entityRelationWarningDescription: "This entity has relations to other entities, which can't be found in the catalog.\n Entities not found are: ";
    readonly "hasComponentsCard.title": "Has components";
    readonly "hasComponentsCard.emptyMessage": "No component is part of this system";
    readonly "hasResourcesCard.title": "Has resources";
    readonly "hasResourcesCard.emptyMessage": "No resource is part of this system";
    readonly "hasSubcomponentsCard.title": "Has subcomponents";
    readonly "hasSubcomponentsCard.emptyMessage": "No subcomponent is part of this component";
    readonly "hasSystemsCard.title": "Has systems";
    readonly "hasSystemsCard.emptyMessage": "No system is part of this domain";
    readonly "relatedEntitiesCard.emptyHelpLinkTitle": "Learn how to change this.";
    readonly "systemDiagramCard.title": "System Diagram";
    readonly "systemDiagramCard.description": "Use pinch & zoo to move around the diagram.";
    readonly "systemDiagramCard.edgeLabels.dependsOn": "depends on";
    readonly "systemDiagramCard.edgeLabels.partOf": "part of";
    readonly "systemDiagramCard.edgeLabels.provides": "provides";
}>;

export { catalogTranslationRef, createCatalogFilterExtension, _default as default };
