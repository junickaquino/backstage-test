import React from 'react';
import { createCatalogFilterExtension } from './createCatalogFilterExtension.esm.js';
import { createSchemaFromZod } from '@backstage/frontend-plugin-api';

const catalogTagCatalogFilter = createCatalogFilterExtension({
  name: "tag",
  loader: async () => {
    const { EntityTagPicker } = await import('@backstage/plugin-catalog-react');
    return /* @__PURE__ */ React.createElement(EntityTagPicker, null);
  }
});
const catalogKindCatalogFilter = createCatalogFilterExtension({
  name: "kind",
  configSchema: createSchemaFromZod(
    (z) => z.object({
      initialFilter: z.string().default("component")
    })
  ),
  loader: async ({ config }) => {
    const { EntityKindPicker } = await import('@backstage/plugin-catalog-react');
    return /* @__PURE__ */ React.createElement(EntityKindPicker, { initialFilter: config.initialFilter });
  }
});
const catalogTypeCatalogFilter = createCatalogFilterExtension({
  name: "type",
  loader: async () => {
    const { EntityTypePicker } = await import('@backstage/plugin-catalog-react');
    return /* @__PURE__ */ React.createElement(EntityTypePicker, null);
  }
});
const catalogModeCatalogFilter = createCatalogFilterExtension({
  name: "mode",
  configSchema: createSchemaFromZod(
    (z) => z.object({
      mode: z.enum(["owners-only", "all"]).optional()
    })
  ),
  loader: async ({ config }) => {
    const { EntityOwnerPicker } = await import('@backstage/plugin-catalog-react');
    return /* @__PURE__ */ React.createElement(EntityOwnerPicker, { mode: config.mode });
  }
});
const catalogNamespaceCatalogFilter = createCatalogFilterExtension({
  name: "namespace",
  loader: async () => {
    const { EntityNamespacePicker } = await import('@backstage/plugin-catalog-react');
    return /* @__PURE__ */ React.createElement(EntityNamespacePicker, null);
  }
});
const catalogLifecycleCatalogFilter = createCatalogFilterExtension({
  name: "lifecycle",
  loader: async () => {
    const { EntityLifecyclePicker } = await import('@backstage/plugin-catalog-react');
    return /* @__PURE__ */ React.createElement(EntityLifecyclePicker, null);
  }
});
const catalogProcessingStatusCatalogFilter = createCatalogFilterExtension({
  name: "processing-status",
  loader: async () => {
    const { EntityProcessingStatusPicker } = await import('@backstage/plugin-catalog-react');
    return /* @__PURE__ */ React.createElement(EntityProcessingStatusPicker, null);
  }
});
const catalogListCatalogFilter = createCatalogFilterExtension({
  name: "list",
  configSchema: createSchemaFromZod(
    (z) => z.object({
      initialFilter: z.enum(["owned", "starred", "all"]).default("owned")
    })
  ),
  loader: async ({ config }) => {
    const { UserListPicker } = await import('@backstage/plugin-catalog-react');
    return /* @__PURE__ */ React.createElement(UserListPicker, { initialFilter: config.initialFilter });
  }
});
var filters = [
  catalogTagCatalogFilter,
  catalogKindCatalogFilter,
  catalogTypeCatalogFilter,
  catalogModeCatalogFilter,
  catalogNamespaceCatalogFilter,
  catalogLifecycleCatalogFilter,
  catalogProcessingStatusCatalogFilter,
  catalogListCatalogFilter
];

export { filters as default };
//# sourceMappingURL=filters.esm.js.map
