import { InputError } from '@backstage/errors';
import { createKindMatcher } from './matrchers/createKindMatcher.esm.js';
import { createTypeMatcher } from './matrchers/createTypeMatcher.esm.js';
import { createIsMatcher } from './matrchers/createIsMatcher.esm.js';
import { createHasMatcher } from './matrchers/createHasMatcher.esm.js';

const rootMatcherFactories = {
  kind: createKindMatcher,
  type: createTypeMatcher,
  is: createIsMatcher,
  has: createHasMatcher
};
function parseFilterExpression(expression) {
  const expressionParseErrors = [];
  const parts = splitFilterExpression(
    expression,
    (e) => expressionParseErrors.push(e)
  );
  const matchers = parts.flatMap((part) => {
    const factory = rootMatcherFactories[part.key];
    if (!factory) {
      const known = Object.keys(rootMatcherFactories).map((m) => `'${m}'`);
      expressionParseErrors.push(
        new InputError(
          `'${part.key}' is not a valid filter expression key, expected one of ${known}`
        )
      );
      return [];
    }
    const matcher = factory(
      part.parameters,
      (e) => expressionParseErrors.push(e)
    );
    return [matcher];
  });
  const filterFn = (entity) => matchers.every((matcher) => {
    try {
      return matcher(entity);
    } catch {
      return false;
    }
  });
  return {
    filterFn,
    expressionParseErrors
  };
}
function splitFilterExpression(expression, onParseError) {
  const words = expression.split(" ").map((w) => w.trim()).filter(Boolean);
  const result = new Array();
  for (const word of words) {
    const match = word.match(/^([^:]+):(.+)$/);
    if (!match) {
      onParseError(
        new InputError(
          `'${word}' is not a valid filter expression, expected 'key:parameter' form`
        )
      );
      continue;
    }
    const key = match[1];
    const parameters = match[2].split(",").filter(Boolean);
    result.push({ key, parameters });
  }
  return result;
}

export { parseFilterExpression, splitFilterExpression };
//# sourceMappingURL=parseFilterExpression.esm.js.map
