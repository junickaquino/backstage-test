import React from 'react';
import { convertLegacyRouteRef, compatWrapper } from '@backstage/core-compat-api';
import { createPageExtension, createExtensionInput, coreExtensionData } from '@backstage/frontend-plugin-api';
import { entityRouteRef, AsyncEntityProvider } from '@backstage/plugin-catalog-react';
import { catalogExtensionData } from '@backstage/plugin-catalog-react/alpha';
import { rootRouteRef } from '../routes.esm.js';
import { useEntityFromUrl } from '../components/CatalogEntityPage/useEntityFromUrl.esm.js';
import { buildFilterFn } from './filter/FilterWrapper.esm.js';

const catalogPage = createPageExtension({
  defaultPath: "/catalog",
  routeRef: convertLegacyRouteRef(rootRouteRef),
  inputs: {
    filters: createExtensionInput({
      element: coreExtensionData.reactElement
    })
  },
  loader: async ({ inputs }) => {
    const { BaseCatalogPage } = await import('../components/CatalogPage/index.esm.js');
    const filters = inputs.filters.map((filter) => filter.output.element);
    return compatWrapper(/* @__PURE__ */ React.createElement(BaseCatalogPage, { filters: /* @__PURE__ */ React.createElement(React.Fragment, null, filters) }));
  }
});
const catalogEntityPage = createPageExtension({
  name: "entity",
  defaultPath: "/catalog/:namespace/:kind/:name",
  routeRef: convertLegacyRouteRef(entityRouteRef),
  inputs: {
    contents: createExtensionInput({
      element: coreExtensionData.reactElement,
      path: coreExtensionData.routePath,
      routeRef: coreExtensionData.routeRef.optional(),
      title: catalogExtensionData.entityContentTitle,
      filterFunction: catalogExtensionData.entityFilterFunction.optional(),
      filterExpression: catalogExtensionData.entityFilterExpression.optional()
    })
  },
  loader: async ({ inputs }) => {
    const { EntityLayout } = await import('../components/EntityLayout/index.esm.js');
    const Component = () => {
      return /* @__PURE__ */ React.createElement(AsyncEntityProvider, { ...useEntityFromUrl() }, /* @__PURE__ */ React.createElement(EntityLayout, null, inputs.contents.map(({ output }) => /* @__PURE__ */ React.createElement(
        EntityLayout.Route,
        {
          key: output.path,
          path: output.path,
          title: output.title,
          if: buildFilterFn(
            output.filterFunction,
            output.filterExpression
          )
        },
        output.element
      ))));
    };
    return compatWrapper(/* @__PURE__ */ React.createElement(Component, null));
  }
});
var pages = [catalogPage, catalogEntityPage];

export { catalogEntityPage, catalogPage, pages as default };
//# sourceMappingURL=pages.esm.js.map
