import { useApp } from '@backstage/core-plugin-api';
import { humanizeEntityRef } from '@backstage/plugin-catalog-react';
import { makeStyles } from '@material-ui/core/styles';
import classNames from 'classnames';
import React, { useState, useRef, useLayoutEffect } from 'react';
import { EntityKindIcon } from './EntityKindIcon.esm.js';
import { DEFAULT_NAMESPACE } from '@backstage/catalog-model';

const useStyles = makeStyles(
  (theme) => ({
    node: {
      fill: theme.palette.grey[300],
      stroke: theme.palette.grey[300],
      "&.primary": {
        fill: theme.palette.primary.light,
        stroke: theme.palette.primary.light
      },
      "&.secondary": {
        fill: theme.palette.secondary.light,
        stroke: theme.palette.secondary.light
      }
    },
    text: {
      fill: theme.palette.getContrastText(theme.palette.grey[300]),
      "&.primary": {
        fill: theme.palette.primary.contrastText
      },
      "&.secondary": {
        fill: theme.palette.secondary.contrastText
      },
      "&.focused": {
        fontWeight: "bold"
      }
    },
    clickable: {
      cursor: "pointer"
    }
  }),
  { name: "PluginCatalogGraphCustomNode" }
);
function DefaultRenderNode({
  node: { id, entity, color = "default", focused, onClick }
}) {
  const classes = useStyles();
  const [width, setWidth] = useState(0);
  const [height, setHeight] = useState(0);
  const app = useApp();
  const idRef = useRef(null);
  useLayoutEffect(() => {
    if (idRef.current) {
      let { height: renderedHeight, width: renderedWidth } = idRef.current.getBBox();
      renderedHeight = Math.round(renderedHeight);
      renderedWidth = Math.round(renderedWidth);
      if (renderedHeight !== height || renderedWidth !== width) {
        setWidth(renderedWidth);
        setHeight(renderedHeight);
      }
    }
  }, [width, height]);
  const {
    kind,
    metadata: { name, namespace = DEFAULT_NAMESPACE, title }
  } = entity;
  const hasKindIcon = app.getSystemIcon(
    `kind:${kind.toLocaleLowerCase("en-US")}`
  );
  const padding = 10;
  const iconSize = height;
  const paddedIconWidth = hasKindIcon ? iconSize + padding : 0;
  const paddedWidth = paddedIconWidth + width + padding * 2;
  const paddedHeight = height + padding * 2;
  const displayTitle = title ?? (kind && name && namespace ? humanizeEntityRef({ kind, name, namespace }) : id);
  return /* @__PURE__ */ React.createElement("g", { onClick, className: classNames(onClick && classes.clickable) }, /* @__PURE__ */ React.createElement(
    "rect",
    {
      className: classNames(
        classes.node,
        color === "primary" && "primary",
        color === "secondary" && "secondary"
      ),
      width: paddedWidth,
      height: paddedHeight,
      rx: 10
    }
  ), hasKindIcon && /* @__PURE__ */ React.createElement(
    EntityKindIcon,
    {
      kind,
      y: padding,
      x: padding,
      width: iconSize,
      height: iconSize,
      className: classNames(
        classes.text,
        focused && "focused",
        color === "primary" && "primary",
        color === "secondary" && "secondary"
      )
    }
  ), /* @__PURE__ */ React.createElement(
    "text",
    {
      ref: idRef,
      className: classNames(
        classes.text,
        focused && "focused",
        color === "primary" && "primary",
        color === "secondary" && "secondary"
      ),
      y: paddedHeight / 2,
      x: paddedIconWidth + (width + padding * 2) / 2,
      textAnchor: "middle",
      alignmentBaseline: "middle"
    },
    displayTitle
  ));
}

export { DefaultRenderNode };
//# sourceMappingURL=DefaultRenderNode.esm.js.map
