{"version":3,"file":"index.cjs.js","sources":["../../backend-defaults/src/entrypoints/rootHttpRouter/http/config.ts","../../backend-defaults/src/entrypoints/discovery/HostDiscovery.ts","../../backend-defaults/src/entrypoints/cache/CacheClient.ts","../../backend-defaults/src/entrypoints/cache/CacheManager.ts","../../backend-defaults/src/entrypoints/database/connectors/defaultNameOverride.ts","../../backend-defaults/src/entrypoints/database/connectors/mergeDatabaseConfig.ts","../../backend-defaults/src/entrypoints/database/connectors/mysql.ts","../../backend-defaults/src/entrypoints/database/connectors/defaultSchemaOverride.ts","../../backend-defaults/src/entrypoints/database/connectors/postgres.ts","../../backend-defaults/src/entrypoints/database/connectors/sqlite3.ts","../../backend-defaults/src/entrypoints/database/DatabaseManager.ts","../../backend-defaults/src/entrypoints/urlReader/lib/ReadUrlResponseFactory.ts","../../backend-defaults/src/entrypoints/urlReader/lib/AzureUrlReader.ts","../../backend-defaults/src/entrypoints/urlReader/lib/util.ts","../../backend-defaults/src/entrypoints/urlReader/lib/BitbucketCloudUrlReader.ts","../../backend-defaults/src/entrypoints/urlReader/lib/BitbucketUrlReader.ts","../../backend-defaults/src/entrypoints/urlReader/lib/BitbucketServerUrlReader.ts","../../backend-defaults/src/entrypoints/urlReader/lib/GerritUrlReader.ts","../../backend-defaults/src/entrypoints/urlReader/lib/GithubUrlReader.ts","../../backend-defaults/src/entrypoints/urlReader/lib/GitlabUrlReader.ts","../../backend-defaults/src/entrypoints/urlReader/lib/GiteaUrlReader.ts","../../backend-defaults/src/entrypoints/urlReader/lib/HarnessUrlReader.ts","../../backend-defaults/src/entrypoints/urlReader/lib/AwsS3UrlReader.ts","../../backend-defaults/src/entrypoints/urlReader/lib/FetchUrlReader.ts","../../backend-defaults/src/entrypoints/urlReader/lib/UrlReaderPredicateMux.ts","../../backend-defaults/src/entrypoints/urlReader/lib/tree/util.ts","../../backend-defaults/src/entrypoints/urlReader/lib/tree/TarArchiveResponse.ts","../../backend-defaults/src/entrypoints/urlReader/lib/tree/ZipArchiveResponse.ts","../../backend-defaults/src/entrypoints/urlReader/lib/tree/ReadableArrayResponse.ts","../../backend-defaults/src/entrypoints/urlReader/lib/tree/ReadTreeResponseFactory.ts","../../backend-defaults/src/entrypoints/urlReader/lib/GoogleGcsUrlReader.ts","../../backend-defaults/src/entrypoints/urlReader/lib/AwsCodeCommitUrlReader.ts","../../backend-defaults/src/entrypoints/urlReader/lib/UrlReaders.ts","../src/deprecated/hot.ts","../../backend-defaults/src/entrypoints/rootConfig/createConfigSecretEnumerator.ts","../../backend-app-api/src/config/ObservableConfigProxy.ts","../../backend-app-api/src/lib/urls.ts","../../backend-app-api/src/config/config.ts","../../backend-defaults/src/lib/escapeRegExp.ts","../../backend-defaults/src/entrypoints/rootLogger/WinstonLogger.ts","../../backend-defaults/src/entrypoints/rootLogger/rootLoggerServiceFactory.ts","../../backend-app-api/src/logging/WinstonLogger.ts","../src/deprecated/logging/globalLoggers.ts","../src/deprecated/logging/createRootLogger.ts","../src/deprecated/config.ts","../src/deprecated/scm/git.ts","../src/deprecated/tokens/ServerTokenManager.ts","../../backend-defaults/src/entrypoints/rootHttpRouter/http/readHelmetOptions.ts","../../backend-defaults/src/entrypoints/rootHttpRouter/http/readCorsOptions.ts","../../backend-defaults/src/entrypoints/rootHttpRouter/http/applyInternalErrorFilter.ts","../../backend-defaults/src/entrypoints/rootHttpRouter/http/MiddlewareFactory.ts","../src/deprecated/middleware/errorHandler.ts","../src/deprecated/middleware/notFoundHandler.ts","../src/deprecated/middleware/requestLoggingHandler.ts","../src/deprecated/middleware/statusCheckHandler.ts","../../backend-defaults/src/entrypoints/rootHttpRouter/http/getGeneratedCertificate.ts","../../backend-defaults/src/entrypoints/rootHttpRouter/http/createHttpServer.ts","../src/deprecated/service/lib/ServiceBuilderImpl.ts","../src/deprecated/service/createServiceBuilder.ts","../src/deprecated/service/createStatusCheckRouter.ts","../src/deprecated/util/DockerContainerRunner.ts","../src/deprecated/util/KubernetesContainerRunner.ts","../src/deprecated/index.ts","../src/compat/cache/cacheToPluginCacheManager.ts","../src/compat/logging/loggerToWinstonLogger.ts","../src/compat/legacy/legacy.ts","../../backend-defaults/src/entrypoints/auth/helpers.ts","../src/compat/auth/createLegacyAuthAdapters.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport { HttpServerOptions } from './types';\n\nconst DEFAULT_PORT = 7007;\nconst DEFAULT_HOST = '';\n\n/**\n * Reads {@link HttpServerOptions} from a {@link @backstage/config#Config} object.\n *\n * @public\n * @remarks\n *\n * The provided configuration object should contain the `listen` and\n * additional keys directly.\n *\n * @example\n * ```ts\n * const opts = readHttpServerOptions(config.getConfig('backend'));\n * ```\n */\nexport function readHttpServerOptions(config?: Config): HttpServerOptions {\n  return {\n    listen: readHttpListenOptions(config),\n    https: readHttpsOptions(config),\n  };\n}\n\nfunction readHttpListenOptions(config?: Config): HttpServerOptions['listen'] {\n  const listen = config?.getOptional('listen');\n  if (typeof listen === 'string') {\n    const parts = String(listen).split(':');\n    const port = parseInt(parts[parts.length - 1], 10);\n    if (!isNaN(port)) {\n      if (parts.length === 1) {\n        return { port, host: DEFAULT_HOST };\n      }\n      if (parts.length === 2) {\n        return { host: parts[0], port };\n      }\n    }\n    throw new Error(\n      `Unable to parse listen address ${listen}, expected <port> or <host>:<port>`,\n    );\n  }\n\n  // Workaround to allow empty string\n  const host = config?.getOptional('listen.host') ?? DEFAULT_HOST;\n  if (typeof host !== 'string') {\n    config?.getOptionalString('listen.host'); // will throw\n    throw new Error('unreachable');\n  }\n\n  return {\n    port: config?.getOptionalNumber('listen.port') ?? DEFAULT_PORT,\n    host,\n  };\n}\n\nfunction readHttpsOptions(config?: Config): HttpServerOptions['https'] {\n  const https = config?.getOptional('https');\n  if (https === true) {\n    const baseUrl = config!.getString('baseUrl');\n    let hostname;\n    try {\n      hostname = new URL(baseUrl).hostname;\n    } catch (error) {\n      throw new Error(`Invalid baseUrl \"${baseUrl}\"`);\n    }\n\n    return { certificate: { type: 'generated', hostname } };\n  }\n\n  const cc = config?.getOptionalConfig('https');\n  if (!cc) {\n    return undefined;\n  }\n\n  return {\n    certificate: {\n      type: 'pem',\n      cert: cc.getString('certificate.cert'),\n      key: cc.getString('certificate.key'),\n    },\n  };\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport { DiscoveryService } from '@backstage/backend-plugin-api';\nimport { readHttpServerOptions } from '../rootHttpRouter/http/config';\n\ntype Target = string | { internal: string; external: string };\n\n/**\n * HostDiscovery is a basic PluginEndpointDiscovery implementation\n * that can handle plugins that are hosted in a single or multiple deployments.\n *\n * The deployment may be scaled horizontally, as long as the external URL\n * is the same for all instances. However, internal URLs will always be\n * resolved to the same host, so there won't be any balancing of internal traffic.\n *\n * @public\n */\nexport class HostDiscovery implements DiscoveryService {\n  /**\n   * Creates a new HostDiscovery discovery instance by reading\n   * from the `backend` config section, specifically the `.baseUrl` for\n   * discovering the external URL, and the `.listen` and `.https` config\n   * for the internal one.\n   *\n   * Can be overridden in config by providing a target and corresponding plugins in `discovery.endpoints`.\n   * eg.\n   * ```yaml\n   * discovery:\n   *  endpoints:\n   *    - target: https://internal.example.com/internal-catalog\n   *      plugins: [catalog]\n   *    - target: https://internal.example.com/secure/api/{{pluginId}}\n   *      plugins: [auth, permission]\n   *    - target:\n   *        internal: https://internal.example.com/search\n   *        external: https://example.com/search\n   *      plugins: [search]\n   * ```\n   *\n   * The basePath defaults to `/api`, meaning the default full internal\n   * path for the `catalog` plugin will be `http://localhost:7007/api/catalog`.\n   */\n  static fromConfig(config: Config, options?: { basePath?: string }) {\n    const basePath = options?.basePath ?? '/api';\n    const externalBaseUrl = config\n      .getString('backend.baseUrl')\n      .replace(/\\/+$/, '');\n\n    const {\n      listen: { host: listenHost = '::', port: listenPort },\n    } = readHttpServerOptions(config.getConfig('backend'));\n    const protocol = config.has('backend.https') ? 'https' : 'http';\n\n    // Translate bind-all to localhost, and support IPv6\n    let host = listenHost;\n    if (host === '::' || host === '') {\n      // We use localhost instead of ::1, since IPv6-compatible systems should default\n      // to using IPv6 when they see localhost, but if the system doesn't support IPv6\n      // things will still work.\n      host = 'localhost';\n    } else if (host === '0.0.0.0') {\n      host = '127.0.0.1';\n    }\n    if (host.includes(':')) {\n      host = `[${host}]`;\n    }\n\n    const internalBaseUrl = `${protocol}://${host}:${listenPort}`;\n\n    return new HostDiscovery(\n      internalBaseUrl + basePath,\n      externalBaseUrl + basePath,\n      config.getOptionalConfig('discovery'),\n    );\n  }\n\n  private constructor(\n    private readonly internalBaseUrl: string,\n    private readonly externalBaseUrl: string,\n    private readonly discoveryConfig: Config | undefined,\n  ) {}\n\n  private getTargetFromConfig(pluginId: string, type: 'internal' | 'external') {\n    const endpoints = this.discoveryConfig?.getOptionalConfigArray('endpoints');\n\n    const target = endpoints\n      ?.find(endpoint => endpoint.getStringArray('plugins').includes(pluginId))\n      ?.get<Target>('target');\n\n    if (!target) {\n      const baseUrl =\n        type === 'external' ? this.externalBaseUrl : this.internalBaseUrl;\n\n      return `${baseUrl}/${encodeURIComponent(pluginId)}`;\n    }\n\n    if (typeof target === 'string') {\n      return target.replace(\n        /\\{\\{\\s*pluginId\\s*\\}\\}/g,\n        encodeURIComponent(pluginId),\n      );\n    }\n\n    return target[type].replace(\n      /\\{\\{\\s*pluginId\\s*\\}\\}/g,\n      encodeURIComponent(pluginId),\n    );\n  }\n\n  async getBaseUrl(pluginId: string): Promise<string> {\n    return this.getTargetFromConfig(pluginId, 'internal');\n  }\n\n  async getExternalBaseUrl(pluginId: string): Promise<string> {\n    return this.getTargetFromConfig(pluginId, 'external');\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  CacheService,\n  CacheServiceOptions,\n  CacheServiceSetOptions,\n} from '@backstage/backend-plugin-api';\nimport { JsonValue } from '@backstage/types';\nimport { createHash } from 'crypto';\nimport Keyv from 'keyv';\n\nexport type CacheClientFactory = (options: CacheServiceOptions) => Keyv;\n\n/**\n * A basic, concrete implementation of the CacheService, suitable for almost\n * all uses in Backstage.\n */\nexport class DefaultCacheClient implements CacheService {\n  #client: Keyv;\n  #clientFactory: CacheClientFactory;\n  #options: CacheServiceOptions;\n\n  constructor(\n    client: Keyv,\n    clientFactory: CacheClientFactory,\n    options: CacheServiceOptions,\n  ) {\n    this.#client = client;\n    this.#clientFactory = clientFactory;\n    this.#options = options;\n  }\n\n  async get<TValue extends JsonValue>(\n    key: string,\n  ): Promise<TValue | undefined> {\n    const k = this.getNormalizedKey(key);\n    const value = await this.#client.get(k);\n    return value as TValue | undefined;\n  }\n\n  async set(\n    key: string,\n    value: JsonValue,\n    opts: CacheServiceSetOptions = {},\n  ): Promise<void> {\n    const k = this.getNormalizedKey(key);\n    await this.#client.set(k, value, opts.ttl);\n  }\n\n  async delete(key: string): Promise<void> {\n    const k = this.getNormalizedKey(key);\n    await this.#client.delete(k);\n  }\n\n  withOptions(options: CacheServiceOptions): CacheService {\n    const newOptions = { ...this.#options, ...options };\n    return new DefaultCacheClient(\n      this.#clientFactory(newOptions),\n      this.#clientFactory,\n      newOptions,\n    );\n  }\n\n  /**\n   * Ensures keys are well-formed for any/all cache stores.\n   */\n  private getNormalizedKey(candidateKey: string): string {\n    // Remove potentially invalid characters.\n    const wellFormedKey = Buffer.from(candidateKey).toString('base64');\n\n    // Memcache in particular doesn't do well with keys > 250 bytes.\n    // Padded because a plugin ID is also prepended to the key.\n    if (wellFormedKey.length < 200) {\n      return wellFormedKey;\n    }\n\n    return createHash('sha256').update(candidateKey).digest('base64');\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  CacheServiceOptions,\n  LoggerService,\n} from '@backstage/backend-plugin-api';\nimport { Config } from '@backstage/config';\nimport Keyv from 'keyv';\nimport { DefaultCacheClient } from './CacheClient';\nimport { CacheManagerOptions, PluginCacheManager } from './types';\n\ntype StoreFactory = (pluginId: string, defaultTtl: number | undefined) => Keyv;\n\n/**\n * Implements a Cache Manager which will automatically create new cache clients\n * for plugins when requested. All requested cache clients are created with the\n * connection details provided.\n *\n * @public\n */\nexport class CacheManager {\n  /**\n   * Keys represent supported `backend.cache.store` values, mapped to factories\n   * that return Keyv instances appropriate to the store.\n   */\n  private readonly storeFactories = {\n    redis: this.createRedisStoreFactory(),\n    memcache: this.createMemcacheStoreFactory(),\n    memory: this.createMemoryStoreFactory(),\n  };\n\n  private readonly logger?: LoggerService;\n  private readonly store: keyof CacheManager['storeFactories'];\n  private readonly connection: string;\n  private readonly useRedisSets: boolean;\n  private readonly errorHandler: CacheManagerOptions['onError'];\n  private readonly defaultTtl?: number;\n\n  /**\n   * Creates a new {@link CacheManager} instance by reading from the `backend`\n   * config section, specifically the `.cache` key.\n   *\n   * @param config - The loaded application configuration.\n   */\n  static fromConfig(\n    config: Config,\n    options: CacheManagerOptions = {},\n  ): CacheManager {\n    // If no `backend.cache` config is provided, instantiate the CacheManager\n    // with an in-memory cache client.\n    const store = config.getOptionalString('backend.cache.store') || 'memory';\n    const defaultTtl = config.getOptionalNumber('backend.cache.defaultTtl');\n    const connectionString =\n      config.getOptionalString('backend.cache.connection') || '';\n    const useRedisSets =\n      config.getOptionalBoolean('backend.cache.useRedisSets') ?? true;\n    const logger = options.logger?.child({\n      type: 'cacheManager',\n    });\n    return new CacheManager(\n      store,\n      connectionString,\n      useRedisSets,\n      options.onError,\n      logger,\n      defaultTtl,\n    );\n  }\n\n  /** @internal */\n  constructor(\n    store: string,\n    connectionString: string,\n    useRedisSets: boolean,\n    errorHandler: CacheManagerOptions['onError'],\n    logger?: LoggerService,\n    defaultTtl?: number,\n  ) {\n    if (!this.storeFactories.hasOwnProperty(store)) {\n      throw new Error(`Unknown cache store: ${store}`);\n    }\n    this.logger = logger;\n    this.store = store as keyof CacheManager['storeFactories'];\n    this.connection = connectionString;\n    this.useRedisSets = useRedisSets;\n    this.errorHandler = errorHandler;\n    this.defaultTtl = defaultTtl;\n  }\n\n  /**\n   * Generates a PluginCacheManager for consumption by plugins.\n   *\n   * @param pluginId - The plugin that the cache manager should be created for.\n   *        Plugin names should be unique.\n   */\n  forPlugin(pluginId: string): PluginCacheManager {\n    return {\n      getClient: (defaultOptions = {}) => {\n        const clientFactory = (options: CacheServiceOptions) => {\n          const concreteClient = this.getClientWithTtl(\n            pluginId,\n            options.defaultTtl ?? this.defaultTtl,\n          );\n\n          // Always provide an error handler to avoid stopping the process.\n          concreteClient.on('error', (err: Error) => {\n            // In all cases, just log the error.\n            this.logger?.error('Failed to create cache client', err);\n\n            // Invoke any custom error handler if provided.\n            if (typeof this.errorHandler === 'function') {\n              this.errorHandler(err);\n            }\n          });\n\n          return concreteClient;\n        };\n\n        return new DefaultCacheClient(\n          clientFactory(defaultOptions),\n          clientFactory,\n          defaultOptions,\n        );\n      },\n    };\n  }\n\n  private getClientWithTtl(pluginId: string, ttl: number | undefined): Keyv {\n    return this.storeFactories[this.store](pluginId, ttl);\n  }\n\n  private createRedisStoreFactory(): StoreFactory {\n    const KeyvRedis = require('@keyv/redis');\n    let store: typeof KeyvRedis | undefined;\n    return (pluginId, defaultTtl) => {\n      if (!store) {\n        store = new KeyvRedis(this.connection);\n      }\n      return new Keyv({\n        namespace: pluginId,\n        ttl: defaultTtl,\n        store,\n        useRedisSets: this.useRedisSets,\n      });\n    };\n  }\n\n  private createMemcacheStoreFactory(): StoreFactory {\n    const KeyvMemcache = require('@keyv/memcache');\n    let store: typeof KeyvMemcache | undefined;\n    return (pluginId, defaultTtl) => {\n      if (!store) {\n        store = new KeyvMemcache(this.connection);\n      }\n      return new Keyv({\n        namespace: pluginId,\n        ttl: defaultTtl,\n        store,\n      });\n    };\n  }\n\n  private createMemoryStoreFactory(): StoreFactory {\n    const store = new Map();\n    return (pluginId, defaultTtl) =>\n      new Keyv({\n        namespace: pluginId,\n        ttl: defaultTtl,\n        store,\n      });\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Knex } from 'knex';\n\n/**\n * Provides a partial knex config with database name override.\n *\n * Default override for knex database drivers which accept ConnectionConfig\n * with `connection.database` as the database name field.\n *\n * @param name - database name to get config override for\n */\nexport default function defaultNameOverride(\n  name: string,\n): Partial<Knex.Config> {\n  return {\n    connection: {\n      database: name,\n    },\n  };\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { merge } from 'lodash';\n\n/**\n * Merges database objects together\n *\n * @public\n * @param config - The base config. The input is not modified\n * @param overrides - Any additional overrides\n */\nexport function mergeDatabaseConfig(config: any, ...overrides: any[]) {\n  return merge({}, config, ...overrides);\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  LifecycleService,\n  PluginMetadataService,\n} from '@backstage/backend-plugin-api';\nimport { Config, ConfigReader } from '@backstage/config';\nimport { InputError } from '@backstage/errors';\nimport { JsonObject } from '@backstage/types';\nimport knexFactory, { Knex } from 'knex';\nimport { merge, omit } from 'lodash';\nimport limiterFactory from 'p-limit';\nimport yn from 'yn';\nimport { Connector } from '../types';\nimport defaultNameOverride from './defaultNameOverride';\nimport { mergeDatabaseConfig } from './mergeDatabaseConfig';\n\n// Limits the number of concurrent DDL operations to 1\nconst ddlLimiter = limiterFactory(1);\n\n/**\n * Creates a knex mysql database connection\n *\n * @param dbConfig - The database config\n * @param overrides - Additional options to merge with the config\n */\nexport function createMysqlDatabaseClient(\n  dbConfig: Config,\n  overrides?: Knex.Config,\n) {\n  const knexConfig = buildMysqlDatabaseConfig(dbConfig, overrides);\n  const database = knexFactory(knexConfig);\n  return database;\n}\n\n/**\n * Builds a knex mysql database connection\n *\n * @param dbConfig - The database config\n * @param overrides - Additional options to merge with the config\n */\nexport function buildMysqlDatabaseConfig(\n  dbConfig: Config,\n  overrides?: Knex.Config,\n) {\n  return mergeDatabaseConfig(\n    dbConfig.get(),\n    {\n      connection: getMysqlConnectionConfig(dbConfig, !!overrides),\n      useNullAsDefault: true,\n    },\n    overrides,\n  );\n}\n\n/**\n * Gets the mysql connection config\n *\n * @param dbConfig - The database config\n * @param parseConnectionString - Flag to explicitly control connection string parsing\n */\nexport function getMysqlConnectionConfig(\n  dbConfig: Config,\n  parseConnectionString?: boolean,\n): Knex.MySqlConnectionConfig | string {\n  const connection = dbConfig.get('connection') as any;\n  const isConnectionString =\n    typeof connection === 'string' || connection instanceof String;\n  const autoParse = typeof parseConnectionString !== 'boolean';\n\n  const shouldParseConnectionString = autoParse\n    ? isConnectionString\n    : parseConnectionString && isConnectionString;\n\n  return shouldParseConnectionString\n    ? parseMysqlConnectionString(connection as string)\n    : connection;\n}\n\n/**\n * Parses a mysql connection string.\n *\n * e.g. mysql://examplename:somepassword@examplehost:3306/dbname\n * @param connectionString - The mysql connection string\n */\nexport function parseMysqlConnectionString(\n  connectionString: string,\n): Knex.MySqlConnectionConfig {\n  try {\n    const {\n      protocol,\n      username,\n      password,\n      port,\n      hostname,\n      pathname,\n      searchParams,\n    } = new URL(connectionString);\n\n    if (protocol !== 'mysql:') {\n      throw new Error(`Unknown protocol ${protocol}`);\n    } else if (!username || !password) {\n      throw new Error(`Missing username/password`);\n    } else if (!pathname.match(/^\\/[^/]+$/)) {\n      throw new Error(`Expected single path segment`);\n    }\n\n    const result: Knex.MySqlConnectionConfig = {\n      user: username,\n      password,\n      host: hostname,\n      port: Number(port || 3306),\n      database: decodeURIComponent(pathname.substring(1)),\n    };\n\n    const ssl = searchParams.get('ssl');\n    if (ssl) {\n      result.ssl = ssl;\n    }\n\n    const debug = searchParams.get('debug');\n    if (debug) {\n      result.debug = yn(debug);\n    }\n\n    return result;\n  } catch (e) {\n    throw new InputError(\n      `Error while parsing MySQL connection string, ${e}`,\n      e,\n    );\n  }\n}\n\n/**\n * Creates the missing mysql database if it does not exist\n *\n * @param dbConfig - The database config\n * @param databases - The names of the databases to create\n */\nexport async function ensureMysqlDatabaseExists(\n  dbConfig: Config,\n  ...databases: Array<string>\n) {\n  const admin = createMysqlDatabaseClient(dbConfig, {\n    connection: {\n      database: null as unknown as string,\n    },\n    pool: {\n      min: 0,\n      acquireTimeoutMillis: 10000,\n    },\n  });\n\n  try {\n    const ensureDatabase = async (database: string) => {\n      await admin.raw(`CREATE DATABASE IF NOT EXISTS ??`, [database]);\n    };\n    await Promise.all(\n      databases.map(async database => {\n        // For initial setup we use a smaller timeout but several retries. Given that this\n        // is a separate connection pool we should never really run into issues with connection\n        // acquisition timeouts, but we do anyway. This might be a bug in knex or some other dependency.\n        let lastErr: Error | undefined = undefined;\n        for (let i = 0; i < 3; i++) {\n          try {\n            return await ddlLimiter(() => ensureDatabase(database));\n          } catch (err) {\n            lastErr = err;\n          }\n          await new Promise(resolve => setTimeout(resolve, 100));\n        }\n        throw lastErr;\n      }),\n    );\n  } finally {\n    await admin.destroy();\n  }\n}\n\n/**\n * Drops the given mysql databases.\n *\n * @param dbConfig - The database config\n * @param databases - The names of the databases to create\n */\nexport async function dropMysqlDatabase(\n  dbConfig: Config,\n  ...databases: Array<string>\n) {\n  const admin = createMysqlDatabaseClient(dbConfig, {\n    connection: {\n      database: null as unknown as string,\n    },\n    pool: {\n      min: 0,\n      acquireTimeoutMillis: 10000,\n    },\n  });\n\n  try {\n    const dropDatabase = async (database: string) => {\n      await admin.raw(`DROP DATABASE ??`, [database]);\n    };\n    await Promise.all(\n      databases.map(async database => {\n        return await ddlLimiter(() => dropDatabase(database));\n      }),\n    );\n  } finally {\n    await admin.destroy();\n  }\n}\n\n/**\n * Provides a config lookup path for a plugin's config block.\n */\nfunction pluginPath(pluginId: string): string {\n  return `plugin.${pluginId}`;\n}\n\nfunction normalizeConnection(\n  connection: Knex.StaticConnectionConfig | JsonObject | string | undefined,\n): Partial<Knex.StaticConnectionConfig> {\n  if (typeof connection === 'undefined' || connection === null) {\n    return {};\n  }\n\n  return typeof connection === 'string' || connection instanceof String\n    ? parseMysqlConnectionString(connection as string)\n    : connection;\n}\n\nexport class MysqlConnector implements Connector {\n  constructor(\n    private readonly config: Config,\n    private readonly prefix: string,\n  ) {}\n\n  async getClient(\n    pluginId: string,\n    _deps?: {\n      lifecycle: LifecycleService;\n      pluginMetadata: PluginMetadataService;\n    },\n  ): Promise<Knex> {\n    const pluginConfig = new ConfigReader(\n      this.getConfigForPlugin(pluginId) as JsonObject,\n    );\n\n    const databaseName = this.getDatabaseName(pluginId);\n    if (databaseName && this.getEnsureExistsConfig(pluginId)) {\n      try {\n        await ensureMysqlDatabaseExists(pluginConfig, databaseName);\n      } catch (error) {\n        throw new Error(\n          `Failed to connect to the database to make sure that '${databaseName}' exists, ${error}`,\n        );\n      }\n    }\n\n    const pluginDivisionMode = this.getPluginDivisionModeConfig();\n    if (pluginDivisionMode !== 'database') {\n      throw new Error(\n        `The MySQL driver does not support plugin division mode '${pluginDivisionMode}'`,\n      );\n    }\n\n    const databaseClientOverrides = mergeDatabaseConfig(\n      {},\n      this.getDatabaseOverrides(pluginId),\n    );\n\n    const client = createMysqlDatabaseClient(\n      pluginConfig,\n      databaseClientOverrides,\n    );\n\n    return client;\n  }\n\n  async dropDatabase(...databaseNames: string[]): Promise<void> {\n    return await dropMysqlDatabase(this.config, ...databaseNames);\n  }\n\n  /**\n   * Provides the canonical database name for a given plugin.\n   *\n   * This method provides the effective database name which is determined using\n   * global and plugin specific database config. If no explicit database name,\n   * this method will provide a generated name which is the pluginId prefixed\n   * with 'backstage_plugin_'.\n   *\n   * @param pluginId - Lookup the database name for given plugin\n   * @returns String representing the plugin's database name\n   */\n  private getDatabaseName(pluginId: string): string | undefined {\n    const connection = this.getConnectionConfig(pluginId);\n    const databaseName = (connection as Knex.ConnectionConfig)?.database;\n    return databaseName ?? `${this.prefix}${pluginId}`;\n  }\n\n  /**\n   * Provides the client type which should be used for a given plugin.\n   *\n   * The client type is determined by plugin specific config if present.\n   * Otherwise the base client is used as the fallback.\n   *\n   * @param pluginId - Plugin to get the client type for\n   * @returns Object with client type returned as `client` and boolean\n   *          representing whether or not the client was overridden as\n   *          `overridden`\n   */\n  private getClientType(pluginId: string): {\n    client: string;\n    overridden: boolean;\n  } {\n    const pluginClient = this.config.getOptionalString(\n      `${pluginPath(pluginId)}.client`,\n    );\n\n    const baseClient = this.config.getString('client');\n    const client = pluginClient ?? baseClient;\n    return {\n      client,\n      overridden: client !== baseClient,\n    };\n  }\n\n  private getRoleConfig(pluginId: string): string | undefined {\n    return (\n      this.config.getOptionalString(`${pluginPath(pluginId)}.role`) ??\n      this.config.getOptionalString('role')\n    );\n  }\n\n  /**\n   * Provides the knexConfig which should be used for a given plugin.\n   *\n   * @param pluginId - Plugin to get the knexConfig for\n   * @returns The merged knexConfig value or undefined if it isn't specified\n   */\n  private getAdditionalKnexConfig(pluginId: string): JsonObject | undefined {\n    const pluginConfig = this.config\n      .getOptionalConfig(`${pluginPath(pluginId)}.knexConfig`)\n      ?.get<JsonObject>();\n\n    const baseConfig = this.config\n      .getOptionalConfig('knexConfig')\n      ?.get<JsonObject>();\n\n    return merge(baseConfig, pluginConfig);\n  }\n\n  private getEnsureExistsConfig(pluginId: string): boolean {\n    const baseConfig = this.config.getOptionalBoolean('ensureExists') ?? true;\n    return (\n      this.config.getOptionalBoolean(`${pluginPath(pluginId)}.ensureExists`) ??\n      baseConfig\n    );\n  }\n\n  private getPluginDivisionModeConfig(): string {\n    return this.config.getOptionalString('pluginDivisionMode') ?? 'database';\n  }\n\n  /**\n   * Provides a Knex connection plugin config by combining base and plugin\n   * config.\n   *\n   * This method provides a baseConfig for a plugin database connector. If the\n   * client type has not been overridden, the global connection config will be\n   * included with plugin specific config as the base. Values from the plugin\n   * connection take precedence over the base. Base database name is omitted\n   * unless `pluginDivisionMode` is set to `schema`.\n   */\n  private getConnectionConfig(pluginId: string): Knex.StaticConnectionConfig {\n    const { overridden } = this.getClientType(pluginId);\n\n    let baseConnection = normalizeConnection(this.config.get('connection'));\n\n    // Databases cannot be shared unless the `pluginDivisionMode` is set to `schema`. The\n    // `database` property from the base connection is omitted unless `pluginDivisionMode`\n    // is set to `schema`.\n    if (this.getPluginDivisionModeConfig() !== 'schema') {\n      baseConnection = omit(baseConnection, 'database');\n    }\n\n    // get and normalize optional plugin specific database connection\n    const connection = normalizeConnection(\n      this.config.getOptional(`${pluginPath(pluginId)}.connection`),\n    );\n\n    return {\n      // include base connection if client type has not been overridden\n      ...(overridden ? {} : baseConnection),\n      ...connection,\n    } as Knex.StaticConnectionConfig;\n  }\n\n  /**\n   * Provides a Knex database config for a given plugin.\n   *\n   * This method provides a Knex configuration object along with the plugin's\n   * client type.\n   *\n   * @param pluginId - The plugin that the database config should correspond with\n   */\n  private getConfigForPlugin(pluginId: string): Knex.Config {\n    const { client } = this.getClientType(pluginId);\n    const role = this.getRoleConfig(pluginId);\n\n    return {\n      ...this.getAdditionalKnexConfig(pluginId),\n      client,\n      connection: this.getConnectionConfig(pluginId),\n      ...(role && { role }),\n    };\n  }\n\n  /**\n   * Provides a partial `Knex.Config`• database name override for a given plugin.\n   *\n   * @param pluginId - Target plugin to get database name override\n   * @returns Partial `Knex.Config` with database name override\n   */\n  private getDatabaseOverrides(pluginId: string): Knex.Config {\n    const databaseName = this.getDatabaseName(pluginId);\n    return databaseName ? defaultNameOverride(databaseName) : {};\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Knex } from 'knex';\n\n/**\n * Provides a partial knex config with schema name override.\n *\n * @param name - schema name to get config override for\n */\nexport default function defaultSchemaOverride(\n  name: string,\n): Partial<Knex.Config> {\n  return {\n    searchPath: [name],\n  };\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  LifecycleService,\n  PluginMetadataService,\n} from '@backstage/backend-plugin-api';\nimport { Config, ConfigReader } from '@backstage/config';\nimport { ForwardedError } from '@backstage/errors';\nimport { JsonObject } from '@backstage/types';\nimport knexFactory, { Knex } from 'knex';\nimport { merge, omit } from 'lodash';\nimport limiterFactory from 'p-limit';\nimport { Client } from 'pg';\nimport { Connector } from '../types';\nimport defaultNameOverride from './defaultNameOverride';\nimport defaultSchemaOverride from './defaultSchemaOverride';\nimport { mergeDatabaseConfig } from './mergeDatabaseConfig';\n\n// Limits the number of concurrent DDL operations to 1\nconst ddlLimiter = limiterFactory(1);\n\n/**\n * Creates a knex postgres database connection\n *\n * @param dbConfig - The database config\n * @param overrides - Additional options to merge with the config\n */\nexport function createPgDatabaseClient(\n  dbConfig: Config,\n  overrides?: Knex.Config,\n) {\n  const knexConfig = buildPgDatabaseConfig(dbConfig, overrides);\n  const database = knexFactory(knexConfig);\n\n  const role = dbConfig.getOptionalString('role');\n\n  if (role) {\n    database.client.pool.on(\n      'createSuccess',\n      async (_event: number, pgClient: Client) => {\n        await pgClient.query(`SET ROLE ${role}`);\n      },\n    );\n  }\n  return database;\n}\n\n/**\n * Builds a knex postgres database connection\n *\n * @param dbConfig - The database config\n * @param overrides - Additional options to merge with the config\n */\nexport function buildPgDatabaseConfig(\n  dbConfig: Config,\n  overrides?: Knex.Config,\n) {\n  return mergeDatabaseConfig(\n    dbConfig.get(),\n    {\n      connection: getPgConnectionConfig(dbConfig, !!overrides),\n      useNullAsDefault: true,\n    },\n    overrides,\n  );\n}\n\n/**\n * Gets the postgres connection config\n *\n * @param dbConfig - The database config\n * @param parseConnectionString - Flag to explicitly control connection string parsing\n */\nexport function getPgConnectionConfig(\n  dbConfig: Config,\n  parseConnectionString?: boolean,\n): Knex.PgConnectionConfig | string {\n  const connection = dbConfig.get('connection') as any;\n  const isConnectionString =\n    typeof connection === 'string' || connection instanceof String;\n  const autoParse = typeof parseConnectionString !== 'boolean';\n\n  const shouldParseConnectionString = autoParse\n    ? isConnectionString\n    : parseConnectionString && isConnectionString;\n\n  return shouldParseConnectionString\n    ? parsePgConnectionString(connection as string)\n    : connection;\n}\n\n/**\n * Parses a connection string using pg-connection-string\n *\n * @param connectionString - The postgres connection string\n */\nexport function parsePgConnectionString(connectionString: string) {\n  const parse = requirePgConnectionString();\n  return parse(connectionString);\n}\n\nfunction requirePgConnectionString() {\n  try {\n    return require('pg-connection-string').parse;\n  } catch (e) {\n    throw new ForwardedError(\"Postgres: Install 'pg-connection-string'\", e);\n  }\n}\n\n/**\n * Creates the missing Postgres database if it does not exist\n *\n * @param dbConfig - The database config\n * @param databases - The name of the databases to create\n */\nexport async function ensurePgDatabaseExists(\n  dbConfig: Config,\n  ...databases: Array<string>\n) {\n  const admin = createPgDatabaseClient(dbConfig, {\n    connection: {\n      database: 'postgres',\n    },\n    pool: {\n      min: 0,\n      acquireTimeoutMillis: 10000,\n    },\n  });\n\n  try {\n    const ensureDatabase = async (database: string) => {\n      const result = await admin\n        .from('pg_database')\n        .where('datname', database)\n        .count<Record<string, { count: string }>>();\n\n      if (parseInt(result[0].count, 10) > 0) {\n        return;\n      }\n\n      await admin.raw(`CREATE DATABASE ??`, [database]);\n    };\n\n    await Promise.all(\n      databases.map(async database => {\n        // For initial setup we use a smaller timeout but several retries. Given that this\n        // is a separate connection pool we should never really run into issues with connection\n        // acquisition timeouts, but we do anyway. This might be a bug in knex or some other dependency.\n        let lastErr: Error | undefined = undefined;\n        for (let i = 0; i < 3; i++) {\n          try {\n            return await ddlLimiter(() => ensureDatabase(database));\n          } catch (err) {\n            lastErr = err;\n          }\n          await new Promise(resolve => setTimeout(resolve, 100));\n        }\n        throw lastErr;\n      }),\n    );\n  } finally {\n    await admin.destroy();\n  }\n}\n\n/**\n * Creates the missing Postgres schema if it does not exist\n *\n * @param dbConfig - The database config\n * @param schemas - The name of the schemas to create\n */\nexport async function ensurePgSchemaExists(\n  dbConfig: Config,\n  ...schemas: Array<string>\n): Promise<void> {\n  const admin = createPgDatabaseClient(dbConfig);\n  const role = dbConfig.getOptionalString('role');\n\n  try {\n    const ensureSchema = async (database: string) => {\n      if (role) {\n        await admin.raw(`CREATE SCHEMA IF NOT EXISTS ?? AUTHORIZATION ??`, [\n          database,\n          role,\n        ]);\n      } else {\n        await admin.raw(`CREATE SCHEMA IF NOT EXISTS ??`, [database]);\n      }\n    };\n\n    await Promise.all(\n      schemas.map(database => ddlLimiter(() => ensureSchema(database))),\n    );\n  } finally {\n    await admin.destroy();\n  }\n}\n\n/**\n * Drops the Postgres databases.\n *\n * @param dbConfig - The database config\n * @param databases - The name of the databases to drop\n */\nexport async function dropPgDatabase(\n  dbConfig: Config,\n  ...databases: Array<string>\n) {\n  const admin = createPgDatabaseClient(dbConfig);\n  try {\n    await Promise.all(\n      databases.map(async database => {\n        await ddlLimiter(() => admin.raw(`DROP DATABASE ??`, [database]));\n      }),\n    );\n  } finally {\n    await admin.destroy();\n  }\n}\n\n/**\n * Provides a config lookup path for a plugin's config block.\n */\nfunction pluginPath(pluginId: string): string {\n  return `plugin.${pluginId}`;\n}\n\nfunction normalizeConnection(\n  connection: Knex.StaticConnectionConfig | JsonObject | string | undefined,\n): Partial<Knex.StaticConnectionConfig> {\n  if (typeof connection === 'undefined' || connection === null) {\n    return {};\n  }\n\n  return typeof connection === 'string' || connection instanceof String\n    ? parsePgConnectionString(connection as string)\n    : connection;\n}\n\nexport class PgConnector implements Connector {\n  constructor(\n    private readonly config: Config,\n    private readonly prefix: string,\n  ) {}\n\n  async getClient(\n    pluginId: string,\n    _deps?: {\n      lifecycle: LifecycleService;\n      pluginMetadata: PluginMetadataService;\n    },\n  ): Promise<Knex> {\n    const pluginConfig = new ConfigReader(\n      this.getConfigForPlugin(pluginId) as JsonObject,\n    );\n\n    const databaseName = this.getDatabaseName(pluginId);\n    if (databaseName && this.getEnsureExistsConfig(pluginId)) {\n      try {\n        await ensurePgDatabaseExists(pluginConfig, databaseName);\n      } catch (error) {\n        throw new Error(\n          `Failed to connect to the database to make sure that '${databaseName}' exists, ${error}`,\n        );\n      }\n    }\n\n    let schemaOverrides;\n    if (this.getPluginDivisionModeConfig() === 'schema') {\n      schemaOverrides = defaultSchemaOverride(pluginId);\n      if (\n        this.getEnsureSchemaExistsConfig(pluginId) ||\n        this.getEnsureExistsConfig(pluginId)\n      ) {\n        try {\n          await ensurePgSchemaExists(pluginConfig, pluginId);\n        } catch (error) {\n          throw new Error(\n            `Failed to connect to the database to make sure that schema for plugin '${pluginId}' exists, ${error}`,\n          );\n        }\n      }\n    }\n\n    const databaseClientOverrides = mergeDatabaseConfig(\n      {},\n      this.getDatabaseOverrides(pluginId),\n      schemaOverrides,\n    );\n\n    const client = createPgDatabaseClient(\n      pluginConfig,\n      databaseClientOverrides,\n    );\n\n    return client;\n  }\n\n  async dropDatabase(...databaseNames: string[]): Promise<void> {\n    return await dropPgDatabase(this.config, ...databaseNames);\n  }\n\n  /**\n   * Provides the canonical database name for a given plugin.\n   *\n   * This method provides the effective database name which is determined using global\n   * and plugin specific database config. If no explicit database name is configured\n   * and `pluginDivisionMode` is not `schema`, this method will provide a generated name\n   * which is the pluginId prefixed with 'backstage_plugin_'. If `pluginDivisionMode` is\n   * `schema`, it will fallback to using the default database for the knex instance.\n   *\n   * @param pluginId - Lookup the database name for given plugin\n   * @returns String representing the plugin's database name\n   */\n  private getDatabaseName(pluginId: string): string | undefined {\n    const connection = this.getConnectionConfig(pluginId);\n\n    const databaseName = (connection as Knex.ConnectionConfig)?.database;\n\n    // `pluginDivisionMode` as `schema` should use overridden databaseName if supplied or fallback to default knex database\n    if (this.getPluginDivisionModeConfig() === 'schema') {\n      return databaseName;\n    }\n\n    // all other supported databases should fallback to an auto-prefixed name\n    return databaseName ?? `${this.prefix}${pluginId}`;\n  }\n\n  /**\n   * Provides the client type which should be used for a given plugin.\n   *\n   * The client type is determined by plugin specific config if present.\n   * Otherwise the base client is used as the fallback.\n   *\n   * @param pluginId - Plugin to get the client type for\n   * @returns Object with client type returned as `client` and boolean\n   *          representing whether or not the client was overridden as\n   *          `overridden`\n   */\n  private getClientType(pluginId: string): {\n    client: string;\n    overridden: boolean;\n  } {\n    const pluginClient = this.config.getOptionalString(\n      `${pluginPath(pluginId)}.client`,\n    );\n\n    const baseClient = this.config.getString('client');\n    const client = pluginClient ?? baseClient;\n    return {\n      client,\n      overridden: client !== baseClient,\n    };\n  }\n\n  private getRoleConfig(pluginId: string): string | undefined {\n    return (\n      this.config.getOptionalString(`${pluginPath(pluginId)}.role`) ??\n      this.config.getOptionalString('role')\n    );\n  }\n\n  /**\n   * Provides the knexConfig which should be used for a given plugin.\n   *\n   * @param pluginId - Plugin to get the knexConfig for\n   * @returns The merged knexConfig value or undefined if it isn't specified\n   */\n  private getAdditionalKnexConfig(pluginId: string): JsonObject | undefined {\n    const pluginConfig = this.config\n      .getOptionalConfig(`${pluginPath(pluginId)}.knexConfig`)\n      ?.get<JsonObject>();\n\n    const baseConfig = this.config\n      .getOptionalConfig('knexConfig')\n      ?.get<JsonObject>();\n\n    return merge(baseConfig, pluginConfig);\n  }\n\n  private getEnsureExistsConfig(pluginId: string): boolean {\n    const baseConfig = this.config.getOptionalBoolean('ensureExists') ?? true;\n    return (\n      this.config.getOptionalBoolean(`${pluginPath(pluginId)}.ensureExists`) ??\n      baseConfig\n    );\n  }\n\n  private getEnsureSchemaExistsConfig(pluginId: string): boolean {\n    const baseConfig =\n      this.config.getOptionalBoolean('ensureSchemaExists') ?? false;\n    return (\n      this.config.getOptionalBoolean(\n        `${pluginPath(pluginId)}.getEnsureSchemaExistsConfig`,\n      ) ?? baseConfig\n    );\n  }\n\n  private getPluginDivisionModeConfig(): string {\n    return this.config.getOptionalString('pluginDivisionMode') ?? 'database';\n  }\n\n  /**\n   * Provides a Knex connection plugin config by combining base and plugin\n   * config.\n   *\n   * This method provides a baseConfig for a plugin database connector. If the\n   * client type has not been overridden, the global connection config will be\n   * included with plugin specific config as the base. Values from the plugin\n   * connection take precedence over the base. Base database name is omitted\n   * unless `pluginDivisionMode` is set to `schema`.\n   */\n  private getConnectionConfig(pluginId: string): Knex.StaticConnectionConfig {\n    const { overridden } = this.getClientType(pluginId);\n\n    let baseConnection = normalizeConnection(this.config.get('connection'));\n\n    // Databases cannot be shared unless the `pluginDivisionMode` is set to `schema`. The\n    // `database` property from the base connection is omitted unless `pluginDivisionMode`\n    // is set to `schema`.\n    if (this.getPluginDivisionModeConfig() !== 'schema') {\n      baseConnection = omit(baseConnection, 'database');\n    }\n\n    // get and normalize optional plugin specific database connection\n    const connection = normalizeConnection(\n      this.config.getOptional(`${pluginPath(pluginId)}.connection`),\n    );\n\n    (\n      baseConnection as Knex.PgConnectionConfig\n    ).application_name ||= `backstage_plugin_${pluginId}`;\n\n    return {\n      // include base connection if client type has not been overridden\n      ...(overridden ? {} : baseConnection),\n      ...connection,\n    } as Knex.StaticConnectionConfig;\n  }\n\n  /**\n   * Provides a Knex database config for a given plugin.\n   *\n   * This method provides a Knex configuration object along with the plugin's\n   * client type.\n   *\n   * @param pluginId - The plugin that the database config should correspond with\n   */\n  private getConfigForPlugin(pluginId: string): Knex.Config {\n    const { client } = this.getClientType(pluginId);\n    const role = this.getRoleConfig(pluginId);\n\n    return {\n      ...this.getAdditionalKnexConfig(pluginId),\n      client,\n      connection: this.getConnectionConfig(pluginId),\n      ...(role && { role }),\n    };\n  }\n\n  /**\n   * Provides a partial `Knex.Config`• database name override for a given plugin.\n   *\n   * @param pluginId - Target plugin to get database name override\n   * @returns Partial `Knex.Config` with database name override\n   */\n  private getDatabaseOverrides(pluginId: string): Knex.Config {\n    const databaseName = this.getDatabaseName(pluginId);\n    return databaseName ? defaultNameOverride(databaseName) : {};\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DevDataStore } from '@backstage/backend-dev-utils';\nimport {\n  LifecycleService,\n  PluginMetadataService,\n} from '@backstage/backend-plugin-api';\nimport { Config, ConfigReader } from '@backstage/config';\nimport { JsonObject } from '@backstage/types';\nimport { ensureDirSync } from 'fs-extra';\nimport knexFactory, { Knex } from 'knex';\nimport { merge, omit } from 'lodash';\nimport path from 'path';\nimport { Connector } from '../types';\nimport { mergeDatabaseConfig } from './mergeDatabaseConfig';\n\n/**\n * Creates a knex SQLite3 database connection\n *\n * @param dbConfig - The database config\n * @param overrides - Additional options to merge with the config\n */\nexport function createSqliteDatabaseClient(\n  dbConfig: Config,\n  overrides?: Knex.Config,\n  deps?: {\n    lifecycle: LifecycleService;\n    pluginMetadata: PluginMetadataService;\n  },\n) {\n  const knexConfig = buildSqliteDatabaseConfig(dbConfig, overrides);\n  const connConfig = knexConfig.connection as Knex.Sqlite3ConnectionConfig;\n\n  const filename = connConfig.filename ?? ':memory:';\n\n  // If storage on disk is used, ensure that the directory exists\n  if (filename !== ':memory:') {\n    const directory = path.dirname(filename);\n    ensureDirSync(directory);\n  }\n\n  let database: Knex;\n\n  if (deps && filename === ':memory:') {\n    // The dev store is used during watch mode to store and restore the database\n    // across reloads. It is only available when running the backend through\n    // `backstage-cli package start`.\n    const devStore = DevDataStore.get();\n\n    if (devStore) {\n      const dataKey = `sqlite3-db-${deps.pluginMetadata.getId()}`;\n\n      const connectionLoader = async () => {\n        // If seed data is available, use it tconnectionLoader restore the database\n        const { data: seedData } = await devStore.load(dataKey);\n\n        return {\n          ...(knexConfig.connection as Knex.Sqlite3ConnectionConfig),\n          filename: seedData ?? ':memory:',\n        };\n      };\n\n      database = knexFactory({\n        ...knexConfig,\n        connection: Object.assign(connectionLoader, {\n          // This is a workaround for the knex SQLite driver always warning when using a config loader\n          filename: ':memory:',\n        }),\n      });\n\n      // If the dev store is available we save the database state on shutdown\n      deps.lifecycle.addShutdownHook(async () => {\n        const connection = await database.client.acquireConnection();\n        const data = connection.serialize();\n        await devStore.save(dataKey, data);\n      });\n    } else {\n      database = knexFactory(knexConfig);\n    }\n  } else {\n    database = knexFactory(knexConfig);\n  }\n\n  database.client.pool.on('createSuccess', (_eventId: any, resource: any) => {\n    resource.run('PRAGMA foreign_keys = ON', () => {});\n  });\n\n  return database;\n}\n\n/**\n * Builds a knex SQLite3 connection config\n *\n * @param dbConfig - The database config\n * @param overrides - Additional options to merge with the config\n */\nexport function buildSqliteDatabaseConfig(\n  dbConfig: Config,\n  overrides?: Knex.Config,\n): Knex.Config {\n  const baseConfig = dbConfig.get<Knex.Config>();\n\n  // Normalize config to always contain a connection object\n  if (typeof baseConfig.connection === 'string') {\n    baseConfig.connection = { filename: baseConfig.connection };\n  }\n  if (overrides && typeof overrides.connection === 'string') {\n    overrides.connection = { filename: overrides.connection };\n  }\n\n  const config: Knex.Config = mergeDatabaseConfig(\n    {\n      connection: {},\n    },\n    baseConfig,\n    {\n      useNullAsDefault: true,\n    },\n    overrides,\n  );\n\n  return config;\n}\n\n/**\n * Provides a partial knex SQLite3 config to override database name.\n */\nexport function createSqliteNameOverride(name: string): Partial<Knex.Config> {\n  return {\n    connection: parseSqliteConnectionString(name),\n  };\n}\n\n/**\n * Produces a partial knex SQLite3 connection config with database name.\n */\nexport function parseSqliteConnectionString(\n  name: string,\n): Knex.Sqlite3ConnectionConfig {\n  return {\n    filename: name,\n  };\n}\n\n/**\n * Provides a config lookup path for a plugin's config block.\n */\nfunction pluginPath(pluginId: string): string {\n  return `plugin.${pluginId}`;\n}\n\nfunction normalizeConnection(\n  connection: Knex.StaticConnectionConfig | JsonObject | string | undefined,\n): Partial<Knex.StaticConnectionConfig> {\n  if (typeof connection === 'undefined' || connection === null) {\n    return {};\n  }\n\n  return typeof connection === 'string' || connection instanceof String\n    ? parseSqliteConnectionString(connection as string)\n    : connection;\n}\n\nexport class Sqlite3Connector implements Connector {\n  constructor(private readonly config: Config) {}\n\n  async getClient(\n    pluginId: string,\n    deps?: {\n      lifecycle: LifecycleService;\n      pluginMetadata: PluginMetadataService;\n    },\n  ): Promise<Knex> {\n    const pluginConfig = new ConfigReader(\n      this.getConfigForPlugin(pluginId) as JsonObject,\n    );\n\n    const pluginDivisionMode = this.getPluginDivisionModeConfig();\n    if (pluginDivisionMode !== 'database') {\n      throw new Error(\n        `The SQLite driver does not support plugin division mode '${pluginDivisionMode}'`,\n      );\n    }\n\n    const databaseClientOverrides = mergeDatabaseConfig(\n      {},\n      this.getDatabaseOverrides(pluginId),\n    );\n\n    const client = createSqliteDatabaseClient(\n      pluginConfig,\n      databaseClientOverrides,\n      deps,\n    );\n\n    return client;\n  }\n\n  async dropDatabase(..._databaseNames: string[]): Promise<void> {\n    // do nothing\n  }\n\n  /**\n   * Provides the canonical database name for a given plugin.\n   *\n   * This method provides the effective database name which is determined using global\n   * and plugin specific database config. If no explicit database name is configured\n   * and `pluginDivisionMode` is not `schema`, this method will provide a generated name\n   * which is the pluginId prefixed with 'backstage_plugin_'. If `pluginDivisionMode` is\n   * `schema`, it will fallback to using the default database for the knex instance.\n   *\n   * @param pluginId - Lookup the database name for given plugin\n   * @returns String representing the plugin's database name\n   */\n  private getDatabaseName(pluginId: string): string | undefined {\n    const connection = this.getConnectionConfig(pluginId);\n\n    const sqliteFilename: string | undefined = (\n      connection as Knex.Sqlite3ConnectionConfig\n    ).filename;\n\n    if (sqliteFilename === ':memory:') {\n      return sqliteFilename;\n    }\n\n    const sqliteDirectory =\n      (connection as { directory?: string }).directory ?? '.';\n\n    return path.join(sqliteDirectory, sqliteFilename ?? `${pluginId}.sqlite`);\n  }\n\n  /**\n   * Provides the client type which should be used for a given plugin.\n   *\n   * The client type is determined by plugin specific config if present.\n   * Otherwise the base client is used as the fallback.\n   *\n   * @param pluginId - Plugin to get the client type for\n   * @returns Object with client type returned as `client` and boolean\n   *          representing whether or not the client was overridden as\n   *          `overridden`\n   */\n  private getClientType(pluginId: string): {\n    client: string;\n    overridden: boolean;\n  } {\n    const pluginClient = this.config.getOptionalString(\n      `${pluginPath(pluginId)}.client`,\n    );\n\n    const baseClient = this.config.getString('client');\n    const client = pluginClient ?? baseClient;\n    return {\n      client,\n      overridden: client !== baseClient,\n    };\n  }\n\n  private getRoleConfig(pluginId: string): string | undefined {\n    return (\n      this.config.getOptionalString(`${pluginPath(pluginId)}.role`) ??\n      this.config.getOptionalString('role')\n    );\n  }\n\n  /**\n   * Provides the knexConfig which should be used for a given plugin.\n   *\n   * @param pluginId - Plugin to get the knexConfig for\n   * @returns The merged knexConfig value or undefined if it isn't specified\n   */\n  private getAdditionalKnexConfig(pluginId: string): JsonObject | undefined {\n    const pluginConfig = this.config\n      .getOptionalConfig(`${pluginPath(pluginId)}.knexConfig`)\n      ?.get<JsonObject>();\n\n    const baseConfig = this.config\n      .getOptionalConfig('knexConfig')\n      ?.get<JsonObject>();\n\n    return merge(baseConfig, pluginConfig);\n  }\n\n  private getPluginDivisionModeConfig(): string {\n    return this.config.getOptionalString('pluginDivisionMode') ?? 'database';\n  }\n\n  /**\n   * Provides a Knex connection plugin config by combining base and plugin\n   * config.\n   *\n   * This method provides a baseConfig for a plugin database connector. If the\n   * client type has not been overridden, the global connection config will be\n   * included with plugin specific config as the base. Values from the plugin\n   * connection take precedence over the base. Base database name is omitted for\n   * all supported databases excluding SQLite unless `pluginDivisionMode` is set\n   * to `schema`.\n   */\n  private getConnectionConfig(pluginId: string): Knex.StaticConnectionConfig {\n    const { client, overridden } = this.getClientType(pluginId);\n\n    let baseConnection = normalizeConnection(this.config.get('connection'));\n\n    if (\n      client.includes('sqlite3') &&\n      'filename' in baseConnection &&\n      baseConnection.filename !== ':memory:'\n    ) {\n      throw new Error(\n        '`connection.filename` is not supported for the base sqlite connection. Prefer `connection.directory` or provide a filename for the plugin connection instead.',\n      );\n    }\n\n    // Databases cannot be shared unless the `pluginDivisionMode` is set to `schema`. The\n    // `database` property from the base connection is omitted unless `pluginDivisionMode`\n    // is set to `schema`. SQLite3's `filename` property is an exception as this is used as a\n    // directory elsewhere so we preserve `filename`.\n    if (this.getPluginDivisionModeConfig() !== 'schema') {\n      baseConnection = omit(baseConnection, 'database');\n    }\n\n    // get and normalize optional plugin specific database connection\n    const connection = normalizeConnection(\n      this.config.getOptional(`${pluginPath(pluginId)}.connection`),\n    );\n\n    return {\n      // include base connection if client type has not been overridden\n      ...(overridden ? {} : baseConnection),\n      ...connection,\n    } as Knex.StaticConnectionConfig;\n  }\n\n  /**\n   * Provides a Knex database config for a given plugin.\n   *\n   * This method provides a Knex configuration object along with the plugin's\n   * client type.\n   *\n   * @param pluginId - The plugin that the database config should correspond with\n   */\n  private getConfigForPlugin(pluginId: string): Knex.Config {\n    const { client } = this.getClientType(pluginId);\n    const role = this.getRoleConfig(pluginId);\n\n    return {\n      ...this.getAdditionalKnexConfig(pluginId),\n      client,\n      connection: this.getConnectionConfig(pluginId),\n      ...(role && { role }),\n    };\n  }\n\n  /**\n   * Provides a partial `Knex.Config`• database name override for a given plugin.\n   *\n   * @param pluginId - Target plugin to get database name override\n   * @returns Partial `Knex.Config` with database name override\n   */\n  private getDatabaseOverrides(pluginId: string): Knex.Config {\n    const databaseName = this.getDatabaseName(pluginId);\n    return databaseName ? createSqliteNameOverride(databaseName) : {};\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  DatabaseService,\n  LifecycleService,\n  LoggerService,\n  PluginMetadataService,\n} from '@backstage/backend-plugin-api';\nimport { Config } from '@backstage/config';\nimport { stringifyError } from '@backstage/errors';\nimport { Knex } from 'knex';\nimport { MysqlConnector } from './connectors/mysql';\nimport { PgConnector } from './connectors/postgres';\nimport { Sqlite3Connector } from './connectors/sqlite3';\nimport { Connector, PluginDatabaseManager } from './types';\n\n/**\n * Provides a config lookup path for a plugin's config block.\n */\nfunction pluginPath(pluginId: string): string {\n  return `plugin.${pluginId}`;\n}\n\n/**\n * Creation options for {@link DatabaseManager}.\n *\n * @public\n */\nexport type DatabaseManagerOptions = {\n  migrations?: DatabaseService['migrations'];\n  logger?: LoggerService;\n};\n\n/**\n * An interface that represents the legacy global DatabaseManager implementation.\n * @public\n */\nexport type LegacyRootDatabaseService = {\n  forPlugin(pluginId: string): DatabaseService;\n};\n\n/**\n * Testable implementation class for {@link DatabaseManager} below.\n */\nexport class DatabaseManagerImpl implements LegacyRootDatabaseService {\n  constructor(\n    private readonly config: Config,\n    private readonly connectors: Record<string, Connector>,\n    private readonly options?: DatabaseManagerOptions,\n    private readonly databaseCache: Map<string, Promise<Knex>> = new Map(),\n  ) {}\n\n  /**\n   * Generates a PluginDatabaseManager for consumption by plugins.\n   *\n   * @param pluginId - The plugin that the database manager should be created for. Plugin names\n   * should be unique as they are used to look up database config overrides under\n   * `backend.database.plugin`.\n   */\n  forPlugin(\n    pluginId: string,\n    deps?: {\n      lifecycle: LifecycleService;\n      pluginMetadata: PluginMetadataService;\n    },\n  ): PluginDatabaseManager {\n    const client = this.getClientType(pluginId).client;\n    const connector = this.connectors[client];\n    if (!connector) {\n      throw new Error(\n        `Unsupported database client type '${client}' specified for plugin '${pluginId}'`,\n      );\n    }\n    const getClient = () => this.getDatabase(pluginId, connector, deps);\n    const migrations = { skip: false, ...this.options?.migrations };\n    return { getClient, migrations };\n  }\n\n  /**\n   * Provides the client type which should be used for a given plugin.\n   *\n   * The client type is determined by plugin specific config if present.\n   * Otherwise the base client is used as the fallback.\n   *\n   * @param pluginId - Plugin to get the client type for\n   * @returns Object with client type returned as `client` and boolean\n   *          representing whether or not the client was overridden as\n   *          `overridden`\n   */\n  private getClientType(pluginId: string): {\n    client: string;\n    overridden: boolean;\n  } {\n    const pluginClient = this.config.getOptionalString(\n      `${pluginPath(pluginId)}.client`,\n    );\n\n    const baseClient = this.config.getString('client');\n    const client = pluginClient ?? baseClient;\n    return {\n      client,\n      overridden: client !== baseClient,\n    };\n  }\n\n  /**\n   * Provides a scoped Knex client for a plugin as per application config.\n   *\n   * @param pluginId - Plugin to get a Knex client for\n   * @returns Promise which resolves to a scoped Knex database client for a\n   *          plugin\n   */\n  private async getDatabase(\n    pluginId: string,\n    connector: Connector,\n    deps?: {\n      lifecycle: LifecycleService;\n      pluginMetadata: PluginMetadataService;\n    },\n  ): Promise<Knex> {\n    if (this.databaseCache.has(pluginId)) {\n      return this.databaseCache.get(pluginId)!;\n    }\n\n    const clientPromise = connector.getClient(pluginId, deps);\n    this.databaseCache.set(pluginId, clientPromise);\n\n    if (process.env.NODE_ENV !== 'test') {\n      clientPromise.then(client => this.startKeepaliveLoop(pluginId, client));\n    }\n\n    return clientPromise;\n  }\n\n  private startKeepaliveLoop(pluginId: string, client: Knex): void {\n    let lastKeepaliveFailed = false;\n\n    setInterval(() => {\n      // During testing it can happen that the environment is torn down and\n      // this client is `undefined`, but this interval is still run.\n      client?.raw('select 1').then(\n        () => {\n          lastKeepaliveFailed = false;\n        },\n        (error: unknown) => {\n          if (!lastKeepaliveFailed) {\n            lastKeepaliveFailed = true;\n            this.options?.logger?.warn(\n              `Database keepalive failed for plugin ${pluginId}, ${stringifyError(\n                error,\n              )}`,\n            );\n          }\n        },\n      );\n    }, 60 * 1000);\n  }\n}\n\n// NOTE: This class looks odd but is kept around for API compatibility reasons\n/**\n * Manages database connections for Backstage backend plugins.\n *\n * @public\n * @remarks\n *\n * The database manager allows the user to set connection and client settings on\n * a per pluginId basis by defining a database config block under\n * `plugin.<pluginId>` in addition to top level defaults. Optionally, a user may\n * set `prefix` which is used to prefix generated database names if config is\n * not provided.\n */\nexport class DatabaseManager implements LegacyRootDatabaseService {\n  /**\n   * Creates a {@link DatabaseManager} from `backend.database` config.\n   *\n   * @param config - The loaded application configuration.\n   * @param options - An optional configuration object.\n   */\n  static fromConfig(\n    config: Config,\n    options?: DatabaseManagerOptions,\n  ): DatabaseManager {\n    const databaseConfig = config.getConfig('backend.database');\n    const prefix =\n      databaseConfig.getOptionalString('prefix') || 'backstage_plugin_';\n    return new DatabaseManager(\n      new DatabaseManagerImpl(\n        databaseConfig,\n        {\n          pg: new PgConnector(databaseConfig, prefix),\n          sqlite3: new Sqlite3Connector(databaseConfig),\n          'better-sqlite3': new Sqlite3Connector(databaseConfig),\n          mysql: new MysqlConnector(databaseConfig, prefix),\n          mysql2: new MysqlConnector(databaseConfig, prefix),\n        },\n        options,\n      ),\n    );\n  }\n\n  private constructor(private readonly impl: DatabaseManagerImpl) {}\n\n  /**\n   * Generates a PluginDatabaseManager for consumption by plugins.\n   *\n   * @param pluginId - The plugin that the database manager should be created for. Plugin names\n   * should be unique as they are used to look up database config overrides under\n   * `backend.database.plugin`.\n   */\n  forPlugin(\n    pluginId: string,\n    deps?: {\n      lifecycle: LifecycleService;\n      pluginMetadata: PluginMetadataService;\n    },\n  ): PluginDatabaseManager {\n    return this.impl.forPlugin(pluginId, deps);\n  }\n}\n\n/**\n * Helper for deleting databases.\n *\n * @public\n * @deprecated Will be removed in a future release.\n */\nexport async function dropDatabase(\n  dbConfig: Config,\n  ...databaseNames: string[]\n): Promise<void> {\n  const client = dbConfig.getString('client');\n  const prefix = dbConfig.getOptionalString('prefix') || 'backstage_plugin_';\n\n  if (client === 'pg') {\n    await new PgConnector(dbConfig, prefix).dropDatabase(...databaseNames);\n  } else if (client === 'mysql' || client === 'mysql2') {\n    await new MysqlConnector(dbConfig, prefix).dropDatabase(...databaseNames);\n  }\n}\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ConflictError } from '@backstage/errors';\nimport { UrlReaderServiceReadUrlResponse } from '@backstage/backend-plugin-api';\nimport getRawBody from 'raw-body';\nimport { Readable } from 'stream';\nimport { ReadUrlResponseFactoryFromStreamOptions } from './types';\n\n/**\n * Utility class for UrlReader implementations to create valid ReadUrlResponse\n * instances from common response primitives.\n *\n * @public\n */\nexport class ReadUrlResponseFactory {\n  /**\n   * Resolves a ReadUrlResponse from a Readable stream.\n   */\n  static async fromReadable(\n    stream: Readable,\n    options?: ReadUrlResponseFactoryFromStreamOptions,\n  ): Promise<UrlReaderServiceReadUrlResponse> {\n    // Reference to eventual buffer enables callers to call buffer() multiple\n    // times without consequence.\n    let buffer: Promise<Buffer>;\n\n    // Prevent \"stream is not readable\" errors from bubbling up.\n    const conflictError = new ConflictError(\n      'Cannot use buffer() and stream() from the same ReadUrlResponse',\n    );\n    let hasCalledStream = false;\n    let hasCalledBuffer = false;\n\n    return {\n      buffer: () => {\n        hasCalledBuffer = true;\n        if (hasCalledStream) throw conflictError;\n        if (buffer) return buffer;\n        buffer = getRawBody(stream);\n        return buffer;\n      },\n      stream: () => {\n        hasCalledStream = true;\n        if (hasCalledBuffer) throw conflictError;\n        return stream;\n      },\n      etag: options?.etag,\n      lastModifiedAt: options?.lastModifiedAt,\n    };\n  }\n\n  /**\n   * Resolves a ReadUrlResponse from an old-style NodeJS.ReadableStream.\n   */\n  static async fromNodeJSReadable(\n    oldStyleStream: NodeJS.ReadableStream,\n    options?: ReadUrlResponseFactoryFromStreamOptions,\n  ): Promise<UrlReaderServiceReadUrlResponse> {\n    const readable = Readable.from(oldStyleStream);\n    return ReadUrlResponseFactory.fromReadable(readable, options);\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  UrlReaderService,\n  UrlReaderServiceReadTreeOptions,\n  UrlReaderServiceReadTreeResponse,\n  UrlReaderServiceReadUrlOptions,\n  UrlReaderServiceReadUrlResponse,\n  UrlReaderServiceSearchOptions,\n  UrlReaderServiceSearchResponse,\n} from '@backstage/backend-plugin-api';\nimport {\n  getAzureCommitsUrl,\n  getAzureDownloadUrl,\n  getAzureFileFetchUrl,\n  AzureDevOpsCredentialsProvider,\n  DefaultAzureDevOpsCredentialsProvider,\n  ScmIntegrations,\n  AzureIntegration,\n} from '@backstage/integration';\nimport fetch, { Response } from 'node-fetch';\nimport { Minimatch } from 'minimatch';\nimport { Readable } from 'stream';\nimport { NotFoundError, NotModifiedError } from '@backstage/errors';\nimport { ReadTreeResponseFactory, ReaderFactory } from './types';\nimport { ReadUrlResponseFactory } from './ReadUrlResponseFactory';\n\n/**\n * Implements a {@link @backstage/backend-plugin-api#UrlReaderService} for Azure repos.\n *\n * @public\n */\nexport class AzureUrlReader implements UrlReaderService {\n  static factory: ReaderFactory = ({ config, treeResponseFactory }) => {\n    const integrations = ScmIntegrations.fromConfig(config);\n    const credentialProvider =\n      DefaultAzureDevOpsCredentialsProvider.fromIntegrations(integrations);\n    return integrations.azure.list().map(integration => {\n      const reader = new AzureUrlReader(integration, {\n        treeResponseFactory,\n        credentialsProvider: credentialProvider,\n      });\n      const predicate = (url: URL) => url.host === integration.config.host;\n      return { reader, predicate };\n    });\n  };\n\n  constructor(\n    private readonly integration: AzureIntegration,\n    private readonly deps: {\n      treeResponseFactory: ReadTreeResponseFactory;\n      credentialsProvider: AzureDevOpsCredentialsProvider;\n    },\n  ) {}\n\n  async read(url: string): Promise<Buffer> {\n    const response = await this.readUrl(url);\n    return response.buffer();\n  }\n\n  async readUrl(\n    url: string,\n    options?: UrlReaderServiceReadUrlOptions,\n  ): Promise<UrlReaderServiceReadUrlResponse> {\n    // TODO: etag is not implemented yet.\n    const { signal } = options ?? {};\n\n    const builtUrl = getAzureFileFetchUrl(url);\n    let response: Response;\n    try {\n      const credentials = await this.deps.credentialsProvider.getCredentials({\n        url: builtUrl,\n      });\n      response = await fetch(builtUrl, {\n        headers: credentials?.headers,\n        // TODO(freben): The signal cast is there because pre-3.x versions of\n        // node-fetch have a very slightly deviating AbortSignal type signature.\n        // The difference does not affect us in practice however. The cast can\n        // be removed after we support ESM for CLI dependencies and migrate to\n        // version 3 of node-fetch.\n        // https://github.com/backstage/backstage/issues/8242\n        ...(signal && { signal: signal as any }),\n      });\n    } catch (e) {\n      throw new Error(`Unable to read ${url}, ${e}`);\n    }\n\n    // for private repos when PAT is not valid, Azure API returns a http status code 203 with sign in page html\n    if (response.ok && response.status !== 203) {\n      return ReadUrlResponseFactory.fromNodeJSReadable(response.body);\n    }\n\n    const message = `${url} could not be read as ${builtUrl}, ${response.status} ${response.statusText}`;\n    if (response.status === 404) {\n      throw new NotFoundError(message);\n    }\n    throw new Error(message);\n  }\n\n  async readTree(\n    url: string,\n    options?: UrlReaderServiceReadTreeOptions,\n  ): Promise<UrlReaderServiceReadTreeResponse> {\n    const { etag, filter, signal } = options ?? {};\n\n    // TODO: Support filepath based reading tree feature like other providers\n\n    // Get latest commit SHA\n\n    const credentials = await this.deps.credentialsProvider.getCredentials({\n      url: url,\n    });\n\n    const commitsAzureResponse = await fetch(getAzureCommitsUrl(url), {\n      headers: credentials?.headers,\n    });\n    if (!commitsAzureResponse.ok) {\n      const message = `Failed to read tree from ${url}, ${commitsAzureResponse.status} ${commitsAzureResponse.statusText}`;\n      if (commitsAzureResponse.status === 404) {\n        throw new NotFoundError(message);\n      }\n      throw new Error(message);\n    }\n\n    const commitSha = (await commitsAzureResponse.json()).value[0].commitId;\n    if (etag && etag === commitSha) {\n      throw new NotModifiedError();\n    }\n\n    const archiveAzureResponse = await fetch(getAzureDownloadUrl(url), {\n      headers: {\n        ...credentials?.headers,\n        Accept: 'application/zip',\n      },\n      // TODO(freben): The signal cast is there because pre-3.x versions of\n      // node-fetch have a very slightly deviating AbortSignal type signature.\n      // The difference does not affect us in practice however. The cast can be\n      // removed after we support ESM for CLI dependencies and migrate to\n      // version 3 of node-fetch.\n      // https://github.com/backstage/backstage/issues/8242\n      ...(signal && { signal: signal as any }),\n    });\n    if (!archiveAzureResponse.ok) {\n      const message = `Failed to read tree from ${url}, ${archiveAzureResponse.status} ${archiveAzureResponse.statusText}`;\n      if (archiveAzureResponse.status === 404) {\n        throw new NotFoundError(message);\n      }\n      throw new Error(message);\n    }\n\n    // When downloading a zip archive from azure on a subpath we get an extra directory\n    // layer added at the top. With for example the file /a/b/c.txt and a download of\n    // /a/b, we'll see /b/c.txt in the zip archive. This picks out /b so that we can remove it.\n    let subpath;\n    const path = new URL(url).searchParams.get('path');\n    if (path) {\n      subpath = path.split('/').filter(Boolean).slice(-1)[0];\n    }\n\n    return await this.deps.treeResponseFactory.fromZipArchive({\n      stream: Readable.from(archiveAzureResponse.body),\n      etag: commitSha,\n      filter,\n      subpath,\n    });\n  }\n\n  async search(\n    url: string,\n    options?: UrlReaderServiceSearchOptions,\n  ): Promise<UrlReaderServiceSearchResponse> {\n    const treeUrl = new URL(url);\n\n    const path = treeUrl.searchParams.get('path');\n    const matcher = path && new Minimatch(path.replace(/^\\/+/, ''));\n\n    // TODO(freben): For now, read the entire repo and filter through that. In\n    // a future improvement, we could be smart and try to deduce that non-glob\n    // prefixes (like for filepaths such as some-prefix/**/a.yaml) can be used\n    // to get just that part of the repo.\n    treeUrl.searchParams.delete('path');\n\n    const tree = await this.readTree(treeUrl.toString(), {\n      etag: options?.etag,\n      signal: options?.signal,\n      filter: p => (matcher ? matcher.match(p) : true),\n    });\n    const files = await tree.files();\n\n    return {\n      etag: tree.etag,\n      files: files.map(file => ({\n        url: this.integration.resolveUrl({\n          url: `/${file.path}`,\n          base: url,\n        }),\n        content: file.content,\n        lastModifiedAt: file.lastModifiedAt,\n      })),\n    };\n  }\n\n  toString() {\n    const { host, credentials } = this.integration.config;\n    return `azure{host=${host},authed=${Boolean(\n      credentials !== undefined && credentials.length > 0,\n    )}}`;\n  }\n}\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function parseLastModified(value: string | null | undefined) {\n  if (!value) {\n    return undefined;\n  }\n\n  return new Date(value);\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  UrlReaderService,\n  UrlReaderServiceReadTreeOptions,\n  UrlReaderServiceReadTreeResponse,\n  UrlReaderServiceReadUrlOptions,\n  UrlReaderServiceReadUrlResponse,\n  UrlReaderServiceSearchOptions,\n  UrlReaderServiceSearchResponse,\n} from '@backstage/backend-plugin-api';\nimport { NotFoundError, NotModifiedError } from '@backstage/errors';\nimport {\n  BitbucketCloudIntegration,\n  getBitbucketCloudDefaultBranch,\n  getBitbucketCloudDownloadUrl,\n  getBitbucketCloudFileFetchUrl,\n  getBitbucketCloudRequestOptions,\n  ScmIntegrations,\n} from '@backstage/integration';\nimport fetch, { Response } from 'node-fetch';\nimport parseGitUrl from 'git-url-parse';\nimport { trimEnd } from 'lodash';\nimport { Minimatch } from 'minimatch';\nimport { Readable } from 'stream';\nimport { ReaderFactory, ReadTreeResponseFactory } from './types';\nimport { ReadUrlResponseFactory } from './ReadUrlResponseFactory';\nimport { parseLastModified } from './util';\n\n/**\n * Implements a {@link @backstage/backend-plugin-api#UrlReaderService} for files from Bitbucket Cloud.\n *\n * @public\n */\nexport class BitbucketCloudUrlReader implements UrlReaderService {\n  static factory: ReaderFactory = ({ config, treeResponseFactory }) => {\n    const integrations = ScmIntegrations.fromConfig(config);\n    return integrations.bitbucketCloud.list().map(integration => {\n      const reader = new BitbucketCloudUrlReader(integration, {\n        treeResponseFactory,\n      });\n      const predicate = (url: URL) => url.host === integration.config.host;\n      return { reader, predicate };\n    });\n  };\n\n  constructor(\n    private readonly integration: BitbucketCloudIntegration,\n    private readonly deps: { treeResponseFactory: ReadTreeResponseFactory },\n  ) {\n    const { host, username, appPassword } = integration.config;\n\n    if (username && !appPassword) {\n      throw new Error(\n        `Bitbucket Cloud integration for '${host}' has configured a username but is missing a required appPassword.`,\n      );\n    }\n  }\n\n  async read(url: string): Promise<Buffer> {\n    const response = await this.readUrl(url);\n    return response.buffer();\n  }\n\n  async readUrl(\n    url: string,\n    options?: UrlReaderServiceReadUrlOptions,\n  ): Promise<UrlReaderServiceReadUrlResponse> {\n    const { etag, lastModifiedAfter, signal } = options ?? {};\n    const bitbucketUrl = getBitbucketCloudFileFetchUrl(\n      url,\n      this.integration.config,\n    );\n    const requestOptions = getBitbucketCloudRequestOptions(\n      this.integration.config,\n    );\n\n    let response: Response;\n    try {\n      response = await fetch(bitbucketUrl.toString(), {\n        headers: {\n          ...requestOptions.headers,\n          ...(etag && { 'If-None-Match': etag }),\n          ...(lastModifiedAfter && {\n            'If-Modified-Since': lastModifiedAfter.toUTCString(),\n          }),\n        },\n        // TODO(freben): The signal cast is there because pre-3.x versions of\n        // node-fetch have a very slightly deviating AbortSignal type signature.\n        // The difference does not affect us in practice however. The cast can be\n        // removed after we support ESM for CLI dependencies and migrate to\n        // version 3 of node-fetch.\n        // https://github.com/backstage/backstage/issues/8242\n        ...(signal && { signal: signal as any }),\n      });\n    } catch (e) {\n      throw new Error(`Unable to read ${url}, ${e}`);\n    }\n\n    if (response.status === 304) {\n      throw new NotModifiedError();\n    }\n\n    if (response.ok) {\n      return ReadUrlResponseFactory.fromNodeJSReadable(response.body, {\n        etag: response.headers.get('ETag') ?? undefined,\n        lastModifiedAt: parseLastModified(\n          response.headers.get('Last-Modified'),\n        ),\n      });\n    }\n\n    const message = `${url} could not be read as ${bitbucketUrl}, ${response.status} ${response.statusText}`;\n    if (response.status === 404) {\n      throw new NotFoundError(message);\n    }\n    throw new Error(message);\n  }\n\n  async readTree(\n    url: string,\n    options?: UrlReaderServiceReadTreeOptions,\n  ): Promise<UrlReaderServiceReadTreeResponse> {\n    const { filepath } = parseGitUrl(url);\n\n    const lastCommitShortHash = await this.getLastCommitShortHash(url);\n    if (options?.etag && options.etag === lastCommitShortHash) {\n      throw new NotModifiedError();\n    }\n\n    const downloadUrl = await getBitbucketCloudDownloadUrl(\n      url,\n      this.integration.config,\n    );\n    const archiveResponse = await fetch(\n      downloadUrl,\n      getBitbucketCloudRequestOptions(this.integration.config),\n    );\n    if (!archiveResponse.ok) {\n      const message = `Failed to read tree from ${url}, ${archiveResponse.status} ${archiveResponse.statusText}`;\n      if (archiveResponse.status === 404) {\n        throw new NotFoundError(message);\n      }\n      throw new Error(message);\n    }\n\n    return await this.deps.treeResponseFactory.fromTarArchive({\n      stream: Readable.from(archiveResponse.body),\n      subpath: filepath,\n      etag: lastCommitShortHash,\n      filter: options?.filter,\n    });\n  }\n\n  async search(\n    url: string,\n    options?: UrlReaderServiceSearchOptions,\n  ): Promise<UrlReaderServiceSearchResponse> {\n    const { filepath } = parseGitUrl(url);\n    const matcher = new Minimatch(filepath);\n\n    // TODO(freben): For now, read the entire repo and filter through that. In\n    // a future improvement, we could be smart and try to deduce that non-glob\n    // prefixes (like for filepaths such as some-prefix/**/a.yaml) can be used\n    // to get just that part of the repo.\n    const treeUrl = trimEnd(url.replace(filepath, ''), '/');\n\n    const tree = await this.readTree(treeUrl, {\n      etag: options?.etag,\n      filter: path => matcher.match(path),\n    });\n    const files = await tree.files();\n\n    return {\n      etag: tree.etag,\n      files: files.map(file => ({\n        url: this.integration.resolveUrl({\n          url: `/${file.path}`,\n          base: url,\n        }),\n        content: file.content,\n        lastModifiedAt: file.lastModifiedAt,\n      })),\n    };\n  }\n\n  toString() {\n    const { host, username, appPassword } = this.integration.config;\n    const authed = Boolean(username && appPassword);\n    return `bitbucketCloud{host=${host},authed=${authed}}`;\n  }\n\n  private async getLastCommitShortHash(url: string): Promise<string> {\n    const { name: repoName, owner: project, ref } = parseGitUrl(url);\n\n    let branch = ref;\n    if (!branch) {\n      branch = await getBitbucketCloudDefaultBranch(\n        url,\n        this.integration.config,\n      );\n    }\n\n    const commitsApiUrl = `${this.integration.config.apiBaseUrl}/repositories/${project}/${repoName}/commits/${branch}`;\n\n    const commitsResponse = await fetch(\n      commitsApiUrl,\n      getBitbucketCloudRequestOptions(this.integration.config),\n    );\n    if (!commitsResponse.ok) {\n      const message = `Failed to retrieve commits from ${commitsApiUrl}, ${commitsResponse.status} ${commitsResponse.statusText}`;\n      if (commitsResponse.status === 404) {\n        throw new NotFoundError(message);\n      }\n      throw new Error(message);\n    }\n\n    const commits = await commitsResponse.json();\n    if (\n      commits &&\n      commits.values &&\n      commits.values.length > 0 &&\n      commits.values[0].hash\n    ) {\n      return commits.values[0].hash.substring(0, 12);\n    }\n\n    throw new Error(`Failed to read response from ${commitsApiUrl}`);\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  UrlReaderService,\n  UrlReaderServiceReadTreeOptions,\n  UrlReaderServiceReadTreeResponse,\n  UrlReaderServiceReadUrlOptions,\n  UrlReaderServiceReadUrlResponse,\n  UrlReaderServiceSearchOptions,\n  UrlReaderServiceSearchResponse,\n} from '@backstage/backend-plugin-api';\nimport { NotFoundError, NotModifiedError } from '@backstage/errors';\nimport {\n  BitbucketIntegration,\n  getBitbucketDefaultBranch,\n  getBitbucketDownloadUrl,\n  getBitbucketFileFetchUrl,\n  getBitbucketRequestOptions,\n  ScmIntegrations,\n} from '@backstage/integration';\nimport fetch, { Response } from 'node-fetch';\nimport parseGitUrl from 'git-url-parse';\nimport { trimEnd } from 'lodash';\nimport { Minimatch } from 'minimatch';\nimport { Readable } from 'stream';\nimport { LoggerService } from '@backstage/backend-plugin-api';\nimport { ReaderFactory, ReadTreeResponseFactory } from './types';\nimport { ReadUrlResponseFactory } from './ReadUrlResponseFactory';\nimport { parseLastModified } from './util';\n\n/**\n * Implements a {@link @backstage/backend-plugin-api#UrlReaderService} for files from Bitbucket v1 and v2 APIs, such\n * as the one exposed by Bitbucket Cloud itself.\n *\n * @public\n * @deprecated in favor of BitbucketCloudUrlReader and BitbucketServerUrlReader\n */\nexport class BitbucketUrlReader implements UrlReaderService {\n  static factory: ReaderFactory = ({ config, logger, treeResponseFactory }) => {\n    const integrations = ScmIntegrations.fromConfig(config);\n    return integrations.bitbucket\n      .list()\n      .filter(\n        item =>\n          !integrations.bitbucketCloud.byHost(item.config.host) &&\n          !integrations.bitbucketServer.byHost(item.config.host),\n      )\n      .map(integration => {\n        const reader = new BitbucketUrlReader(integration, logger, {\n          treeResponseFactory,\n        });\n        const predicate = (url: URL) => url.host === integration.config.host;\n        return { reader, predicate };\n      });\n  };\n\n  constructor(\n    private readonly integration: BitbucketIntegration,\n    logger: LoggerService,\n    private readonly deps: { treeResponseFactory: ReadTreeResponseFactory },\n  ) {\n    const { host, token, username, appPassword } = integration.config;\n    const replacement =\n      host === 'bitbucket.org' ? 'bitbucketCloud' : 'bitbucketServer';\n    logger.warn(\n      `[Deprecated] Please migrate from \"integrations.bitbucket\" to \"integrations.${replacement}\".`,\n    );\n\n    if (!token && username && !appPassword) {\n      throw new Error(\n        `Bitbucket integration for '${host}' has configured a username but is missing a required appPassword.`,\n      );\n    }\n  }\n\n  async read(url: string): Promise<Buffer> {\n    const response = await this.readUrl(url);\n    return response.buffer();\n  }\n\n  async readUrl(\n    url: string,\n    options?: UrlReaderServiceReadUrlOptions,\n  ): Promise<UrlReaderServiceReadUrlResponse> {\n    const { etag, lastModifiedAfter, signal } = options ?? {};\n    const bitbucketUrl = getBitbucketFileFetchUrl(url, this.integration.config);\n    const requestOptions = getBitbucketRequestOptions(this.integration.config);\n\n    let response: Response;\n    try {\n      response = await fetch(bitbucketUrl.toString(), {\n        headers: {\n          ...requestOptions.headers,\n          ...(etag && { 'If-None-Match': etag }),\n          ...(lastModifiedAfter && {\n            'If-Modified-Since': lastModifiedAfter.toUTCString(),\n          }),\n        },\n        // TODO(freben): The signal cast is there because pre-3.x versions of\n        // node-fetch have a very slightly deviating AbortSignal type signature.\n        // The difference does not affect us in practice however. The cast can be\n        // removed after we support ESM for CLI dependencies and migrate to\n        // version 3 of node-fetch.\n        // https://github.com/backstage/backstage/issues/8242\n        ...(signal && { signal: signal as any }),\n      });\n    } catch (e) {\n      throw new Error(`Unable to read ${url}, ${e}`);\n    }\n\n    if (response.status === 304) {\n      throw new NotModifiedError();\n    }\n\n    if (response.ok) {\n      return ReadUrlResponseFactory.fromNodeJSReadable(response.body, {\n        etag: response.headers.get('ETag') ?? undefined,\n        lastModifiedAt: parseLastModified(\n          response.headers.get('Last-Modified'),\n        ),\n      });\n    }\n\n    const message = `${url} could not be read as ${bitbucketUrl}, ${response.status} ${response.statusText}`;\n    if (response.status === 404) {\n      throw new NotFoundError(message);\n    }\n    throw new Error(message);\n  }\n\n  async readTree(\n    url: string,\n    options?: UrlReaderServiceReadTreeOptions,\n  ): Promise<UrlReaderServiceReadTreeResponse> {\n    const { filepath } = parseGitUrl(url);\n\n    const lastCommitShortHash = await this.getLastCommitShortHash(url);\n    if (options?.etag && options.etag === lastCommitShortHash) {\n      throw new NotModifiedError();\n    }\n\n    const downloadUrl = await getBitbucketDownloadUrl(\n      url,\n      this.integration.config,\n    );\n    const archiveBitbucketResponse = await fetch(\n      downloadUrl,\n      getBitbucketRequestOptions(this.integration.config),\n    );\n    if (!archiveBitbucketResponse.ok) {\n      const message = `Failed to read tree from ${url}, ${archiveBitbucketResponse.status} ${archiveBitbucketResponse.statusText}`;\n      if (archiveBitbucketResponse.status === 404) {\n        throw new NotFoundError(message);\n      }\n      throw new Error(message);\n    }\n\n    return await this.deps.treeResponseFactory.fromTarArchive({\n      stream: Readable.from(archiveBitbucketResponse.body),\n      subpath: filepath,\n      etag: lastCommitShortHash,\n      filter: options?.filter,\n    });\n  }\n\n  async search(\n    url: string,\n    options?: UrlReaderServiceSearchOptions,\n  ): Promise<UrlReaderServiceSearchResponse> {\n    const { filepath } = parseGitUrl(url);\n    const matcher = new Minimatch(filepath);\n\n    // TODO(freben): For now, read the entire repo and filter through that. In\n    // a future improvement, we could be smart and try to deduce that non-glob\n    // prefixes (like for filepaths such as some-prefix/**/a.yaml) can be used\n    // to get just that part of the repo.\n    const treeUrl = trimEnd(url.replace(filepath, ''), '/');\n\n    const tree = await this.readTree(treeUrl, {\n      etag: options?.etag,\n      filter: path => matcher.match(path),\n    });\n    const files = await tree.files();\n\n    return {\n      etag: tree.etag,\n      files: files.map(file => ({\n        url: this.integration.resolveUrl({\n          url: `/${file.path}`,\n          base: url,\n        }),\n        content: file.content,\n        lastModifiedAt: file.lastModifiedAt,\n      })),\n    };\n  }\n\n  toString() {\n    const { host, token, username, appPassword } = this.integration.config;\n    let authed = Boolean(token);\n    if (!authed) {\n      authed = Boolean(username && appPassword);\n    }\n    return `bitbucket{host=${host},authed=${authed}}`;\n  }\n\n  private async getLastCommitShortHash(url: string): Promise<string> {\n    const { resource, name: repoName, owner: project, ref } = parseGitUrl(url);\n\n    let branch = ref;\n    if (!branch) {\n      branch = await getBitbucketDefaultBranch(url, this.integration.config);\n    }\n\n    const isHosted = resource === 'bitbucket.org';\n    // Bitbucket Server https://docs.atlassian.com/bitbucket-server/rest/7.9.0/bitbucket-rest.html#idp222\n    const commitsApiUrl = isHosted\n      ? `${this.integration.config.apiBaseUrl}/repositories/${project}/${repoName}/commits/${branch}`\n      : `${this.integration.config.apiBaseUrl}/projects/${project}/repos/${repoName}/commits`;\n\n    const commitsResponse = await fetch(\n      commitsApiUrl,\n      getBitbucketRequestOptions(this.integration.config),\n    );\n    if (!commitsResponse.ok) {\n      const message = `Failed to retrieve commits from ${commitsApiUrl}, ${commitsResponse.status} ${commitsResponse.statusText}`;\n      if (commitsResponse.status === 404) {\n        throw new NotFoundError(message);\n      }\n      throw new Error(message);\n    }\n\n    const commits = await commitsResponse.json();\n    if (isHosted) {\n      if (\n        commits &&\n        commits.values &&\n        commits.values.length > 0 &&\n        commits.values[0].hash\n      ) {\n        return commits.values[0].hash.substring(0, 12);\n      }\n    } else {\n      if (\n        commits &&\n        commits.values &&\n        commits.values.length > 0 &&\n        commits.values[0].id\n      ) {\n        return commits.values[0].id.substring(0, 12);\n      }\n    }\n\n    throw new Error(`Failed to read response from ${commitsApiUrl}`);\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  UrlReaderService,\n  UrlReaderServiceReadTreeOptions,\n  UrlReaderServiceReadTreeResponse,\n  UrlReaderServiceReadUrlOptions,\n  UrlReaderServiceReadUrlResponse,\n  UrlReaderServiceSearchOptions,\n  UrlReaderServiceSearchResponse,\n} from '@backstage/backend-plugin-api';\nimport { NotFoundError, NotModifiedError } from '@backstage/errors';\nimport {\n  BitbucketServerIntegration,\n  getBitbucketServerDownloadUrl,\n  getBitbucketServerFileFetchUrl,\n  getBitbucketServerRequestOptions,\n  ScmIntegrations,\n} from '@backstage/integration';\nimport fetch, { Response } from 'node-fetch';\nimport parseGitUrl from 'git-url-parse';\nimport { trimEnd } from 'lodash';\nimport { Minimatch } from 'minimatch';\nimport { Readable } from 'stream';\nimport { ReaderFactory, ReadTreeResponseFactory } from './types';\nimport { ReadUrlResponseFactory } from './ReadUrlResponseFactory';\nimport { parseLastModified } from './util';\n\n/**\n * Implements a {@link @backstage/backend-plugin-api#UrlReaderService} for files from Bitbucket Server APIs.\n *\n * @public\n */\nexport class BitbucketServerUrlReader implements UrlReaderService {\n  static factory: ReaderFactory = ({ config, treeResponseFactory }) => {\n    const integrations = ScmIntegrations.fromConfig(config);\n    return integrations.bitbucketServer.list().map(integration => {\n      const reader = new BitbucketServerUrlReader(integration, {\n        treeResponseFactory,\n      });\n      const predicate = (url: URL) => url.host === integration.config.host;\n      return { reader, predicate };\n    });\n  };\n\n  constructor(\n    private readonly integration: BitbucketServerIntegration,\n    private readonly deps: { treeResponseFactory: ReadTreeResponseFactory },\n  ) {}\n\n  async read(url: string): Promise<Buffer> {\n    const response = await this.readUrl(url);\n    return response.buffer();\n  }\n\n  async readUrl(\n    url: string,\n    options?: UrlReaderServiceReadUrlOptions,\n  ): Promise<UrlReaderServiceReadUrlResponse> {\n    const { etag, lastModifiedAfter, signal } = options ?? {};\n    const bitbucketUrl = getBitbucketServerFileFetchUrl(\n      url,\n      this.integration.config,\n    );\n    const requestOptions = getBitbucketServerRequestOptions(\n      this.integration.config,\n    );\n\n    let response: Response;\n    try {\n      response = await fetch(bitbucketUrl.toString(), {\n        headers: {\n          ...requestOptions.headers,\n          ...(etag && { 'If-None-Match': etag }),\n          ...(lastModifiedAfter && {\n            'If-Modified-Since': lastModifiedAfter.toUTCString(),\n          }),\n        },\n        // TODO(freben): The signal cast is there because pre-3.x versions of\n        // node-fetch have a very slightly deviating AbortSignal type signature.\n        // The difference does not affect us in practice however. The cast can be\n        // removed after we support ESM for CLI dependencies and migrate to\n        // version 3 of node-fetch.\n        // https://github.com/backstage/backstage/issues/8242\n        ...(signal && { signal: signal as any }),\n      });\n    } catch (e) {\n      throw new Error(`Unable to read ${url}, ${e}`);\n    }\n\n    if (response.status === 304) {\n      throw new NotModifiedError();\n    }\n\n    if (response.ok) {\n      return ReadUrlResponseFactory.fromNodeJSReadable(response.body, {\n        etag: response.headers.get('ETag') ?? undefined,\n        lastModifiedAt: parseLastModified(\n          response.headers.get('Last-Modified'),\n        ),\n      });\n    }\n\n    const message = `${url} could not be read as ${bitbucketUrl}, ${response.status} ${response.statusText}`;\n    if (response.status === 404) {\n      throw new NotFoundError(message);\n    }\n    throw new Error(message);\n  }\n\n  async readTree(\n    url: string,\n    options?: UrlReaderServiceReadTreeOptions,\n  ): Promise<UrlReaderServiceReadTreeResponse> {\n    const { filepath } = parseGitUrl(url);\n\n    const lastCommitShortHash = await this.getLastCommitShortHash(url);\n    if (options?.etag && options.etag === lastCommitShortHash) {\n      throw new NotModifiedError();\n    }\n\n    const downloadUrl = await getBitbucketServerDownloadUrl(\n      url,\n      this.integration.config,\n    );\n    const archiveResponse = await fetch(\n      downloadUrl,\n      getBitbucketServerRequestOptions(this.integration.config),\n    );\n    if (!archiveResponse.ok) {\n      const message = `Failed to read tree from ${url}, ${archiveResponse.status} ${archiveResponse.statusText}`;\n      if (archiveResponse.status === 404) {\n        throw new NotFoundError(message);\n      }\n      throw new Error(message);\n    }\n\n    return await this.deps.treeResponseFactory.fromTarArchive({\n      stream: Readable.from(archiveResponse.body),\n      subpath: filepath,\n      etag: lastCommitShortHash,\n      filter: options?.filter,\n    });\n  }\n\n  async search(\n    url: string,\n    options?: UrlReaderServiceSearchOptions,\n  ): Promise<UrlReaderServiceSearchResponse> {\n    const { filepath } = parseGitUrl(url);\n    const matcher = new Minimatch(filepath);\n\n    // TODO(freben): For now, read the entire repo and filter through that. In\n    // a future improvement, we could be smart and try to deduce that non-glob\n    // prefixes (like for filepaths such as some-prefix/**/a.yaml) can be used\n    // to get just that part of the repo.\n    const treeUrl = trimEnd(url.replace(filepath, ''), '/');\n\n    const tree = await this.readTree(treeUrl, {\n      etag: options?.etag,\n      filter: path => matcher.match(path),\n    });\n    const files = await tree.files();\n\n    return {\n      etag: tree.etag,\n      files: files.map(file => ({\n        url: this.integration.resolveUrl({\n          url: `/${file.path}`,\n          base: url,\n        }),\n        content: file.content,\n        lastModifiedAt: file.lastModifiedAt,\n      })),\n    };\n  }\n\n  toString() {\n    const { host, token } = this.integration.config;\n    const authed = Boolean(token);\n    return `bitbucketServer{host=${host},authed=${authed}}`;\n  }\n\n  private async getLastCommitShortHash(url: string): Promise<string> {\n    const { name: repoName, owner: project, ref: branch } = parseGitUrl(url);\n\n    // If a branch is provided use that otherwise fall back to the default branch\n    const branchParameter = branch\n      ? `?filterText=${encodeURIComponent(branch)}`\n      : '/default';\n\n    // https://docs.atlassian.com/bitbucket-server/rest/7.9.0/bitbucket-rest.html#idp211 (branches docs)\n    const branchListUrl = `${this.integration.config.apiBaseUrl}/projects/${project}/repos/${repoName}/branches${branchParameter}`;\n\n    const branchListResponse = await fetch(\n      branchListUrl,\n      getBitbucketServerRequestOptions(this.integration.config),\n    );\n    if (!branchListResponse.ok) {\n      const message = `Failed to retrieve branch list from ${branchListUrl}, ${branchListResponse.status} ${branchListResponse.statusText}`;\n      if (branchListResponse.status === 404) {\n        throw new NotFoundError(message);\n      }\n      throw new Error(message);\n    }\n\n    const branchMatches = await branchListResponse.json();\n\n    if (branchMatches && branchMatches.size > 0) {\n      const exactBranchMatch = branchMatches.values.filter(\n        (branchDetails: { displayId: string }) =>\n          branchDetails.displayId === branch,\n      )[0];\n      return exactBranchMatch.latestCommit.substring(0, 12);\n    }\n\n    // Handle when no branch is provided using the default as the fallback\n    if (!branch && branchMatches) {\n      return branchMatches.latestCommit.substring(0, 12);\n    }\n\n    throw new Error(\n      `Failed to find Last Commit using ${\n        branch ? `branch \"${branch}\"` : 'default branch'\n      } in response from ${branchListUrl}`,\n    );\n  }\n}\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  UrlReaderService,\n  UrlReaderServiceReadTreeOptions,\n  UrlReaderServiceReadTreeResponse,\n  UrlReaderServiceReadUrlOptions,\n  UrlReaderServiceReadUrlResponse,\n  UrlReaderServiceSearchResponse,\n} from '@backstage/backend-plugin-api';\nimport { Base64Decode } from 'base64-stream';\nimport fetch, { Response } from 'node-fetch';\nimport { Readable } from 'stream';\nimport {\n  GerritIntegration,\n  ScmIntegrations,\n  buildGerritGitilesArchiveUrl,\n  getGerritBranchApiUrl,\n  getGerritFileContentsApiUrl,\n  getGerritRequestOptions,\n  parseGerritGitilesUrl,\n  parseGerritJsonResponse,\n} from '@backstage/integration';\nimport { NotFoundError, NotModifiedError } from '@backstage/errors';\nimport { ReadTreeResponseFactory, ReaderFactory } from './types';\n\n/**\n * Implements a {@link @backstage/backend-plugin-api#UrlReaderService} for files in Gerrit.\n *\n * @remarks\n * To be able to link to Git contents for Gerrit providers in a user friendly\n * way we are depending on that there is a Gitiles installation somewhere\n * that we can link to. It is perfectly possible to integrate Gerrit with\n * Backstage without Gitiles since all API calls goes directly to Gerrit.\n * However if Gitiles is configured, readTree will use it to fetch\n * an archive instead of cloning the repository.\n *\n * The \"host\" variable in the config is the Gerrit host. The address where\n * Gitiles is installed may be on the same host but it could be on a\n * separate host. For example a Gerrit instance could be hosted on\n * \"gerrit-review.company.com\" but the repos could be browsable on a separate\n * host, e.g. \"gerrit.company.com\" and the human readable URL would then\n * not point to the API host.\n *\n * @public\n */\nexport class GerritUrlReader implements UrlReaderService {\n  static factory: ReaderFactory = ({ config, treeResponseFactory }) => {\n    const integrations = ScmIntegrations.fromConfig(config);\n    if (!integrations.gerrit) {\n      return [];\n    }\n    return integrations.gerrit.list().map(integration => {\n      const reader = new GerritUrlReader(integration, { treeResponseFactory });\n      const predicate = (url: URL) => {\n        const gitilesUrl = new URL(integration.config.gitilesBaseUrl!);\n        // If gitilesUrl is not specified it will default to\n        // \"integration.config.host\".\n        return url.host === gitilesUrl.host;\n      };\n      return { reader, predicate };\n    });\n  };\n\n  constructor(\n    private readonly integration: GerritIntegration,\n    private readonly deps: { treeResponseFactory: ReadTreeResponseFactory },\n  ) {}\n\n  async read(url: string): Promise<Buffer> {\n    const response = await this.readUrl(url);\n    return response.buffer();\n  }\n\n  async readUrl(\n    url: string,\n    options?: UrlReaderServiceReadUrlOptions,\n  ): Promise<UrlReaderServiceReadUrlResponse> {\n    const apiUrl = getGerritFileContentsApiUrl(this.integration.config, url);\n    let response: Response;\n    try {\n      response = await fetch(apiUrl, {\n        method: 'GET',\n        ...getGerritRequestOptions(this.integration.config),\n        // TODO(freben): The signal cast is there because pre-3.x versions of\n        // node-fetch have a very slightly deviating AbortSignal type signature.\n        // The difference does not affect us in practice however. The cast can\n        // be removed after we support ESM for CLI dependencies and migrate to\n        // version 3 of node-fetch.\n        // https://github.com/backstage/backstage/issues/8242\n        signal: options?.signal as any,\n      });\n    } catch (e) {\n      throw new Error(`Unable to read gerrit file ${url}, ${e}`);\n    }\n\n    if (response.ok) {\n      let responseBody: string;\n      return {\n        buffer: async () => {\n          if (responseBody === undefined) {\n            responseBody = await response.text();\n          }\n          return Buffer.from(responseBody, 'base64');\n        },\n        stream: () => {\n          const readable = Readable.from(response.body);\n          return readable.pipe(new Base64Decode());\n        },\n      };\n    }\n    if (response.status === 404) {\n      throw new NotFoundError(`File ${url} not found.`);\n    }\n    throw new Error(\n      `${url} could not be read as ${apiUrl}, ${response.status} ${response.statusText}`,\n    );\n  }\n\n  async readTree(\n    url: string,\n    options?: UrlReaderServiceReadTreeOptions,\n  ): Promise<UrlReaderServiceReadTreeResponse> {\n    const apiUrl = getGerritBranchApiUrl(this.integration.config, url);\n    let response: Response;\n    try {\n      response = await fetch(apiUrl, {\n        method: 'GET',\n        ...getGerritRequestOptions(this.integration.config),\n      });\n    } catch (e) {\n      throw new Error(`Unable to read branch state ${url}, ${e}`);\n    }\n\n    if (response.status === 404) {\n      throw new NotFoundError(`Not found: ${url}`);\n    }\n\n    if (!response.ok) {\n      throw new Error(\n        `${url} could not be read as ${apiUrl}, ${response.status} ${response.statusText}`,\n      );\n    }\n    const branchInfo = (await parseGerritJsonResponse(response as any)) as {\n      revision: string;\n    };\n    if (options?.etag === branchInfo.revision) {\n      throw new NotModifiedError();\n    }\n\n    return this.readTreeFromGitiles(url, branchInfo.revision, options);\n  }\n\n  async search(): Promise<UrlReaderServiceSearchResponse> {\n    throw new Error('GerritReader does not implement search');\n  }\n\n  toString() {\n    const { host, password } = this.integration.config;\n    return `gerrit{host=${host},authed=${Boolean(password)}}`;\n  }\n\n  private async readTreeFromGitiles(\n    url: string,\n    revision: string,\n    options?: UrlReaderServiceReadTreeOptions,\n  ) {\n    const { branch, filePath, project } = parseGerritGitilesUrl(\n      this.integration.config,\n      url,\n    );\n    const archiveUrl = buildGerritGitilesArchiveUrl(\n      this.integration.config,\n      project,\n      branch,\n      filePath,\n    );\n    const archiveResponse = await fetch(archiveUrl, {\n      ...getGerritRequestOptions(this.integration.config),\n      // TODO(freben): The signal cast is there because pre-3.x versions of\n      // node-fetch have a very slightly deviating AbortSignal type signature.\n      // The difference does not affect us in practice however. The cast can\n      // be removed after we support ESM for CLI dependencies and migrate to\n      // version 3 of node-fetch.\n      // https://github.com/backstage/backstage/issues/8242\n      signal: options?.signal as any,\n    });\n\n    if (archiveResponse.status === 404) {\n      throw new NotFoundError(`Not found: ${archiveUrl}`);\n    }\n\n    if (!archiveResponse.ok) {\n      throw new Error(\n        `${url} could not be read as ${archiveUrl}, ${archiveResponse.status} ${archiveResponse.statusText}`,\n      );\n    }\n\n    return await this.deps.treeResponseFactory.fromTarArchive({\n      stream: archiveResponse.body as unknown as Readable,\n      etag: revision,\n      filter: options?.filter,\n      stripFirstDirectory: false,\n    });\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  UrlReaderService,\n  UrlReaderServiceReadTreeOptions,\n  UrlReaderServiceReadTreeResponse,\n  UrlReaderServiceReadUrlOptions,\n  UrlReaderServiceReadUrlResponse,\n  UrlReaderServiceSearchOptions,\n  UrlReaderServiceSearchResponse,\n  UrlReaderServiceSearchResponseFile,\n} from '@backstage/backend-plugin-api';\nimport {\n  getGithubFileFetchUrl,\n  DefaultGithubCredentialsProvider,\n  GithubCredentialsProvider,\n  GithubIntegration,\n  ScmIntegrations,\n  GithubCredentials,\n} from '@backstage/integration';\nimport { RestEndpointMethodTypes } from '@octokit/rest';\nimport fetch, { RequestInit, Response } from 'node-fetch';\nimport parseGitUrl from 'git-url-parse';\nimport { Minimatch } from 'minimatch';\nimport { Readable } from 'stream';\nimport { NotFoundError, NotModifiedError } from '@backstage/errors';\nimport { ReadTreeResponseFactory, ReaderFactory } from './types';\nimport { ReadUrlResponseFactory } from './ReadUrlResponseFactory';\nimport { parseLastModified } from './util';\n\nexport type GhRepoResponse =\n  RestEndpointMethodTypes['repos']['get']['response']['data'];\nexport type GhCombinedCommitStatusResponse =\n  RestEndpointMethodTypes['repos']['getCombinedStatusForRef']['response']['data'];\nexport type GhTreeResponse =\n  RestEndpointMethodTypes['git']['getTree']['response']['data'];\nexport type GhBlobResponse =\n  RestEndpointMethodTypes['git']['getBlob']['response']['data'];\n\n/**\n * Implements a {@link @backstage/backend-plugin-api#UrlReaderService} for files through the GitHub v3 APIs, such as\n * the one exposed by GitHub itself.\n *\n * @public\n */\nexport class GithubUrlReader implements UrlReaderService {\n  static factory: ReaderFactory = ({ config, treeResponseFactory }) => {\n    const integrations = ScmIntegrations.fromConfig(config);\n    const credentialsProvider =\n      DefaultGithubCredentialsProvider.fromIntegrations(integrations);\n    return integrations.github.list().map(integration => {\n      const reader = new GithubUrlReader(integration, {\n        treeResponseFactory,\n        credentialsProvider,\n      });\n      const predicate = (url: URL) => url.host === integration.config.host;\n      return { reader, predicate };\n    });\n  };\n\n  constructor(\n    private readonly integration: GithubIntegration,\n    private readonly deps: {\n      treeResponseFactory: ReadTreeResponseFactory;\n      credentialsProvider: GithubCredentialsProvider;\n    },\n  ) {\n    if (!integration.config.apiBaseUrl && !integration.config.rawBaseUrl) {\n      throw new Error(\n        `GitHub integration '${integration.title}' must configure an explicit apiBaseUrl or rawBaseUrl`,\n      );\n    }\n  }\n\n  async read(url: string): Promise<Buffer> {\n    const response = await this.readUrl(url);\n    return response.buffer();\n  }\n\n  private getCredentials = async (\n    url: string,\n    options?: { token?: string },\n  ): Promise<GithubCredentials> => {\n    if (options?.token) {\n      return {\n        headers: {\n          Authorization: `Bearer ${options.token}`,\n        },\n        type: 'token',\n        token: options.token,\n      };\n    }\n\n    return await this.deps.credentialsProvider.getCredentials({\n      url,\n    });\n  };\n\n  async readUrl(\n    url: string,\n    options?: UrlReaderServiceReadUrlOptions,\n  ): Promise<UrlReaderServiceReadUrlResponse> {\n    const credentials = await this.getCredentials(url, options);\n\n    const ghUrl = getGithubFileFetchUrl(\n      url,\n      this.integration.config,\n      credentials,\n    );\n\n    const response = await this.fetchResponse(ghUrl, {\n      headers: {\n        ...credentials?.headers,\n        ...(options?.etag && { 'If-None-Match': options.etag }),\n        ...(options?.lastModifiedAfter && {\n          'If-Modified-Since': options.lastModifiedAfter.toUTCString(),\n        }),\n        Accept: 'application/vnd.github.v3.raw',\n      },\n      // TODO(freben): The signal cast is there because pre-3.x versions of\n      // node-fetch have a very slightly deviating AbortSignal type signature.\n      // The difference does not affect us in practice however. The cast can\n      // be removed after we support ESM for CLI dependencies and migrate to\n      // version 3 of node-fetch.\n      // https://github.com/backstage/backstage/issues/8242\n      signal: options?.signal as any,\n    });\n\n    return ReadUrlResponseFactory.fromNodeJSReadable(response.body, {\n      etag: response.headers.get('ETag') ?? undefined,\n      lastModifiedAt: parseLastModified(response.headers.get('Last-Modified')),\n    });\n  }\n\n  async readTree(\n    url: string,\n    options?: UrlReaderServiceReadTreeOptions,\n  ): Promise<UrlReaderServiceReadTreeResponse> {\n    const repoDetails = await this.getRepoDetails(url);\n    const commitSha = repoDetails.commitSha;\n\n    if (options?.etag && options.etag === commitSha) {\n      throw new NotModifiedError();\n    }\n\n    const { filepath } = parseGitUrl(url);\n    const { headers } = await this.getCredentials(url, options);\n\n    return this.doReadTree(\n      repoDetails.repo.archive_url,\n      commitSha,\n      filepath,\n      // TODO(freben): The signal cast is there because pre-3.x versions of\n      // node-fetch have a very slightly deviating AbortSignal type signature.\n      // The difference does not affect us in practice however. The cast can be\n      // removed after we support ESM for CLI dependencies and migrate to\n      // version 3 of node-fetch.\n      // https://github.com/backstage/backstage/issues/8242\n      { headers, signal: options?.signal as any },\n      options,\n    );\n  }\n\n  async search(\n    url: string,\n    options?: UrlReaderServiceSearchOptions,\n  ): Promise<UrlReaderServiceSearchResponse> {\n    const repoDetails = await this.getRepoDetails(url);\n    const commitSha = repoDetails.commitSha;\n\n    if (options?.etag && options.etag === commitSha) {\n      throw new NotModifiedError();\n    }\n\n    const { filepath } = parseGitUrl(url);\n    const { headers } = await this.getCredentials(url, options);\n\n    const files = await this.doSearch(\n      url,\n      repoDetails.repo.trees_url,\n      repoDetails.repo.archive_url,\n      commitSha,\n      filepath,\n      { headers, signal: options?.signal as any },\n    );\n\n    return { files, etag: commitSha };\n  }\n\n  toString() {\n    const { host, token } = this.integration.config;\n    return `github{host=${host},authed=${Boolean(token)}}`;\n  }\n\n  private async doReadTree(\n    archiveUrl: string,\n    sha: string,\n    subpath: string,\n    init: RequestInit,\n    options?: UrlReaderServiceReadTreeOptions,\n  ): Promise<UrlReaderServiceReadTreeResponse> {\n    // archive_url looks like \"https://api.github.com/repos/owner/repo/{archive_format}{/ref}\"\n    const archive = await this.fetchResponse(\n      archiveUrl\n        .replace('{archive_format}', 'tarball')\n        .replace('{/ref}', `/${sha}`),\n      init,\n    );\n\n    return await this.deps.treeResponseFactory.fromTarArchive({\n      // TODO(Rugvip): Underlying implementation of fetch will be node-fetch, we probably want\n      //               to stick to using that in exclusively backend code.\n      stream: Readable.from(archive.body),\n      subpath,\n      etag: sha,\n      filter: options?.filter,\n    });\n  }\n\n  private async doSearch(\n    url: string,\n    treesUrl: string,\n    archiveUrl: string,\n    sha: string,\n    query: string,\n    init: RequestInit,\n  ): Promise<UrlReaderServiceSearchResponseFile[]> {\n    function pathToUrl(path: string): string {\n      // TODO(freben): Use the integration package facility for this instead\n      // pathname starts as /backstage/backstage/blob/master/<path>\n      const updated = new URL(url);\n      const base = updated.pathname.split('/').slice(1, 5).join('/');\n      updated.pathname = `${base}/${path}`;\n      return updated.toString();\n    }\n\n    const matcher = new Minimatch(query.replace(/^\\/+/, ''));\n\n    // trees_url looks like \"https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}\"\n    const recursiveTree: GhTreeResponse = await this.fetchJson(\n      treesUrl.replace('{/sha}', `/${sha}?recursive=true`),\n      init,\n    );\n\n    // The simple case is that we got the entire tree in a single operation.\n    if (!recursiveTree.truncated) {\n      const matching = recursiveTree.tree.filter(\n        item =>\n          item.type === 'blob' &&\n          item.path &&\n          item.url &&\n          matcher.match(item.path),\n      );\n\n      return matching.map(item => ({\n        url: pathToUrl(item.path!),\n        content: async () => {\n          const blob: GhBlobResponse = await this.fetchJson(item.url!, init);\n          return Buffer.from(blob.content, 'base64');\n        },\n      }));\n    }\n\n    // For larger repos, we leverage readTree and filter through that instead\n    const tree = await this.doReadTree(archiveUrl, sha, '', init, {\n      filter: path => matcher.match(path),\n    });\n    const files = await tree.files();\n\n    return files.map(file => ({\n      url: pathToUrl(file.path),\n      content: file.content,\n      lastModifiedAt: file.lastModifiedAt,\n    }));\n  }\n\n  private async getRepoDetails(url: string): Promise<{\n    commitSha: string;\n    repo: {\n      archive_url: string;\n      trees_url: string;\n    };\n  }> {\n    const parsed = parseGitUrl(url);\n    const { ref, full_name } = parsed;\n\n    const credentials = await this.deps.credentialsProvider.getCredentials({\n      url,\n    });\n    const { headers } = credentials;\n\n    const commitStatus: GhCombinedCommitStatusResponse = await this.fetchJson(\n      `${this.integration.config.apiBaseUrl}/repos/${full_name}/commits/${\n        ref || (await this.getDefaultBranch(full_name, credentials))\n      }/status?per_page=0`,\n      { headers },\n    );\n\n    return {\n      commitSha: commitStatus.sha,\n      repo: commitStatus.repository,\n    };\n  }\n\n  private async getDefaultBranch(\n    repoFullName: string,\n    credentials: GithubCredentials,\n  ): Promise<string> {\n    const repo: GhRepoResponse = await this.fetchJson(\n      `${this.integration.config.apiBaseUrl}/repos/${repoFullName}`,\n      { headers: credentials.headers },\n    );\n\n    return repo.default_branch;\n  }\n\n  private async fetchResponse(\n    url: string | URL,\n    init: RequestInit,\n  ): Promise<Response> {\n    const urlAsString = url.toString();\n    const response = await fetch(urlAsString, init);\n\n    if (!response.ok) {\n      let message = `Request failed for ${urlAsString}, ${response.status} ${response.statusText}`;\n\n      if (response.status === 304) {\n        throw new NotModifiedError();\n      }\n\n      if (response.status === 404) {\n        throw new NotFoundError(message);\n      }\n\n      // GitHub returns a 403 response with a couple of headers indicating rate\n      // limit status. See more in the GitHub docs:\n      // https://docs.github.com/en/rest/overview/resources-in-the-rest-api#rate-limiting\n      if (this.integration.parseRateLimitInfo(response).isRateLimited) {\n        message += ' (rate limit exceeded)';\n      }\n\n      throw new Error(message);\n    }\n\n    return response;\n  }\n\n  private async fetchJson(url: string | URL, init: RequestInit): Promise<any> {\n    const response = await this.fetchResponse(url, init);\n    return await response.json();\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  UrlReaderService,\n  UrlReaderServiceReadTreeOptions,\n  UrlReaderServiceReadTreeResponse,\n  UrlReaderServiceReadUrlOptions,\n  UrlReaderServiceReadUrlResponse,\n  UrlReaderServiceSearchOptions,\n  UrlReaderServiceSearchResponse,\n} from '@backstage/backend-plugin-api';\nimport {\n  getGitLabFileFetchUrl,\n  getGitLabIntegrationRelativePath,\n  getGitLabRequestOptions,\n  GitLabIntegration,\n  ScmIntegrations,\n} from '@backstage/integration';\nimport fetch, { Response } from 'node-fetch';\nimport parseGitUrl from 'git-url-parse';\nimport { Minimatch } from 'minimatch';\nimport { Readable } from 'stream';\nimport { NotFoundError, NotModifiedError } from '@backstage/errors';\nimport { ReadTreeResponseFactory, ReaderFactory } from './types';\nimport { trimEnd, trimStart } from 'lodash';\nimport { ReadUrlResponseFactory } from './ReadUrlResponseFactory';\nimport { parseLastModified } from './util';\n\n/**\n * Implements a {@link @backstage/backend-plugin-api#UrlReaderService} for files on GitLab.\n *\n * @public\n */\nexport class GitlabUrlReader implements UrlReaderService {\n  static factory: ReaderFactory = ({ config, treeResponseFactory }) => {\n    const integrations = ScmIntegrations.fromConfig(config);\n    return integrations.gitlab.list().map(integration => {\n      const reader = new GitlabUrlReader(integration, {\n        treeResponseFactory,\n      });\n      const predicate = (url: URL) => url.host === integration.config.host;\n      return { reader, predicate };\n    });\n  };\n\n  constructor(\n    private readonly integration: GitLabIntegration,\n    private readonly deps: { treeResponseFactory: ReadTreeResponseFactory },\n  ) {}\n\n  async read(url: string): Promise<Buffer> {\n    const response = await this.readUrl(url);\n    return response.buffer();\n  }\n\n  async readUrl(\n    url: string,\n    options?: UrlReaderServiceReadUrlOptions,\n  ): Promise<UrlReaderServiceReadUrlResponse> {\n    const { etag, lastModifiedAfter, signal } = options ?? {};\n    const builtUrl = await this.getGitlabFetchUrl(url);\n\n    let response: Response;\n    try {\n      response = await fetch(builtUrl, {\n        headers: {\n          ...getGitLabRequestOptions(this.integration.config).headers,\n          ...(etag && { 'If-None-Match': etag }),\n          ...(lastModifiedAfter && {\n            'If-Modified-Since': lastModifiedAfter.toUTCString(),\n          }),\n        },\n        // TODO(freben): The signal cast is there because pre-3.x versions of\n        // node-fetch have a very slightly deviating AbortSignal type signature.\n        // The difference does not affect us in practice however. The cast can be\n        // removed after we support ESM for CLI dependencies and migrate to\n        // version 3 of node-fetch.\n        // https://github.com/backstage/backstage/issues/8242\n        ...(signal && { signal: signal as any }),\n      });\n    } catch (e) {\n      throw new Error(`Unable to read ${url}, ${e}`);\n    }\n\n    if (response.status === 304) {\n      throw new NotModifiedError();\n    }\n\n    if (response.ok) {\n      return ReadUrlResponseFactory.fromNodeJSReadable(response.body, {\n        etag: response.headers.get('ETag') ?? undefined,\n        lastModifiedAt: parseLastModified(\n          response.headers.get('Last-Modified'),\n        ),\n      });\n    }\n\n    const message = `${url} could not be read as ${builtUrl}, ${response.status} ${response.statusText}`;\n    if (response.status === 404) {\n      throw new NotFoundError(message);\n    }\n    throw new Error(message);\n  }\n\n  async readTree(\n    url: string,\n    options?: UrlReaderServiceReadTreeOptions,\n  ): Promise<UrlReaderServiceReadTreeResponse> {\n    const { etag, signal } = options ?? {};\n    const { ref, full_name, filepath } = parseGitUrl(url);\n\n    let repoFullName = full_name;\n\n    const relativePath = getGitLabIntegrationRelativePath(\n      this.integration.config,\n    );\n\n    // Considering self hosted gitlab with relative\n    // assuming '/gitlab' is the relative path\n    // from: /gitlab/repo/project\n    // to: repo/project\n    if (relativePath) {\n      const rectifiedRelativePath = `${trimStart(relativePath, '/')}/`;\n      repoFullName = full_name.replace(rectifiedRelativePath, '');\n    }\n\n    // Use GitLab API to get the default branch\n    // encodeURIComponent is required for GitLab API\n    // https://docs.gitlab.com/ee/api/README.html#namespaced-path-encoding\n    const projectGitlabResponse = await fetch(\n      new URL(\n        `${this.integration.config.apiBaseUrl}/projects/${encodeURIComponent(\n          repoFullName,\n        )}`,\n      ).toString(),\n      getGitLabRequestOptions(this.integration.config),\n    );\n    if (!projectGitlabResponse.ok) {\n      const msg = `Failed to read tree from ${url}, ${projectGitlabResponse.status} ${projectGitlabResponse.statusText}`;\n      if (projectGitlabResponse.status === 404) {\n        throw new NotFoundError(msg);\n      }\n      throw new Error(msg);\n    }\n    const projectGitlabResponseJson = await projectGitlabResponse.json();\n\n    // ref is an empty string if no branch is set in provided url to readTree.\n    const branch = ref || projectGitlabResponseJson.default_branch;\n\n    // Fetch the latest commit that modifies the filepath in the provided or default branch\n    // to compare against the provided sha.\n    const commitsReqParams = new URLSearchParams();\n    commitsReqParams.set('ref_name', branch);\n    if (!!filepath) {\n      commitsReqParams.set('path', filepath);\n    }\n    const commitsGitlabResponse = await fetch(\n      new URL(\n        `${this.integration.config.apiBaseUrl}/projects/${encodeURIComponent(\n          repoFullName,\n        )}/repository/commits?${commitsReqParams.toString()}`,\n      ).toString(),\n      {\n        ...getGitLabRequestOptions(this.integration.config),\n        // TODO(freben): The signal cast is there because pre-3.x versions of\n        // node-fetch have a very slightly deviating AbortSignal type signature.\n        // The difference does not affect us in practice however. The cast can\n        // be removed after we support ESM for CLI dependencies and migrate to\n        // version 3 of node-fetch.\n        // https://github.com/backstage/backstage/issues/8242\n        ...(signal && { signal: signal as any }),\n      },\n    );\n    if (!commitsGitlabResponse.ok) {\n      const message = `Failed to read tree (branch) from ${url}, ${commitsGitlabResponse.status} ${commitsGitlabResponse.statusText}`;\n      if (commitsGitlabResponse.status === 404) {\n        throw new NotFoundError(message);\n      }\n      throw new Error(message);\n    }\n\n    const commitSha = (await commitsGitlabResponse.json())[0]?.id ?? '';\n    if (etag && etag === commitSha) {\n      throw new NotModifiedError();\n    }\n\n    const archiveReqParams = new URLSearchParams();\n    archiveReqParams.set('sha', branch);\n    if (!!filepath) {\n      archiveReqParams.set('path', filepath);\n    }\n    // https://docs.gitlab.com/ee/api/repositories.html#get-file-archive\n    const archiveGitLabResponse = await fetch(\n      `${this.integration.config.apiBaseUrl}/projects/${encodeURIComponent(\n        repoFullName,\n      )}/repository/archive?${archiveReqParams.toString()}`,\n      {\n        ...getGitLabRequestOptions(this.integration.config),\n        // TODO(freben): The signal cast is there because pre-3.x versions of\n        // node-fetch have a very slightly deviating AbortSignal type signature.\n        // The difference does not affect us in practice however. The cast can\n        // be removed after we support ESM for CLI dependencies and migrate to\n        // version 3 of node-fetch.\n        // https://github.com/backstage/backstage/issues/8242\n        ...(signal && { signal: signal as any }),\n      },\n    );\n    if (!archiveGitLabResponse.ok) {\n      const message = `Failed to read tree (archive) from ${url}, ${archiveGitLabResponse.status} ${archiveGitLabResponse.statusText}`;\n      if (archiveGitLabResponse.status === 404) {\n        throw new NotFoundError(message);\n      }\n      throw new Error(message);\n    }\n\n    return await this.deps.treeResponseFactory.fromTarArchive({\n      stream: Readable.from(archiveGitLabResponse.body),\n      subpath: filepath,\n      etag: commitSha,\n      filter: options?.filter,\n    });\n  }\n\n  async search(\n    url: string,\n    options?: UrlReaderServiceSearchOptions,\n  ): Promise<UrlReaderServiceSearchResponse> {\n    const { filepath } = parseGitUrl(url);\n    const staticPart = this.getStaticPart(filepath);\n    const matcher = new Minimatch(filepath);\n    const treeUrl = trimEnd(url.replace(filepath, staticPart), `/`);\n    const pathPrefix = staticPart ? `${staticPart}/` : '';\n    const tree = await this.readTree(treeUrl, {\n      etag: options?.etag,\n      signal: options?.signal,\n      filter: path => matcher.match(`${pathPrefix}${path}`),\n    });\n\n    const files = await tree.files();\n    return {\n      etag: tree.etag,\n      files: files.map(file => ({\n        url: this.integration.resolveUrl({\n          url: `/${pathPrefix}${file.path}`,\n          base: url,\n        }),\n        content: file.content,\n        lastModifiedAt: file.lastModifiedAt,\n      })),\n    };\n  }\n\n  /**\n   * This function splits the input globPattern string into segments using the  path separator /. It then iterates over\n   * the segments from the end of the array towards the beginning, checking if the concatenated string up to that\n   * segment matches the original globPattern using the minimatch function. If a match is found, it continues iterating.\n   * If no match is found, it returns the concatenated string up to the current segment, which is the static part of the\n   * glob pattern.\n   *\n   * E.g. `catalog/foo/*.yaml` will return `catalog/foo`.\n   *\n   * @param globPattern the glob pattern\n   * @private\n   */\n  private getStaticPart(globPattern: string) {\n    const segments = globPattern.split('/');\n    let i = segments.length;\n    while (\n      i > 0 &&\n      new Minimatch(segments.slice(0, i).join('/')).match(globPattern)\n    ) {\n      i--;\n    }\n    return segments.slice(0, i).join('/');\n  }\n\n  toString() {\n    const { host, token } = this.integration.config;\n    return `gitlab{host=${host},authed=${Boolean(token)}}`;\n  }\n\n  private async getGitlabFetchUrl(target: string): Promise<string> {\n    // If the target is for a job artifact then go down that path\n    const targetUrl = new URL(target);\n    if (targetUrl.pathname.includes('/-/jobs/artifacts/')) {\n      return this.getGitlabArtifactFetchUrl(targetUrl).then(value =>\n        value.toString(),\n      );\n    }\n    // Default to the old behavior of assuming the url is for a file\n    return getGitLabFileFetchUrl(target, this.integration.config);\n  }\n\n  // convert urls of the form:\n  //    https://example.com/<namespace>/<project>/-/jobs/artifacts/<ref>/raw/<path_to_file>?job=<job_name>\n  // to urls of the form:\n  //    https://example.com/api/v4/projects/:id/jobs/artifacts/:ref_name/raw/*artifact_path?job=<job_name>\n  private async getGitlabArtifactFetchUrl(target: URL): Promise<URL> {\n    if (!target.pathname.includes('/-/jobs/artifacts/')) {\n      throw new Error('Unable to process url as an GitLab artifact');\n    }\n    try {\n      const [namespaceAndProject, ref] =\n        target.pathname.split('/-/jobs/artifacts/');\n      const projectPath = new URL(target);\n      projectPath.pathname = namespaceAndProject;\n      const projectId = await this.resolveProjectToId(projectPath);\n      const relativePath = getGitLabIntegrationRelativePath(\n        this.integration.config,\n      );\n      const newUrl = new URL(target);\n      newUrl.pathname = `${relativePath}/api/v4/projects/${projectId}/jobs/artifacts/${ref}`;\n      return newUrl;\n    } catch (e) {\n      throw new Error(\n        `Unable to translate GitLab artifact URL: ${target}, ${e}`,\n      );\n    }\n  }\n\n  private async resolveProjectToId(pathToProject: URL): Promise<number> {\n    let project = pathToProject.pathname;\n    // Check relative path exist and remove it if so\n    const relativePath = getGitLabIntegrationRelativePath(\n      this.integration.config,\n    );\n    if (relativePath) {\n      project = project.replace(relativePath, '');\n    }\n    // Trim an initial / if it exists\n    project = project.replace(/^\\//, '');\n    const result = await fetch(\n      `${\n        pathToProject.origin\n      }${relativePath}/api/v4/projects/${encodeURIComponent(project)}`,\n      getGitLabRequestOptions(this.integration.config),\n    );\n    const data = await result.json();\n    if (!result.ok) {\n      throw new Error(`Gitlab error: ${data.error}, ${data.error_description}`);\n    }\n    return Number(data.id);\n  }\n}\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  UrlReaderService,\n  UrlReaderServiceReadTreeOptions,\n  UrlReaderServiceReadTreeResponse,\n  UrlReaderServiceReadUrlOptions,\n  UrlReaderServiceReadUrlResponse,\n  UrlReaderServiceSearchResponse,\n} from '@backstage/backend-plugin-api';\nimport {\n  getGiteaFileContentsUrl,\n  getGiteaArchiveUrl,\n  getGiteaLatestCommitUrl,\n  parseGiteaUrl,\n  getGiteaRequestOptions,\n  GiteaIntegration,\n  ScmIntegrations,\n} from '@backstage/integration';\nimport { ReaderFactory, ReadTreeResponseFactory } from './types';\nimport fetch, { Response } from 'node-fetch';\nimport { ReadUrlResponseFactory } from './ReadUrlResponseFactory';\nimport {\n  AuthenticationError,\n  NotFoundError,\n  NotModifiedError,\n} from '@backstage/errors';\nimport { Readable } from 'stream';\nimport { parseLastModified } from './util';\n\n/**\n * Implements a {@link @backstage/backend-plugin-api#UrlReaderService} for the Gitea v1 api.\n *\n * @public\n */\nexport class GiteaUrlReader implements UrlReaderService {\n  static factory: ReaderFactory = ({ config, treeResponseFactory }) => {\n    return ScmIntegrations.fromConfig(config)\n      .gitea.list()\n      .map(integration => {\n        const reader = new GiteaUrlReader(integration, { treeResponseFactory });\n        const predicate = (url: URL) => {\n          return url.host === integration.config.host;\n        };\n        return { reader, predicate };\n      });\n  };\n\n  constructor(\n    private readonly integration: GiteaIntegration,\n    private readonly deps: {\n      treeResponseFactory: ReadTreeResponseFactory;\n    },\n  ) {}\n\n  async read(url: string): Promise<Buffer> {\n    const response = await this.readUrl(url);\n    return response.buffer();\n  }\n\n  async readUrl(\n    url: string,\n    options?: UrlReaderServiceReadUrlOptions,\n  ): Promise<UrlReaderServiceReadUrlResponse> {\n    let response: Response;\n    const blobUrl = getGiteaFileContentsUrl(this.integration.config, url);\n\n    try {\n      response = await fetch(blobUrl, {\n        method: 'GET',\n        ...getGiteaRequestOptions(this.integration.config),\n        signal: options?.signal as any,\n      });\n    } catch (e) {\n      throw new Error(`Unable to read ${blobUrl}, ${e}`);\n    }\n\n    if (response.ok) {\n      // Gitea returns an object with the file contents encoded, not the file itself\n      const { encoding, content } = await response.json();\n\n      if (encoding === 'base64') {\n        return ReadUrlResponseFactory.fromReadable(\n          Readable.from(Buffer.from(content, 'base64')),\n          {\n            etag: response.headers.get('ETag') ?? undefined,\n            lastModifiedAt: parseLastModified(\n              response.headers.get('Last-Modified'),\n            ),\n          },\n        );\n      }\n\n      throw new Error(`Unknown encoding: ${encoding}`);\n    }\n\n    const message = `${url} could not be read as ${blobUrl}, ${response.status} ${response.statusText}`;\n    if (response.status === 404) {\n      throw new NotFoundError(message);\n    }\n\n    if (response.status === 304) {\n      throw new NotModifiedError();\n    }\n\n    if (response.status === 403) {\n      throw new AuthenticationError();\n    }\n\n    throw new Error(message);\n  }\n\n  async readTree(\n    url: string,\n    options?: UrlReaderServiceReadTreeOptions,\n  ): Promise<UrlReaderServiceReadTreeResponse> {\n    const lastCommitHash = await this.getLastCommitHash(url);\n    if (options?.etag && options.etag === lastCommitHash) {\n      throw new NotModifiedError();\n    }\n\n    const archiveUri = getGiteaArchiveUrl(this.integration.config, url);\n\n    let response: Response;\n    try {\n      response = await fetch(archiveUri, {\n        method: 'GET',\n        ...getGiteaRequestOptions(this.integration.config),\n        signal: options?.signal as any,\n      });\n    } catch (e) {\n      throw new Error(`Unable to read ${archiveUri}, ${e}`);\n    }\n\n    const parsedUri = parseGiteaUrl(this.integration.config, url);\n\n    return this.deps.treeResponseFactory.fromTarArchive({\n      stream: Readable.from(response.body),\n      subpath: parsedUri.path,\n      etag: lastCommitHash,\n      filter: options?.filter,\n    });\n  }\n\n  search(): Promise<UrlReaderServiceSearchResponse> {\n    throw new Error('GiteaUrlReader search not implemented.');\n  }\n\n  toString() {\n    const { host } = this.integration.config;\n    return `gitea{host=${host},authed=${Boolean(\n      this.integration.config.password,\n    )}}`;\n  }\n\n  private async getLastCommitHash(url: string): Promise<string> {\n    const commitUri = getGiteaLatestCommitUrl(this.integration.config, url);\n\n    const response = await fetch(\n      commitUri,\n      getGiteaRequestOptions(this.integration.config),\n    );\n    if (!response.ok) {\n      const message = `Failed to retrieve latest commit information from ${commitUri}, ${response.status} ${response.statusText}`;\n      if (response.status === 404) {\n        throw new NotFoundError(message);\n      }\n      throw new Error(message);\n    }\n\n    return (await response.json()).sha;\n  }\n}\n","/*\n * Copyright 2025 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  UrlReaderService,\n  UrlReaderServiceReadTreeResponse,\n  UrlReaderServiceReadUrlOptions,\n  UrlReaderServiceReadUrlResponse,\n  UrlReaderServiceSearchResponse,\n  UrlReaderServiceReadTreeOptions,\n} from '@backstage/backend-plugin-api';\nimport {\n  getHarnessRequestOptions,\n  getHarnessFileContentsUrl,\n  HarnessIntegration,\n  ScmIntegrations,\n  getHarnessLatestCommitUrl,\n  getHarnessArchiveUrl,\n  parseHarnessUrl,\n} from '@backstage/integration';\nimport { ReadTreeResponseFactory, ReaderFactory } from './types';\nimport fetch, { Response } from 'node-fetch';\nimport { ReadUrlResponseFactory } from './ReadUrlResponseFactory';\nimport {\n  AuthenticationError,\n  NotFoundError,\n  NotModifiedError,\n} from '@backstage/errors';\nimport { Readable } from 'stream';\n\n/**\n * Implements a {@link @backstage/backend-plugin-api#UrlReaderService} for the Harness code v1 api.\n *\n *\n * @public\n */\nexport class HarnessUrlReader implements UrlReaderService {\n  static factory: ReaderFactory = ({ config, treeResponseFactory }) => {\n    return ScmIntegrations.fromConfig(config)\n      .harness.list()\n      .map(integration => {\n        const reader = new HarnessUrlReader(integration, {\n          treeResponseFactory,\n        });\n        const predicate = (url: URL) => {\n          return url.host === integration.config.host;\n        };\n        return { reader, predicate };\n      });\n  };\n\n  constructor(\n    private readonly integration: HarnessIntegration,\n    private readonly deps: {\n      treeResponseFactory: ReadTreeResponseFactory;\n    },\n  ) {}\n  async read(url: string): Promise<Buffer> {\n    const response = await this.readUrl(url);\n    return response.buffer();\n  }\n\n  async readUrl(\n    url: string,\n    options?: UrlReaderServiceReadUrlOptions,\n  ): Promise<UrlReaderServiceReadUrlResponse> {\n    let response: Response;\n    const blobUrl = getHarnessFileContentsUrl(this.integration.config, url);\n\n    try {\n      response = await fetch(blobUrl, {\n        method: 'GET',\n        ...getHarnessRequestOptions(this.integration.config),\n        signal: options?.signal as any,\n      });\n    } catch (e) {\n      throw new Error(`Unable to read ${blobUrl}, ${e}`);\n    }\n\n    if (response.ok) {\n      // Harness Code returns the raw content object\n      const jsonResponse = { data: response.body };\n      if (jsonResponse) {\n        return ReadUrlResponseFactory.fromReadable(\n          Readable.from(jsonResponse.data),\n          {\n            etag: response.headers.get('ETag') ?? undefined,\n          },\n        );\n      }\n\n      throw new Error(`Unknown json: ${jsonResponse}`);\n    }\n\n    const message = `${url} x ${blobUrl}, ${response.status} ${response.statusText}`;\n    if (response.status === 404) {\n      throw new NotFoundError(message);\n    }\n\n    if (response.status === 304) {\n      throw new NotModifiedError();\n    }\n\n    if (response.status === 403) {\n      throw new AuthenticationError();\n    }\n\n    throw new Error(message);\n  }\n\n  async readTree(\n    url: string,\n    options?: UrlReaderServiceReadTreeOptions,\n  ): Promise<UrlReaderServiceReadTreeResponse> {\n    const lastCommitHash = await this.getLastCommitHash(url);\n\n    if (options?.etag && options.etag === lastCommitHash) {\n      throw new NotModifiedError();\n    }\n\n    const archiveUri = getHarnessArchiveUrl(this.integration.config, url);\n\n    let response: Response;\n    try {\n      response = await fetch(archiveUri, {\n        method: 'GET',\n        ...getHarnessRequestOptions(this.integration.config),\n        signal: options?.signal as any,\n      });\n    } catch (e) {\n      throw new Error(`Unable to read ${archiveUri}, ${e}`);\n    }\n\n    const parsedUri = parseHarnessUrl(this.integration.config, url);\n\n    return this.deps.treeResponseFactory.fromZipArchive({\n      stream: Readable.from(response.body),\n      subpath: parsedUri.path,\n      etag: lastCommitHash,\n      filter: options?.filter,\n    });\n  }\n\n  search(): Promise<UrlReaderServiceSearchResponse> {\n    throw new Error('HarnessUrlReader search not implemented.');\n  }\n\n  toString() {\n    const { host } = this.integration.config;\n    return `harness{host=${host},authed=${Boolean(\n      this.integration.config.token || this.integration.config.apiKey,\n    )}}`;\n  }\n  private async getLastCommitHash(url: string): Promise<string> {\n    const commitUri = getHarnessLatestCommitUrl(this.integration.config, url);\n\n    const response = await fetch(\n      commitUri,\n      getHarnessRequestOptions(this.integration.config),\n    );\n    if (!response.ok) {\n      const message = `Failed to retrieve latest commit information from ${commitUri}, ${response.status} ${response.statusText}`;\n      if (response.status === 404) {\n        throw new NotFoundError(message);\n      }\n      throw new Error(message);\n    }\n\n    return (await response.json()).latest_commit.sha;\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  UrlReaderService,\n  UrlReaderServiceReadTreeOptions,\n  UrlReaderServiceReadTreeResponse,\n  UrlReaderServiceReadUrlOptions,\n  UrlReaderServiceReadUrlResponse,\n  UrlReaderServiceSearchResponse,\n} from '@backstage/backend-plugin-api';\nimport { ReaderFactory, ReadTreeResponseFactory } from './types';\nimport {\n  AwsCredentialsManager,\n  DefaultAwsCredentialsManager,\n} from '@backstage/integration-aws-node';\nimport {\n  AwsS3Integration,\n  ScmIntegrations,\n  AwsS3IntegrationConfig,\n} from '@backstage/integration';\nimport { ForwardedError, NotModifiedError } from '@backstage/errors';\nimport { fromTemporaryCredentials } from '@aws-sdk/credential-providers';\nimport { AwsCredentialIdentityProvider } from '@aws-sdk/types';\nimport {\n  S3Client,\n  ListObjectsV2Command,\n  ListObjectsV2CommandOutput,\n  GetObjectCommand,\n  GetObjectCommandInput,\n} from '@aws-sdk/client-s3';\nimport { AbortController } from '@aws-sdk/abort-controller';\nimport { ReadUrlResponseFactory } from './ReadUrlResponseFactory';\nimport { Readable } from 'stream';\nimport { relative } from 'path/posix';\n\nexport const DEFAULT_REGION = 'us-east-1';\n\n/**\n * Path style URLs: https://s3.(region).amazonaws.com/(bucket)/(key)\n * The region can also be on the old form: https://s3-(region).amazonaws.com/(bucket)/(key)\n * Virtual hosted style URLs: https://(bucket).s3.(region).amazonaws.com/(key)\n * See https://docs.aws.amazon.com/AmazonS3/latest/userguide/VirtualHosting.html#path-style-access\n */\nexport function parseUrl(\n  url: string,\n  config: AwsS3IntegrationConfig,\n): { path: string; bucket: string; region: string } {\n  const parsedUrl = new URL(url);\n\n  /**\n   * Removes the leading '/' from the pathname to be processed\n   * as a parameter by AWS S3 SDK getObject method.\n   */\n  const pathname = parsedUrl.pathname.substring(1);\n  const host = parsedUrl.host;\n\n  // Treat Amazon hosted separately because it has special region logic\n  if (config.host === 'amazonaws.com' || config.host === 'amazonaws.com.cn') {\n    const match = host.match(\n      /^(?:([a-z0-9.-]+)\\.)?s3(?:[.-]([a-z0-9-]+))?\\.amazonaws\\.com(\\.cn)?$/,\n    );\n    if (!match) {\n      throw new Error(`Invalid AWS S3 URL ${url}`);\n    }\n\n    const [, hostBucket, hostRegion] = match;\n\n    if (config.s3ForcePathStyle || !hostBucket) {\n      const slashIndex = pathname.indexOf('/');\n      if (slashIndex < 0) {\n        throw new Error(\n          `Invalid path-style AWS S3 URL ${url}, does not contain bucket in the path`,\n        );\n      }\n\n      return {\n        path: pathname.substring(slashIndex + 1),\n        bucket: pathname.substring(0, slashIndex),\n        region: hostRegion ?? DEFAULT_REGION,\n      };\n    }\n\n    return {\n      path: pathname,\n      bucket: hostBucket,\n      region: hostRegion ?? DEFAULT_REGION,\n    };\n  }\n\n  const usePathStyle =\n    config.s3ForcePathStyle || host.length === config.host.length;\n\n  if (usePathStyle) {\n    const slashIndex = pathname.indexOf('/');\n    if (slashIndex < 0) {\n      throw new Error(\n        `Invalid path-style AWS S3 URL ${url}, does not contain bucket in the path`,\n      );\n    }\n\n    return {\n      path: pathname.substring(slashIndex + 1),\n      bucket: pathname.substring(0, slashIndex),\n      region: DEFAULT_REGION,\n    };\n  }\n\n  return {\n    path: pathname,\n    bucket: host.substring(0, host.length - config.host.length - 1),\n    region: DEFAULT_REGION,\n  };\n}\n\n/**\n * Implements a {@link @backstage/backend-plugin-api#UrlReaderService} for AWS S3 buckets.\n *\n * @public\n */\nexport class AwsS3UrlReader implements UrlReaderService {\n  static factory: ReaderFactory = ({ config, treeResponseFactory }) => {\n    const integrations = ScmIntegrations.fromConfig(config);\n    const credsManager = DefaultAwsCredentialsManager.fromConfig(config);\n\n    return integrations.awsS3.list().map(integration => {\n      const reader = new AwsS3UrlReader(credsManager, integration, {\n        treeResponseFactory,\n      });\n      const predicate = (url: URL) =>\n        url.host.endsWith(integration.config.host);\n      return { reader, predicate };\n    });\n  };\n\n  constructor(\n    private readonly credsManager: AwsCredentialsManager,\n    private readonly integration: AwsS3Integration,\n    private readonly deps: {\n      treeResponseFactory: ReadTreeResponseFactory;\n    },\n  ) {}\n\n  /**\n   * If accessKeyId and secretAccessKey are missing, the standard credentials provider chain will be used:\n   * https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/auth/DefaultAWSCredentialsProviderChain.html\n   */\n  private static buildStaticCredentials(\n    accessKeyId: string,\n    secretAccessKey: string,\n  ): AwsCredentialIdentityProvider {\n    return async () => {\n      return {\n        accessKeyId,\n        secretAccessKey,\n      };\n    };\n  }\n\n  private static async buildCredentials(\n    credsManager: AwsCredentialsManager,\n    region: string,\n    integration?: AwsS3Integration,\n  ): Promise<AwsCredentialIdentityProvider> {\n    // Fall back to the default credential chain if neither account ID\n    // nor explicit credentials are provided\n    if (!integration) {\n      return (await credsManager.getCredentialProvider()).sdkCredentialProvider;\n    }\n\n    const accessKeyId = integration.config.accessKeyId;\n    const secretAccessKey = integration.config.secretAccessKey;\n    let explicitCredentials: AwsCredentialIdentityProvider;\n    if (accessKeyId && secretAccessKey) {\n      explicitCredentials = AwsS3UrlReader.buildStaticCredentials(\n        accessKeyId,\n        secretAccessKey,\n      );\n    } else {\n      explicitCredentials = (await credsManager.getCredentialProvider())\n        .sdkCredentialProvider;\n    }\n\n    const roleArn = integration.config.roleArn;\n    if (roleArn) {\n      return fromTemporaryCredentials({\n        masterCredentials: explicitCredentials,\n        params: {\n          RoleSessionName: 'backstage-aws-s3-url-reader',\n          RoleArn: roleArn,\n          ExternalId: integration.config.externalId,\n        },\n        clientConfig: { region },\n      });\n    }\n\n    return explicitCredentials;\n  }\n\n  private async buildS3Client(\n    credsManager: AwsCredentialsManager,\n    region: string,\n    integration: AwsS3Integration,\n  ): Promise<S3Client> {\n    const credentials = await AwsS3UrlReader.buildCredentials(\n      credsManager,\n      region,\n      integration,\n    );\n\n    const s3 = new S3Client({\n      region: region,\n      credentials: credentials,\n      endpoint: integration.config.endpoint,\n      forcePathStyle: integration.config.s3ForcePathStyle,\n    });\n    return s3;\n  }\n\n  private async retrieveS3ObjectData(stream: Readable): Promise<Readable> {\n    return new Promise((resolve, reject) => {\n      try {\n        const chunks: any[] = [];\n        stream.on('data', chunk => chunks.push(chunk));\n        stream.on('error', (e: Error) =>\n          reject(new ForwardedError('Unable to read stream', e)),\n        );\n        stream.on('end', () => resolve(Readable.from(Buffer.concat(chunks))));\n      } catch (e) {\n        throw new ForwardedError('Unable to parse the response data', e);\n      }\n    });\n  }\n\n  async read(url: string): Promise<Buffer> {\n    const response = await this.readUrl(url);\n    return response.buffer();\n  }\n\n  async readUrl(\n    url: string,\n    options?: UrlReaderServiceReadUrlOptions,\n  ): Promise<UrlReaderServiceReadUrlResponse> {\n    const { etag, lastModifiedAfter } = options ?? {};\n\n    try {\n      const { path, bucket, region } = parseUrl(url, this.integration.config);\n      const s3Client = await this.buildS3Client(\n        this.credsManager,\n        region,\n        this.integration,\n      );\n      const abortController = new AbortController();\n\n      const params: GetObjectCommandInput = {\n        Bucket: bucket,\n        Key: path,\n        ...(etag && { IfNoneMatch: etag }),\n        ...(lastModifiedAfter && {\n          IfModifiedSince: lastModifiedAfter,\n        }),\n      };\n\n      options?.signal?.addEventListener('abort', () => abortController.abort());\n      const getObjectCommand = new GetObjectCommand(params);\n      const response = await s3Client.send(getObjectCommand, {\n        abortSignal: abortController.signal,\n      });\n\n      const s3ObjectData = await this.retrieveS3ObjectData(\n        response.Body as Readable,\n      );\n\n      return ReadUrlResponseFactory.fromReadable(s3ObjectData, {\n        etag: response.ETag,\n        lastModifiedAt: response.LastModified,\n      });\n    } catch (e) {\n      if (e.$metadata && e.$metadata.httpStatusCode === 304) {\n        throw new NotModifiedError();\n      }\n\n      throw new ForwardedError('Could not retrieve file from S3', e);\n    }\n  }\n\n  async readTree(\n    url: string,\n    options?: UrlReaderServiceReadTreeOptions,\n  ): Promise<UrlReaderServiceReadTreeResponse> {\n    try {\n      const { path, bucket, region } = parseUrl(url, this.integration.config);\n      const s3Client = await this.buildS3Client(\n        this.credsManager,\n        region,\n        this.integration,\n      );\n      const abortController = new AbortController();\n      const allObjects: String[] = [];\n      const responses = [];\n      let continuationToken: string | undefined;\n      let output: ListObjectsV2CommandOutput;\n      do {\n        const listObjectsV2Command = new ListObjectsV2Command({\n          Bucket: bucket,\n          ContinuationToken: continuationToken,\n          Prefix: path,\n        });\n        options?.signal?.addEventListener('abort', () =>\n          abortController.abort(),\n        );\n        output = await s3Client.send(listObjectsV2Command, {\n          abortSignal: abortController.signal,\n        });\n        if (output.Contents) {\n          output.Contents.forEach(contents => {\n            allObjects.push(contents.Key!);\n          });\n        }\n        continuationToken = output.NextContinuationToken;\n      } while (continuationToken);\n\n      for (let i = 0; i < allObjects.length; i++) {\n        const getObjectCommand = new GetObjectCommand({\n          Bucket: bucket,\n          Key: String(allObjects[i]),\n        });\n        const response = await s3Client.send(getObjectCommand);\n        const s3ObjectData = await this.retrieveS3ObjectData(\n          response.Body as Readable,\n        );\n\n        responses.push({\n          data: s3ObjectData,\n          path: relative(path, String(allObjects[i])),\n          lastModifiedAt: response?.LastModified ?? undefined,\n        });\n      }\n\n      return await this.deps.treeResponseFactory.fromReadableArray(responses);\n    } catch (e) {\n      throw new ForwardedError('Could not retrieve file tree from S3', e);\n    }\n  }\n\n  async search(): Promise<UrlReaderServiceSearchResponse> {\n    throw new Error('AwsS3Reader does not implement search');\n  }\n\n  toString() {\n    const secretAccessKey = this.integration.config.secretAccessKey;\n    return `awsS3{host=${this.integration.config.host},authed=${Boolean(\n      secretAccessKey,\n    )}}`;\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  UrlReaderService,\n  UrlReaderServiceReadTreeResponse,\n  UrlReaderServiceReadUrlOptions,\n  UrlReaderServiceReadUrlResponse,\n  UrlReaderServiceSearchResponse,\n} from '@backstage/backend-plugin-api';\nimport { NotFoundError, NotModifiedError } from '@backstage/errors';\nimport fetch, { Response } from 'node-fetch';\nimport { ReaderFactory } from './types';\nimport path from 'path';\nimport { ReadUrlResponseFactory } from './ReadUrlResponseFactory';\nimport { parseLastModified } from './util';\n\nconst isInRange = (num: number, [start, end]: [number, number]) => {\n  return num >= start && num <= end;\n};\n\nconst parsePortRange = (port: string): [number, number] => {\n  const isRange = port.includes('-');\n  if (isRange) {\n    const range = port\n      .split('-')\n      .map(v => parseInt(v, 10))\n      .filter(Boolean) as [number, number];\n    if (range.length !== 2) throw new Error(`Port range is not valid: ${port}`);\n    const [start, end] = range;\n    if (start <= 0 || end <= 0 || start > end)\n      throw new Error(`Port range is not valid: [${start}, ${end}]`);\n    return range;\n  }\n  const parsedPort = parseInt(port, 10);\n  return [parsedPort, parsedPort];\n};\n\nconst parsePortPredicate = (port: string | undefined) => {\n  if (port) {\n    const range = parsePortRange(port);\n    return (url: URL) => {\n      if (url.port) return isInRange(parseInt(url.port, 10), range);\n\n      if (url.protocol === 'http:') return isInRange(80, range);\n      if (url.protocol === 'https:') return isInRange(443, range);\n      return false;\n    };\n  }\n  return (url: URL) => !url.port;\n};\n\n/**\n * A {@link @backstage/backend-plugin-api#UrlReaderService} that does a plain fetch of the URL.\n *\n * @public\n */\nexport class FetchUrlReader implements UrlReaderService {\n  /**\n   * The factory creates a single reader that will be used for reading any URL that's listed\n   * in configuration at `backend.reading.allow`. The allow list contains a list of objects describing\n   * targets to allow, containing the following fields:\n   *\n   * `host`:\n   *   Either full hostnames to match, or subdomain wildcard matchers with a leading '*'.\n   *   For example 'example.com' and '*.example.com' are valid values, 'prod.*.example.com' is not.\n   *\n   * `paths`:\n   *   An optional list of paths which are allowed. If the list is omitted all paths are allowed.\n   */\n  static factory: ReaderFactory = ({ config }) => {\n    const predicates =\n      config\n        .getOptionalConfigArray('backend.reading.allow')\n        ?.map(allowConfig => {\n          const paths = allowConfig.getOptionalStringArray('paths');\n          const checkPath = paths\n            ? (url: URL) => {\n                const targetPath = path.posix.normalize(url.pathname);\n                return paths.some(allowedPath =>\n                  targetPath.startsWith(allowedPath),\n                );\n              }\n            : (_url: URL) => true;\n          const host = allowConfig.getString('host');\n          const [hostname, port] = host.split(':');\n\n          const checkPort = parsePortPredicate(port);\n\n          if (hostname.startsWith('*.')) {\n            const suffix = hostname.slice(1);\n            return (url: URL) =>\n              url.hostname.endsWith(suffix) && checkPath(url) && checkPort(url);\n          }\n          return (url: URL) =>\n            url.hostname === hostname && checkPath(url) && checkPort(url);\n        }) ?? [];\n\n    const reader = new FetchUrlReader();\n    const predicate = (url: URL) => predicates.some(p => p(url));\n    return [{ reader, predicate }];\n  };\n\n  async read(url: string): Promise<Buffer> {\n    const response = await this.readUrl(url);\n    return response.buffer();\n  }\n\n  async readUrl(\n    url: string,\n    options?: UrlReaderServiceReadUrlOptions,\n  ): Promise<UrlReaderServiceReadUrlResponse> {\n    let response: Response;\n    try {\n      response = await fetch(url, {\n        headers: {\n          ...(options?.etag && { 'If-None-Match': options.etag }),\n          ...(options?.lastModifiedAfter && {\n            'If-Modified-Since': options.lastModifiedAfter.toUTCString(),\n          }),\n          ...(options?.token && { Authorization: `Bearer ${options.token}` }),\n        },\n        // TODO(freben): The signal cast is there because pre-3.x versions of\n        // node-fetch have a very slightly deviating AbortSignal type signature.\n        // The difference does not affect us in practice however. The cast can\n        // be removed after we support ESM for CLI dependencies and migrate to\n        // version 3 of node-fetch.\n        // https://github.com/backstage/backstage/issues/8242\n        signal: options?.signal as any,\n      });\n    } catch (e) {\n      throw new Error(`Unable to read ${url}, ${e}`);\n    }\n\n    if (response.status === 304) {\n      throw new NotModifiedError();\n    }\n\n    if (response.ok) {\n      return ReadUrlResponseFactory.fromNodeJSReadable(response.body, {\n        etag: response.headers.get('ETag') ?? undefined,\n        lastModifiedAt: parseLastModified(\n          response.headers.get('Last-Modified'),\n        ),\n      });\n    }\n\n    const message = `could not read ${url}, ${response.status} ${response.statusText}`;\n    if (response.status === 404) {\n      throw new NotFoundError(message);\n    }\n    throw new Error(message);\n  }\n\n  async readTree(): Promise<UrlReaderServiceReadTreeResponse> {\n    throw new Error('FetchUrlReader does not implement readTree');\n  }\n\n  async search(): Promise<UrlReaderServiceSearchResponse> {\n    throw new Error('FetchUrlReader does not implement search');\n  }\n\n  toString() {\n    return 'fetch{}';\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  UrlReaderServiceReadTreeOptions,\n  UrlReaderServiceReadTreeResponse,\n  UrlReaderServiceReadUrlOptions,\n  UrlReaderServiceReadUrlResponse,\n  UrlReaderServiceSearchOptions,\n  UrlReaderServiceSearchResponse,\n  UrlReaderService,\n} from '@backstage/backend-plugin-api';\nimport { NotAllowedError } from '@backstage/errors';\nimport { UrlReaderPredicateTuple } from './types';\n\nfunction notAllowedMessage(url: string) {\n  return (\n    `Reading from '${url}' is not allowed. ` +\n    `You may need to configure an integration for the target host, or add it ` +\n    `to the configured list of allowed hosts at 'backend.reading.allow'`\n  );\n}\n\n/**\n * A UrlReaderService implementation that selects from a set of readers\n * based on a predicate tied to each reader.\n */\nexport class UrlReaderPredicateMux implements UrlReaderService {\n  private readonly readers: UrlReaderPredicateTuple[] = [];\n\n  register(tuple: UrlReaderPredicateTuple): void {\n    this.readers.push(tuple);\n  }\n\n  async readUrl(\n    url: string,\n    options?: UrlReaderServiceReadUrlOptions,\n  ): Promise<UrlReaderServiceReadUrlResponse> {\n    const parsed = new URL(url);\n\n    for (const { predicate, reader } of this.readers) {\n      if (predicate(parsed)) {\n        return reader.readUrl(url, options);\n      }\n    }\n\n    throw new NotAllowedError(notAllowedMessage(url));\n  }\n\n  async readTree(\n    url: string,\n    options?: UrlReaderServiceReadTreeOptions,\n  ): Promise<UrlReaderServiceReadTreeResponse> {\n    const parsed = new URL(url);\n\n    for (const { predicate, reader } of this.readers) {\n      if (predicate(parsed)) {\n        return await reader.readTree(url, options);\n      }\n    }\n\n    throw new NotAllowedError(notAllowedMessage(url));\n  }\n\n  async search(\n    url: string,\n    options?: UrlReaderServiceSearchOptions,\n  ): Promise<UrlReaderServiceSearchResponse> {\n    const parsed = new URL(url);\n\n    for (const { predicate, reader } of this.readers) {\n      if (predicate(parsed)) {\n        return await reader.search(url, options);\n      }\n    }\n\n    throw new NotAllowedError(notAllowedMessage(url));\n  }\n\n  toString() {\n    return `predicateMux{readers=${this.readers.map(t => t.reader).join(',')}`;\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Readable, pipeline as pipelineCb } from 'stream';\nimport { promisify } from 'util';\nimport concatStream from 'concat-stream';\n\nconst pipeline = promisify(pipelineCb);\n\n// Matches a directory name + one `/` at the start of any string,\n// containing any character except `/` one or more times, and ending with a `/`\n// e.g. Will match `dirA/` in `dirA/dirB/file.ext`\nconst directoryNameRegex = /^[^\\/]+\\//;\n// Removes the first segment of a forward-slash-separated path\nexport function stripFirstDirectoryFromPath(path: string): string {\n  return path.replace(directoryNameRegex, '');\n}\n\n// Collect the stream into a buffer and return\nexport const streamToBuffer = (stream: Readable): Promise<Buffer> => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      await pipeline(stream, concatStream(resolve));\n    } catch (ex) {\n      reject(ex);\n    }\n  });\n};\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  UrlReaderServiceReadTreeResponse,\n  UrlReaderServiceReadTreeResponseDirOptions,\n  UrlReaderServiceReadTreeResponseFile,\n} from '@backstage/backend-plugin-api';\nimport concatStream from 'concat-stream';\nimport fs from 'fs-extra';\nimport platformPath from 'path';\nimport { pipeline as pipelineCb, Readable } from 'stream';\nimport tar, { Parse, ParseStream, ReadEntry } from 'tar';\nimport { promisify } from 'util';\nimport { stripFirstDirectoryFromPath } from './util';\n\n// Tar types for `Parse` is not a proper constructor, but it should be\nconst TarParseStream = Parse as unknown as { new (): ParseStream };\n\nconst pipeline = promisify(pipelineCb);\n\n/**\n * Wraps a tar archive stream into a tree response reader.\n */\nexport class TarArchiveResponse implements UrlReaderServiceReadTreeResponse {\n  private read = false;\n\n  constructor(\n    private readonly stream: Readable,\n    private readonly subPath: string,\n    private readonly workDir: string,\n    public readonly etag: string,\n    private readonly filter?: (path: string, info: { size: number }) => boolean,\n    private readonly stripFirstDirectory: boolean = true,\n  ) {\n    if (subPath) {\n      if (!subPath.endsWith('/')) {\n        this.subPath += '/';\n      }\n      if (subPath.startsWith('/')) {\n        throw new TypeError(\n          `TarArchiveResponse subPath must not start with a /, got '${subPath}'`,\n        );\n      }\n    }\n\n    this.etag = etag;\n  }\n\n  // Make sure the input stream is only read once\n  private onlyOnce() {\n    if (this.read) {\n      throw new Error('Response has already been read');\n    }\n    this.read = true;\n  }\n\n  async files(): Promise<UrlReaderServiceReadTreeResponseFile[]> {\n    this.onlyOnce();\n\n    const files = Array<UrlReaderServiceReadTreeResponseFile>();\n    const parser = new TarParseStream();\n\n    parser.on('entry', (entry: ReadEntry & Readable) => {\n      if (entry.type === 'Directory') {\n        entry.resume();\n        return;\n      }\n\n      // File path relative to the root extracted directory. Will remove the\n      // top level dir name from the path since its name is hard to predetermine.\n      const relativePath = this.stripFirstDirectory\n        ? stripFirstDirectoryFromPath(entry.path)\n        : entry.path;\n\n      if (this.subPath) {\n        if (!relativePath.startsWith(this.subPath)) {\n          entry.resume();\n          return;\n        }\n      }\n\n      const path = relativePath.slice(this.subPath.length);\n      if (this.filter) {\n        if (!this.filter(path, { size: entry.remain })) {\n          entry.resume();\n          return;\n        }\n      }\n\n      const content = new Promise<Buffer>(async resolve => {\n        await pipeline(entry, concatStream(resolve));\n      });\n\n      files.push({\n        path,\n        content: () => content,\n      });\n\n      entry.resume();\n    });\n\n    await pipeline(this.stream, parser);\n\n    return files;\n  }\n\n  async archive(): Promise<Readable> {\n    if (!this.subPath) {\n      this.onlyOnce();\n\n      return this.stream;\n    }\n\n    // TODO(Rugvip): method for repacking a tar with a subpath is to simply extract into a\n    //               tmp dir and recreate the archive. Would be nicer to stream things instead.\n    const tmpDir = await this.dir();\n\n    try {\n      const data = await new Promise<Buffer>(async resolve => {\n        await pipeline(\n          tar.create({ cwd: tmpDir }, ['']),\n          concatStream(resolve),\n        );\n      });\n      return Readable.from(data);\n    } finally {\n      await fs.remove(tmpDir);\n    }\n  }\n\n  async dir(\n    options?: UrlReaderServiceReadTreeResponseDirOptions,\n  ): Promise<string> {\n    this.onlyOnce();\n\n    const dir =\n      options?.targetDir ??\n      (await fs.mkdtemp(platformPath.join(this.workDir, 'backstage-')));\n\n    // Equivalent of tar --strip-components=N\n    // When no subPath is given, remove just 1 top level directory\n    let strip = this.subPath ? this.subPath.split('/').length : 1;\n    if (!this.stripFirstDirectory) {\n      strip--;\n    }\n\n    let filterError: Error | undefined = undefined;\n    await pipeline(\n      this.stream,\n      tar.extract({\n        strip,\n        cwd: dir,\n        filter: (path, stat) => {\n          // Filter errors will short-circuit the rest of the filtering and then throw\n          if (filterError) {\n            return false;\n          }\n\n          // File path relative to the root extracted directory. Will remove the\n          // top level dir name from the path since its name is hard to predetermine.\n          const relativePath = this.stripFirstDirectory\n            ? stripFirstDirectoryFromPath(path)\n            : path;\n          if (this.subPath && !relativePath.startsWith(this.subPath)) {\n            return false;\n          }\n          if (this.filter) {\n            const innerPath = path.split('/').slice(strip).join('/');\n            try {\n              return this.filter(innerPath, { size: stat.size });\n            } catch (error) {\n              filterError = error;\n              return false;\n            }\n          }\n          return true;\n        },\n      }),\n    );\n\n    if (filterError) {\n      // If the dir was provided we don't want to remove it, but if it wasn't it means\n      // we created a temporary directory and we should remove it.\n      if (!options?.targetDir) {\n        await fs.remove(dir).catch(() => {});\n      }\n      throw filterError;\n    }\n\n    return dir;\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  UrlReaderServiceReadTreeResponse,\n  UrlReaderServiceReadTreeResponseDirOptions,\n  UrlReaderServiceReadTreeResponseFile,\n} from '@backstage/backend-plugin-api';\nimport archiver from 'archiver';\nimport yauzl, { Entry } from 'yauzl';\nimport fs from 'fs-extra';\nimport platformPath from 'path';\nimport { Readable } from 'stream';\nimport { streamToBuffer } from './util';\nimport { resolveSafeChildPath } from '@backstage/backend-plugin-api';\n\n/**\n * Wraps a zip archive stream into a tree response reader.\n */\nexport class ZipArchiveResponse implements UrlReaderServiceReadTreeResponse {\n  private read = false;\n\n  constructor(\n    private readonly stream: Readable,\n    private readonly subPath: string,\n    private readonly workDir: string,\n    public readonly etag: string,\n    private readonly filter?: (path: string, info: { size: number }) => boolean,\n  ) {\n    if (subPath) {\n      if (!subPath.endsWith('/')) {\n        this.subPath += '/';\n      }\n      if (subPath.startsWith('/')) {\n        throw new TypeError(\n          `ZipArchiveResponse subPath must not start with a /, got '${subPath}'`,\n        );\n      }\n    }\n\n    this.etag = etag;\n  }\n\n  // Make sure the input stream is only read once\n  private onlyOnce() {\n    if (this.read) {\n      throw new Error('Response has already been read');\n    }\n    this.read = true;\n  }\n\n  // File path relative to the root extracted directory or a sub directory if subpath is set.\n  private getInnerPath(path: string): string {\n    return path.slice(this.subPath.length);\n  }\n\n  private shouldBeIncluded(entry: Entry): boolean {\n    if (this.subPath) {\n      if (!entry.fileName.startsWith(this.subPath)) {\n        return false;\n      }\n    }\n    if (this.filter) {\n      return this.filter(this.getInnerPath(entry.fileName), {\n        size: entry.uncompressedSize,\n      });\n    }\n    return true;\n  }\n\n  private async streamToTemporaryFile(\n    stream: Readable,\n  ): Promise<{ fileName: string; cleanup: () => Promise<void> }> {\n    const tmpDir = await fs.mkdtemp(\n      platformPath.join(this.workDir, 'backstage-tmp'),\n    );\n    const tmpFile = platformPath.join(tmpDir, 'tmp.zip');\n\n    const writeStream = fs.createWriteStream(tmpFile);\n\n    return new Promise((resolve, reject) => {\n      writeStream.on('error', reject);\n      writeStream.on('finish', () => {\n        writeStream.end();\n        resolve({\n          fileName: tmpFile,\n          cleanup: () => fs.rm(tmpDir, { recursive: true }),\n        });\n      });\n      stream.pipe(writeStream);\n    });\n  }\n\n  private forEveryZipEntry(\n    zip: string,\n    callback: (entry: Entry, content: Readable) => Promise<void>,\n  ): Promise<void> {\n    return new Promise((resolve, reject) => {\n      yauzl.open(zip, { lazyEntries: true }, (err, zipfile) => {\n        if (err || !zipfile) {\n          reject(err || new Error(`Failed to open zip file ${zip}`));\n          return;\n        }\n\n        zipfile.on('entry', async (entry: Entry) => {\n          // Check that the file is not a directory, and that is matches the filter.\n          if (!entry.fileName.endsWith('/') && this.shouldBeIncluded(entry)) {\n            zipfile.openReadStream(entry, async (openErr, readStream) => {\n              if (openErr || !readStream) {\n                reject(\n                  openErr ||\n                    new Error(`Failed to open zip entry ${entry.fileName}`),\n                );\n                return;\n              }\n\n              await callback(entry, readStream);\n              zipfile.readEntry();\n            });\n          } else {\n            zipfile.readEntry();\n          }\n        });\n        zipfile.once('end', () => resolve());\n        zipfile.on('error', e => reject(e));\n        zipfile.readEntry();\n      });\n    });\n  }\n\n  async files(): Promise<UrlReaderServiceReadTreeResponseFile[]> {\n    this.onlyOnce();\n    const files = Array<UrlReaderServiceReadTreeResponseFile>();\n    const temporary = await this.streamToTemporaryFile(this.stream);\n\n    await this.forEveryZipEntry(temporary.fileName, async (entry, content) => {\n      files.push({\n        path: this.getInnerPath(entry.fileName),\n        content: async () => await streamToBuffer(content),\n        lastModifiedAt: entry.lastModFileTime\n          ? new Date(entry.lastModFileTime)\n          : undefined,\n      });\n    });\n\n    await temporary.cleanup();\n\n    return files;\n  }\n\n  async archive(): Promise<Readable> {\n    this.onlyOnce();\n\n    if (!this.subPath) {\n      return this.stream;\n    }\n\n    const archive = archiver('zip');\n    const temporary = await this.streamToTemporaryFile(this.stream);\n\n    await this.forEveryZipEntry(temporary.fileName, async (entry, content) => {\n      archive.append(await streamToBuffer(content), {\n        name: this.getInnerPath(entry.fileName),\n      });\n    });\n\n    archive.finalize();\n\n    await temporary.cleanup();\n\n    return archive;\n  }\n\n  async dir(\n    options?: UrlReaderServiceReadTreeResponseDirOptions,\n  ): Promise<string> {\n    this.onlyOnce();\n    const dir =\n      options?.targetDir ??\n      (await fs.mkdtemp(platformPath.join(this.workDir, 'backstage-')));\n\n    const temporary = await this.streamToTemporaryFile(this.stream);\n\n    await this.forEveryZipEntry(temporary.fileName, async (entry, content) => {\n      const entryPath = this.getInnerPath(entry.fileName);\n      const dirname = platformPath.dirname(entryPath);\n\n      if (dirname) {\n        await fs.mkdirp(resolveSafeChildPath(dir, dirname));\n      }\n      return new Promise(async (resolve, reject) => {\n        const file = fs.createWriteStream(resolveSafeChildPath(dir, entryPath));\n        file.on('finish', resolve);\n\n        content.on('error', reject);\n        content.pipe(file);\n      });\n    });\n\n    await temporary.cleanup();\n\n    return dir;\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  UrlReaderServiceReadTreeResponse,\n  UrlReaderServiceReadTreeResponseDirOptions,\n  UrlReaderServiceReadTreeResponseFile,\n} from '@backstage/backend-plugin-api';\nimport concatStream from 'concat-stream';\nimport platformPath, { dirname } from 'path';\nimport getRawBody from 'raw-body';\nimport fs from 'fs-extra';\nimport { promisify } from 'util';\nimport tar from 'tar';\nimport { pipeline as pipelineCb, Readable } from 'stream';\nimport { FromReadableArrayOptions } from '../types';\n\nconst pipeline = promisify(pipelineCb);\n\n/**\n * Wraps a array of Readable objects into a tree response reader.\n */\nexport class ReadableArrayResponse implements UrlReaderServiceReadTreeResponse {\n  private read = false;\n\n  constructor(\n    private readonly stream: FromReadableArrayOptions,\n    private readonly workDir: string,\n    public readonly etag: string,\n  ) {\n    this.etag = etag;\n  }\n\n  // Make sure the input stream is only read once\n  private onlyOnce() {\n    if (this.read) {\n      throw new Error('Response has already been read');\n    }\n    this.read = true;\n  }\n\n  async files(): Promise<UrlReaderServiceReadTreeResponseFile[]> {\n    this.onlyOnce();\n\n    const files = Array<UrlReaderServiceReadTreeResponseFile>();\n\n    for (let i = 0; i < this.stream.length; i++) {\n      if (!this.stream[i].path.endsWith('/')) {\n        files.push({\n          path: this.stream[i].path,\n          content: () => getRawBody(this.stream[i].data),\n          lastModifiedAt: this.stream[i]?.lastModifiedAt,\n        });\n      }\n    }\n\n    return files;\n  }\n\n  async archive(): Promise<NodeJS.ReadableStream> {\n    const tmpDir = await this.dir();\n\n    try {\n      const data = await new Promise<Buffer>(async resolve => {\n        await pipeline(\n          tar.create({ cwd: tmpDir }, ['']),\n          concatStream(resolve),\n        );\n      });\n      return Readable.from(data);\n    } finally {\n      await fs.remove(tmpDir);\n    }\n  }\n\n  async dir(\n    options?: UrlReaderServiceReadTreeResponseDirOptions,\n  ): Promise<string> {\n    this.onlyOnce();\n\n    const dir =\n      options?.targetDir ??\n      (await fs.mkdtemp(platformPath.join(this.workDir, 'backstage-')));\n\n    for (let i = 0; i < this.stream.length; i++) {\n      if (!this.stream[i].path.endsWith('/')) {\n        const filePath = platformPath.join(dir, this.stream[i].path);\n        await fs.mkdir(dirname(filePath), { recursive: true });\n        await pipeline(this.stream[i].data, fs.createWriteStream(filePath));\n      }\n    }\n\n    return dir;\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport os from 'os';\nimport { Config } from '@backstage/config';\nimport {\n  ReadTreeResponseFactoryOptions,\n  ReadTreeResponseFactory,\n  FromReadableArrayOptions,\n} from '../types';\nimport { TarArchiveResponse } from './TarArchiveResponse';\nimport { ZipArchiveResponse } from './ZipArchiveResponse';\nimport { ReadableArrayResponse } from './ReadableArrayResponse';\nimport { UrlReaderServiceReadTreeResponse } from '@backstage/backend-plugin-api';\n\nexport class DefaultReadTreeResponseFactory implements ReadTreeResponseFactory {\n  static create(options: { config: Config }): DefaultReadTreeResponseFactory {\n    return new DefaultReadTreeResponseFactory(\n      options.config.getOptionalString('backend.workingDirectory') ??\n        os.tmpdir(),\n    );\n  }\n\n  constructor(private readonly workDir: string) {}\n\n  async fromTarArchive(\n    options: ReadTreeResponseFactoryOptions & {\n      stripFirstDirectory?: boolean;\n    },\n  ): Promise<UrlReaderServiceReadTreeResponse> {\n    return new TarArchiveResponse(\n      options.stream,\n      options.subpath ?? '',\n      this.workDir,\n      options.etag,\n      options.filter,\n      options.stripFirstDirectory ?? true,\n    );\n  }\n\n  async fromZipArchive(\n    options: ReadTreeResponseFactoryOptions,\n  ): Promise<UrlReaderServiceReadTreeResponse> {\n    return new ZipArchiveResponse(\n      options.stream,\n      options.subpath ?? '',\n      this.workDir,\n      options.etag,\n      options.filter,\n    );\n  }\n\n  async fromReadableArray(\n    options: FromReadableArrayOptions,\n  ): Promise<UrlReaderServiceReadTreeResponse> {\n    return new ReadableArrayResponse(options, this.workDir, '');\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as GoogleCloud from '@google-cloud/storage';\nimport {\n  UrlReaderService,\n  UrlReaderServiceReadTreeResponse,\n  UrlReaderServiceReadUrlOptions,\n  UrlReaderServiceReadUrlResponse,\n  UrlReaderServiceSearchResponse,\n} from '@backstage/backend-plugin-api';\nimport { ReaderFactory } from './types';\nimport getRawBody from 'raw-body';\nimport {\n  GoogleGcsIntegrationConfig,\n  readGoogleGcsIntegrationConfig,\n} from '@backstage/integration';\nimport { Readable } from 'stream';\nimport { ReadUrlResponseFactory } from './ReadUrlResponseFactory';\nimport packageinfo from '../../../../package.json';\n\nconst GOOGLE_GCS_HOST = 'storage.cloud.google.com';\n\nconst parseURL = (\n  url: string,\n): { host: string; bucket: string; key: string } => {\n  const { host, pathname } = new URL(url);\n\n  if (host !== GOOGLE_GCS_HOST) {\n    throw new Error(`not a valid GCS URL: ${url}`);\n  }\n\n  const [, bucket, ...key] = pathname.split('/');\n  return {\n    host: host,\n    bucket,\n    key: key.join('/'),\n  };\n};\n\n/**\n * Implements a {@link @backstage/backend-plugin-api#UrlReaderService} for files on Google GCS.\n *\n * @public\n */\nexport class GoogleGcsUrlReader implements UrlReaderService {\n  static factory: ReaderFactory = ({ config, logger }) => {\n    if (!config.has('integrations.googleGcs')) {\n      return [];\n    }\n    const gcsConfig = readGoogleGcsIntegrationConfig(\n      config.getConfig('integrations.googleGcs'),\n    );\n    let storage: GoogleCloud.Storage;\n    if (!gcsConfig.clientEmail || !gcsConfig.privateKey) {\n      logger.info(\n        'googleGcs credentials not found in config. Using default credentials provider.',\n      );\n      storage = new GoogleCloud.Storage({\n        userAgent: `backstage/backend-defaults.GoogleGcsUrlReader/${packageinfo.version}`,\n      });\n    } else {\n      storage = new GoogleCloud.Storage({\n        credentials: {\n          client_email: gcsConfig.clientEmail || undefined,\n          private_key: gcsConfig.privateKey || undefined,\n        },\n        userAgent: `backstage/backend-defaults.GoogleGcsUrlReader/${packageinfo.version}`,\n      });\n    }\n    const reader = new GoogleGcsUrlReader(gcsConfig, storage);\n    const predicate = (url: URL) => url.host === GOOGLE_GCS_HOST;\n    return [{ reader, predicate }];\n  };\n\n  constructor(\n    private readonly integration: GoogleGcsIntegrationConfig,\n    private readonly storage: GoogleCloud.Storage,\n  ) {}\n\n  private readStreamFromUrl(url: string): Readable {\n    const { bucket, key } = parseURL(url);\n    return this.storage.bucket(bucket).file(key).createReadStream();\n  }\n\n  async read(url: string): Promise<Buffer> {\n    try {\n      return await getRawBody(this.readStreamFromUrl(url));\n    } catch (error) {\n      throw new Error(`unable to read gcs file from ${url}, ${error}`);\n    }\n  }\n\n  async readUrl(\n    url: string,\n    _options?: UrlReaderServiceReadUrlOptions,\n  ): Promise<UrlReaderServiceReadUrlResponse> {\n    // TODO etag is not implemented yet.\n    const stream = this.readStreamFromUrl(url);\n    return ReadUrlResponseFactory.fromReadable(stream);\n  }\n\n  async readTree(): Promise<UrlReaderServiceReadTreeResponse> {\n    throw new Error('GcsUrlReader does not implement readTree');\n  }\n\n  async search(url: string): Promise<UrlReaderServiceSearchResponse> {\n    const { bucket, key: pattern } = parseURL(url);\n\n    if (!pattern.endsWith('*') || pattern.indexOf('*') !== pattern.length - 1) {\n      throw new Error('GcsUrlReader only supports prefix-based searches');\n    }\n\n    const [files] = await this.storage.bucket(bucket).getFiles({\n      autoPaginate: true,\n      prefix: pattern.split('*').join(''),\n    });\n\n    return {\n      files: files.map(file => {\n        const fullUrl = ['https:/', GOOGLE_GCS_HOST, bucket, file.name].join(\n          '/',\n        );\n        return {\n          url: fullUrl,\n          content: async () => {\n            const readResponse = await this.readUrl(fullUrl);\n            return readResponse.buffer();\n          },\n        };\n      }),\n      // TODO etag is not implemented yet.\n      etag: 'NOT/IMPLEMENTED',\n    };\n  }\n\n  toString() {\n    const key = this.integration.privateKey;\n    return `googleGcs{host=${GOOGLE_GCS_HOST},authed=${Boolean(key)}}`;\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ReaderFactory, ReadTreeResponseFactory } from './types';\nimport {\n  UrlReaderService,\n  UrlReaderServiceReadTreeOptions,\n  UrlReaderServiceReadTreeResponse,\n  UrlReaderServiceReadUrlOptions,\n  UrlReaderServiceReadUrlResponse,\n  UrlReaderServiceSearchResponse,\n} from '@backstage/backend-plugin-api';\nimport {\n  AwsCredentialsManager,\n  DefaultAwsCredentialsManager,\n} from '@backstage/integration-aws-node';\nimport {\n  AwsCodeCommitIntegration,\n  ScmIntegrations,\n} from '@backstage/integration';\nimport { ForwardedError, NotModifiedError } from '@backstage/errors';\nimport { fromTemporaryCredentials } from '@aws-sdk/credential-providers';\nimport {\n  CodeCommitClient,\n  GetFileCommand,\n  GetFileCommandInput,\n  GetFileCommandOutput,\n  GetFolderCommand,\n} from '@aws-sdk/client-codecommit';\nimport { AwsCredentialIdentityProvider } from '@aws-sdk/types';\nimport { Readable } from 'stream';\nimport { ReadUrlResponseFactory } from './ReadUrlResponseFactory';\nimport { relative } from 'path/posix';\nimport { AbortController } from '@aws-sdk/abort-controller';\n\nexport function parseUrl(\n  url: string,\n  requireGitPath: boolean = false,\n): {\n  path: string;\n  repositoryName: string;\n  region: string;\n  commitSpecifier?: string;\n} {\n  const parsedUrl = new URL(url);\n\n  if (parsedUrl.pathname.includes('/files/edit/')) {\n    throw new Error(\n      'Please provide the view url to yaml file from CodeCommit, not the edit url',\n    );\n  }\n  if (requireGitPath && !parsedUrl.pathname.includes('/browse/')) {\n    throw new Error('Please provide full path to yaml file from CodeCommit');\n  }\n\n  const hostMatch = parsedUrl.host.match(\n    /^([^\\.]+)\\.console\\.aws\\.amazon\\.com$/,\n  );\n  if (!hostMatch) {\n    throw new Error(\n      `Invalid AWS CodeCommit URL (unexpected host format): ${url}`,\n    );\n  }\n  const [, region] = hostMatch;\n\n  const pathMatch = parsedUrl.pathname.match(\n    /^\\/codesuite\\/codecommit\\/repositories\\/([^\\/]+)\\/browse\\/((.*)\\/)?--\\/(.*)$/,\n  );\n\n  if (!pathMatch) {\n    if (!requireGitPath) {\n      const pathname = parsedUrl.pathname\n        .split('/--/')[0]\n        .replace('/codesuite/codecommit/repositories/', '');\n      const [repositoryName, commitSpecifier] = pathname.split('/browse');\n\n      return {\n        region,\n        repositoryName: repositoryName.replace(/^\\/|\\/$/g, ''),\n        path: '/',\n        commitSpecifier:\n          commitSpecifier === ''\n            ? undefined\n            : commitSpecifier?.replace(/^\\/|\\/$/g, ''),\n      };\n    }\n    throw new Error(\n      `Invalid AWS CodeCommit URL (unexpected path format): ${url}`,\n    );\n  }\n  const [, repositoryName, , commitSpecifier, path] = pathMatch;\n\n  return {\n    region,\n    repositoryName,\n    path,\n    // the commitSpecifier is passed to AWS SDK which does not allow empty strings so replace empty string with undefined\n    commitSpecifier: commitSpecifier === '' ? undefined : commitSpecifier,\n  };\n}\n\n/**\n * Implements a {@link @backstage/backend-plugin-api#UrlReaderService} for AWS CodeCommit.\n *\n * @public\n */\nexport class AwsCodeCommitUrlReader implements UrlReaderService {\n  static factory: ReaderFactory = ({ config, treeResponseFactory }) => {\n    const integrations = ScmIntegrations.fromConfig(config);\n    const credsManager = DefaultAwsCredentialsManager.fromConfig(config);\n\n    return integrations.awsCodeCommit.list().map(integration => {\n      const reader = new AwsCodeCommitUrlReader(credsManager, integration, {\n        treeResponseFactory,\n      });\n      const predicate = (url: URL) => {\n        return (\n          url.host.endsWith(integration.config.host) &&\n          url.pathname.startsWith('/codesuite/codecommit')\n        );\n      };\n\n      return { reader, predicate };\n    });\n  };\n\n  constructor(\n    private readonly credsManager: AwsCredentialsManager,\n    private readonly integration: AwsCodeCommitIntegration,\n    private readonly deps: {\n      treeResponseFactory: ReadTreeResponseFactory;\n    },\n  ) {}\n\n  /**\n   * If accessKeyId and secretAccessKey are missing, the standard credentials provider chain will be used:\n   * https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/auth/DefaultAWSCredentialsProviderChain.html\n   */\n  private static buildStaticCredentials(\n    accessKeyId: string,\n    secretAccessKey: string,\n  ): AwsCredentialIdentityProvider {\n    return async () => {\n      return {\n        accessKeyId,\n        secretAccessKey,\n      };\n    };\n  }\n\n  private static async buildCredentials(\n    credsManager: AwsCredentialsManager,\n    region: string,\n    integration?: AwsCodeCommitIntegration,\n  ): Promise<AwsCredentialIdentityProvider> {\n    // Fall back to the default credential chain if neither account ID\n    // nor explicit credentials are provided\n    if (!integration) {\n      return (await credsManager.getCredentialProvider()).sdkCredentialProvider;\n    }\n\n    const accessKeyId = integration.config.accessKeyId;\n    const secretAccessKey = integration.config.secretAccessKey;\n    let explicitCredentials: AwsCredentialIdentityProvider;\n    if (accessKeyId && secretAccessKey) {\n      explicitCredentials = AwsCodeCommitUrlReader.buildStaticCredentials(\n        accessKeyId,\n        secretAccessKey,\n      );\n    } else {\n      explicitCredentials = (await credsManager.getCredentialProvider())\n        .sdkCredentialProvider;\n    }\n\n    const roleArn = integration.config.roleArn;\n    if (roleArn) {\n      return fromTemporaryCredentials({\n        masterCredentials: explicitCredentials,\n        params: {\n          RoleSessionName: 'backstage-aws-code-commit-url-reader',\n          RoleArn: roleArn,\n          ExternalId: integration.config.externalId,\n        },\n        clientConfig: { region },\n      });\n    }\n\n    return explicitCredentials;\n  }\n\n  private async buildCodeCommitClient(\n    credsManager: AwsCredentialsManager,\n    region: string,\n    integration: AwsCodeCommitIntegration,\n  ): Promise<CodeCommitClient> {\n    const credentials = await AwsCodeCommitUrlReader.buildCredentials(\n      credsManager,\n      region,\n      integration,\n    );\n\n    const codeCommit = new CodeCommitClient({\n      region: region,\n      credentials: credentials,\n    });\n    return codeCommit;\n  }\n\n  async readUrl(\n    url: string,\n    options?: UrlReaderServiceReadUrlOptions,\n  ): Promise<UrlReaderServiceReadUrlResponse> {\n    // etag and lastModifiedAfter are not supported by the CodeCommit API\n    try {\n      const { path, repositoryName, region, commitSpecifier } = parseUrl(\n        url,\n        true,\n      );\n      const codeCommitClient = await this.buildCodeCommitClient(\n        this.credsManager,\n        region,\n        this.integration,\n      );\n      const abortController = new AbortController();\n\n      const input: GetFileCommandInput = {\n        repositoryName: repositoryName,\n        commitSpecifier: commitSpecifier,\n        filePath: path,\n      };\n\n      options?.signal?.addEventListener('abort', () => abortController.abort());\n      const getObjectCommand = new GetFileCommand(input);\n      const response: GetFileCommandOutput = await codeCommitClient.send(\n        getObjectCommand,\n        {\n          abortSignal: abortController.signal,\n        },\n      );\n\n      if (options?.etag && options.etag === response.commitId) {\n        throw new NotModifiedError();\n      }\n\n      return ReadUrlResponseFactory.fromReadable(\n        Readable.from([response?.fileContent] || []),\n        {\n          etag: response.commitId,\n        },\n      );\n    } catch (e) {\n      if (e.$metadata && e.$metadata.httpStatusCode === 304) {\n        throw new NotModifiedError();\n      }\n      if (e.name && e.name === 'NotModifiedError') {\n        throw new NotModifiedError();\n      }\n\n      throw new ForwardedError('Could not retrieve file from CodeCommit', e);\n    }\n  }\n\n  async readTreePath(\n    codeCommitClient: CodeCommitClient,\n    abortSignal: any,\n    path: string,\n    repositoryName: string,\n    commitSpecifier?: string,\n    etag?: string,\n  ): Promise<string[]> {\n    const getFolderCommand = new GetFolderCommand({\n      folderPath: path,\n      repositoryName: repositoryName,\n      commitSpecifier: commitSpecifier,\n    });\n    const response = await codeCommitClient.send(getFolderCommand, {\n      abortSignal: abortSignal,\n    });\n\n    if (etag && etag === response.commitId) {\n      throw new NotModifiedError();\n    }\n\n    const output: string[] = [];\n    if (response.files) {\n      response.files.forEach(file => {\n        if (file.absolutePath) {\n          output.push(file.absolutePath);\n        }\n      });\n    }\n    if (!response.subFolders) {\n      return output;\n    }\n\n    for (const subFolder of response.subFolders) {\n      if (subFolder.absolutePath) {\n        output.push(\n          ...(await this.readTreePath(\n            codeCommitClient,\n            abortSignal,\n            subFolder.absolutePath,\n            repositoryName,\n            commitSpecifier,\n            etag,\n          )),\n        );\n      }\n    }\n    return output;\n  }\n\n  async readTree(\n    url: string,\n    options?: UrlReaderServiceReadTreeOptions,\n  ): Promise<UrlReaderServiceReadTreeResponse> {\n    // url: https://eu-west-1.console.aws.amazon.com/codesuite/codecommit/repositories/test-stijn-delete-techdocs/browse?region=eu-west-1\n    try {\n      const { path, repositoryName, region, commitSpecifier } = parseUrl(url);\n      const codeCommitClient = await this.buildCodeCommitClient(\n        this.credsManager,\n        region,\n        this.integration,\n      );\n\n      const abortController = new AbortController();\n      options?.signal?.addEventListener('abort', () => abortController.abort());\n\n      const allFiles: string[] = await this.readTreePath(\n        codeCommitClient,\n        abortController.signal,\n        path,\n        repositoryName,\n        commitSpecifier,\n        options?.etag,\n      );\n      const responses = [];\n\n      for (let i = 0; i < allFiles.length; i++) {\n        const getFileCommand = new GetFileCommand({\n          repositoryName: repositoryName,\n          filePath: String(allFiles[i]),\n          commitSpecifier: commitSpecifier,\n        });\n        const response = await codeCommitClient.send(getFileCommand);\n        const objectData = await Readable.from([response?.fileContent] || []);\n\n        responses.push({\n          data: objectData,\n          path: relative(\n            path.startsWith('/') ? path : `/${path}`,\n            allFiles[i].startsWith('/') ? allFiles[i] : `/${allFiles[i]}`,\n          ),\n        });\n      }\n\n      return await this.deps.treeResponseFactory.fromReadableArray(responses);\n    } catch (e) {\n      if (e.name && e.name === 'NotModifiedError') {\n        throw new NotModifiedError();\n      }\n      throw new ForwardedError(\n        'Could not retrieve file tree from CodeCommit',\n        e,\n      );\n    }\n  }\n\n  async search(): Promise<UrlReaderServiceSearchResponse> {\n    throw new Error('AwsCodeCommitReader does not implement search');\n  }\n\n  toString() {\n    const secretAccessKey = this.integration.config.secretAccessKey;\n    return `awsCodeCommit{host=${this.integration.config.host},authed=${Boolean(\n      secretAccessKey,\n    )}}`;\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LoggerService, UrlReaderService } from '@backstage/backend-plugin-api';\nimport { Config } from '@backstage/config';\nimport { ReaderFactory } from './types';\nimport { UrlReaderPredicateMux } from './UrlReaderPredicateMux';\nimport { AzureUrlReader } from './AzureUrlReader';\nimport { BitbucketCloudUrlReader } from './BitbucketCloudUrlReader';\nimport { BitbucketServerUrlReader } from './BitbucketServerUrlReader';\nimport { BitbucketUrlReader } from './BitbucketUrlReader';\nimport { GerritUrlReader } from './GerritUrlReader';\nimport { GithubUrlReader } from './GithubUrlReader';\nimport { GitlabUrlReader } from './GitlabUrlReader';\nimport { DefaultReadTreeResponseFactory } from './tree';\nimport { FetchUrlReader } from './FetchUrlReader';\nimport { GoogleGcsUrlReader } from './GoogleGcsUrlReader';\nimport { AwsS3UrlReader } from './AwsS3UrlReader';\nimport { GiteaUrlReader } from './GiteaUrlReader';\nimport { AwsCodeCommitUrlReader } from './AwsCodeCommitUrlReader';\nimport { HarnessUrlReader } from './HarnessUrlReader';\n\n/**\n * Creation options for {@link @backstage/backend-plugin-api#UrlReaderService}.\n *\n * @public\n */\nexport type UrlReadersOptions = {\n  /** Root config object */\n  config: Config;\n  /** Logger used by all the readers */\n  logger: LoggerService;\n  /** A list of factories used to construct individual readers that match on URLs */\n  factories?: ReaderFactory[];\n};\n\n/**\n * Helps construct {@link @backstage/backend-plugin-api#UrlReaderService}s.\n *\n * @public\n */\nexport class UrlReaders {\n  /**\n   * Creates a custom {@link @backstage/backend-plugin-api#UrlReaderService} wrapper for your own set of factories.\n   */\n  static create(options: UrlReadersOptions): UrlReaderService {\n    const { logger, config, factories } = options;\n    const mux = new UrlReaderPredicateMux();\n    const treeResponseFactory = DefaultReadTreeResponseFactory.create({\n      config,\n    });\n    for (const factory of factories ?? []) {\n      const tuples = factory({ config, logger: logger, treeResponseFactory });\n\n      for (const tuple of tuples) {\n        mux.register(tuple);\n      }\n    }\n\n    return mux;\n  }\n\n  /**\n   * Creates a {@link @backstage/backend-plugin-api#UrlReaderService} wrapper that includes all the default factories\n   * from this package.\n   *\n   * Any additional factories passed will be loaded before the default ones.\n   */\n  static default(options: UrlReadersOptions) {\n    const { logger, config, factories = [] } = options;\n    return UrlReaders.create({\n      logger,\n      config,\n      factories: factories.concat([\n        AzureUrlReader.factory,\n        BitbucketCloudUrlReader.factory,\n        BitbucketServerUrlReader.factory,\n        BitbucketUrlReader.factory,\n        GerritUrlReader.factory,\n        GithubUrlReader.factory,\n        GiteaUrlReader.factory,\n        GitlabUrlReader.factory,\n        GoogleGcsUrlReader.factory,\n        HarnessUrlReader.factory,\n        AwsS3UrlReader.factory,\n        AwsCodeCommitUrlReader.factory,\n        FetchUrlReader.factory,\n      ]),\n    });\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Find all active hot module APIs of all ancestors of a module, including the module itself\nfunction findAllAncestors(_module: NodeModule): NodeModule[] {\n  const ancestors = new Array<NodeModule>();\n  const parentIds = new Set<string | number>();\n\n  function add(id: string | number, m: NodeModule) {\n    if (parentIds.has(id)) {\n      return;\n    }\n    parentIds.add(id);\n    ancestors.push(m);\n\n    for (const parentId of (m as any).parents) {\n      const parent = require.cache[parentId];\n      if (parent) {\n        add(parentId, parent);\n      }\n    }\n  }\n\n  add(_module.id, _module);\n\n  return ancestors;\n}\n\n/**\n * useHotCleanup allows cleanup of ongoing effects when a module is\n * hot-reloaded during development. The cleanup function will be called\n * whenever the module itself or any of its parent modules is hot-reloaded.\n *\n * Useful for cleaning intervals, timers, requests etc\n *\n * @public\n * @deprecated Hot module reloading is no longer supported for backends.\n * @example\n * ```ts\n * const intervalId = setInterval(doStuff, 1000);\n * useHotCleanup(module, () => clearInterval(intervalId));\n * ```\n * @param _module - Reference to the current module where you invoke the fn\n * @param cancelEffect - Fn that cleans up the ongoing effects\n */\nexport function useHotCleanup(_module: NodeModule, cancelEffect: () => void) {\n  if (_module.hot) {\n    const ancestors = findAllAncestors(_module);\n    let cancelled = false;\n\n    const handler = () => {\n      if (!cancelled) {\n        cancelled = true;\n        cancelEffect();\n      }\n    };\n\n    for (const m of ancestors) {\n      m.hot?.addDisposeHandler(handler);\n    }\n  }\n}\n\nconst CURRENT_HOT_MEMOIZE_INDEX_KEY = 'backstage.io/hmr-memoize-key';\n\n/**\n * Memoizes a generated value across hot-module reloads. This is useful for\n * stateful parts of the backend, e.g. to retain a database.\n *\n * @public\n * @deprecated Hot module reloading is no longer supported for backends.\n * @example\n * ```ts\n * const db = useHotMemoize(module, () => createDB(dbParams));\n * ```\n *\n * **NOTE:** Do not use inside conditionals or loops,\n * same rules as for hooks apply (https://reactjs.org/docs/hooks-rules.html)\n *\n * @param _module - Reference to the current module where you invoke the fn\n * @param valueFactory - Fn that returns the value you want to memoize\n */\nexport function useHotMemoize<T>(\n  _module: NodeModule,\n  valueFactory: () => T,\n): T {\n  if (!_module.hot) {\n    return valueFactory();\n  }\n\n  // When starting blank, reset the counter\n  if (!_module.hot.data?.[CURRENT_HOT_MEMOIZE_INDEX_KEY]) {\n    for (const ancestor of findAllAncestors(_module)) {\n      ancestor.hot?.addDisposeHandler(data => {\n        data[CURRENT_HOT_MEMOIZE_INDEX_KEY] = 1;\n      });\n    }\n\n    _module.hot.data = {\n      ..._module.hot.data,\n      [CURRENT_HOT_MEMOIZE_INDEX_KEY]: 1,\n    };\n  }\n\n  // Store data per module, based on the order of the code invocation\n  const index = _module.hot.data[CURRENT_HOT_MEMOIZE_INDEX_KEY]++;\n  const value = _module.hot.data[index] ?? valueFactory();\n\n  // Always add a handler that, upon a HMR event, reinstates the value.\n  _module.hot.addDisposeHandler(data => {\n    data[index] = value;\n  });\n\n  return value;\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LoggerService } from '@backstage/backend-plugin-api';\nimport type { Config } from '@backstage/config';\nimport { ConfigSchema, loadConfigSchema } from '@backstage/config-loader';\nimport { getPackages } from '@manypkg/get-packages';\n\n/** @public */\nexport async function createConfigSecretEnumerator(options: {\n  logger: LoggerService;\n  dir?: string;\n  schema?: ConfigSchema;\n}): Promise<(config: Config) => Iterable<string>> {\n  const { logger, dir = process.cwd() } = options;\n  const { packages } = await getPackages(dir);\n  const schema =\n    options.schema ??\n    (await loadConfigSchema({\n      dependencies: packages.map(p => p.packageJson.name),\n    }));\n\n  return (config: Config) => {\n    const [secretsData] = schema.process(\n      [{ data: config.getOptional() ?? {}, context: 'schema-enumerator' }],\n      {\n        visibility: ['secret'],\n        ignoreSchemaErrors: true,\n      },\n    );\n    const secrets = new Set<string>();\n    JSON.parse(\n      JSON.stringify(secretsData.data),\n      (_, v) => typeof v === 'string' && secrets.add(v),\n    );\n    logger.info(\n      `Found ${secrets.size} new secrets in config that will be redacted`,\n    );\n    return secrets;\n  };\n}\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config, ConfigReader } from '@backstage/config';\nimport { JsonValue } from '@backstage/types';\n\nexport class ObservableConfigProxy implements Config {\n  private config: Config = new ConfigReader({});\n\n  private readonly subscribers: (() => void)[] = [];\n\n  constructor(\n    private readonly parent?: ObservableConfigProxy,\n    private parentKey?: string,\n  ) {\n    if (parent && !parentKey) {\n      throw new Error('parentKey is required if parent is set');\n    }\n  }\n\n  setConfig(config: Config) {\n    if (this.parent) {\n      throw new Error('immutable');\n    }\n    this.config = config;\n    for (const subscriber of this.subscribers) {\n      try {\n        subscriber();\n      } catch (error) {\n        console.error(`Config subscriber threw error, ${error}`);\n      }\n    }\n  }\n\n  subscribe(onChange: () => void): { unsubscribe: () => void } {\n    if (this.parent) {\n      return this.parent.subscribe(onChange);\n    }\n\n    this.subscribers.push(onChange);\n    return {\n      unsubscribe: () => {\n        const index = this.subscribers.indexOf(onChange);\n        if (index >= 0) {\n          this.subscribers.splice(index, 1);\n        }\n      },\n    };\n  }\n\n  private select(required: true): Config;\n  private select(required: false): Config | undefined;\n  private select(required: boolean): Config | undefined {\n    if (this.parent && this.parentKey) {\n      if (required) {\n        return this.parent.select(true).getConfig(this.parentKey);\n      }\n      return this.parent.select(false)?.getOptionalConfig(this.parentKey);\n    }\n\n    return this.config;\n  }\n\n  has(key: string): boolean {\n    return this.select(false)?.has(key) ?? false;\n  }\n  keys(): string[] {\n    return this.select(false)?.keys() ?? [];\n  }\n  get<T = JsonValue>(key?: string): T {\n    return this.select(true).get(key);\n  }\n  getOptional<T = JsonValue>(key?: string): T | undefined {\n    return this.select(false)?.getOptional(key);\n  }\n  getConfig(key: string): Config {\n    return new ObservableConfigProxy(this, key);\n  }\n  getOptionalConfig(key: string): Config | undefined {\n    if (this.select(false)?.has(key)) {\n      return new ObservableConfigProxy(this, key);\n    }\n    return undefined;\n  }\n  getConfigArray(key: string): Config[] {\n    return this.select(true).getConfigArray(key);\n  }\n  getOptionalConfigArray(key: string): Config[] | undefined {\n    return this.select(false)?.getOptionalConfigArray(key);\n  }\n  getNumber(key: string): number {\n    return this.select(true).getNumber(key);\n  }\n  getOptionalNumber(key: string): number | undefined {\n    return this.select(false)?.getOptionalNumber(key);\n  }\n  getBoolean(key: string): boolean {\n    return this.select(true).getBoolean(key);\n  }\n  getOptionalBoolean(key: string): boolean | undefined {\n    return this.select(false)?.getOptionalBoolean(key);\n  }\n  getString(key: string): string {\n    return this.select(true).getString(key);\n  }\n  getOptionalString(key: string): string | undefined {\n    return this.select(false)?.getOptionalString(key);\n  }\n  getStringArray(key: string): string[] {\n    return this.select(true).getStringArray(key);\n  }\n  getOptionalStringArray(key: string): string[] | undefined {\n    return this.select(false)?.getOptionalStringArray(key);\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function isValidUrl(url: string): boolean {\n  try {\n    // eslint-disable-next-line no-new\n    new URL(url);\n    return true;\n  } catch {\n    return false;\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport { createConfigSecretEnumerator as _createConfigSecretEnumerator } from '../../../backend-defaults/src/entrypoints/rootConfig/createConfigSecretEnumerator';\n\nimport { resolve as resolvePath } from 'path';\nimport parseArgs from 'minimist';\nimport { findPaths } from '@backstage/cli-common';\nimport {\n  loadConfig,\n  ConfigTarget,\n  LoadConfigOptionsRemote,\n} from '@backstage/config-loader';\nimport { ConfigReader } from '@backstage/config';\nimport type { Config, AppConfig } from '@backstage/config';\nimport { ObservableConfigProxy } from './ObservableConfigProxy';\nimport { isValidUrl } from '../lib/urls';\n\n/**\n * @public\n * @deprecated Please import from `@backstage/backend-defaults/rootConfig` instead.\n */\nexport const createConfigSecretEnumerator = _createConfigSecretEnumerator;\n\n/**\n * Load configuration for a Backend.\n *\n * This function should only be called once, during the initialization of the backend.\n *\n * @public\n * @deprecated Please migrate to the new backend system and use `coreServices.rootConfig` instead, or the {@link @backstage/config-loader#ConfigSources} facilities if required.\n */\nexport async function loadBackendConfig(options: {\n  remote?: LoadConfigOptionsRemote;\n  argv: string[];\n  additionalConfigs?: AppConfig[];\n  watch?: boolean;\n}): Promise<{ config: Config }> {\n  const args = parseArgs(options.argv);\n\n  const configTargets: ConfigTarget[] = [args.config ?? []]\n    .flat()\n    .map(arg => (isValidUrl(arg) ? { url: arg } : { path: resolvePath(arg) }));\n\n  /* eslint-disable-next-line no-restricted-syntax */\n  const paths = findPaths(__dirname);\n\n  let currentCancelFunc: (() => void) | undefined = undefined;\n\n  const config = new ObservableConfigProxy();\n  const { appConfigs } = await loadConfig({\n    configRoot: paths.targetRoot,\n    configTargets: configTargets,\n    remote: options.remote,\n    watch:\n      options.watch ?? true\n        ? {\n            onChange(newConfigs) {\n              console.info(\n                `Reloaded config from ${newConfigs\n                  .map(c => c.context)\n                  .join(', ')}`,\n              );\n              const configsToMerge = [...newConfigs];\n              if (options.additionalConfigs) {\n                configsToMerge.push(...options.additionalConfigs);\n              }\n              config.setConfig(ConfigReader.fromConfigs(configsToMerge));\n            },\n            stopSignal: new Promise(resolve => {\n              if (currentCancelFunc) {\n                currentCancelFunc();\n              }\n              currentCancelFunc = resolve;\n\n              // TODO(Rugvip): We keep this here for now to avoid breaking the old system\n              //               since this is re-used in backend-common\n              if (module.hot) {\n                module.hot.addDisposeHandler(resolve);\n              }\n            }),\n          }\n        : undefined,\n  });\n  console.info(\n    `Loaded config from ${appConfigs.map(c => c.context).join(', ')}`,\n  );\n\n  const finalAppConfigs = [...appConfigs];\n  if (options.additionalConfigs) {\n    finalAppConfigs.push(...options.additionalConfigs);\n  }\n  config.setConfig(ConfigReader.fromConfigs(finalAppConfigs));\n\n  return { config };\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Escapes a given string to be used inside a RegExp.\n *\n * Taken from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\n */\nexport const escapeRegExp = (text: string) => {\n  return text.replace(/[.*+?^${}(\\)|[\\]\\\\]/g, '\\\\$&');\n};\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  LoggerService,\n  RootLoggerService,\n} from '@backstage/backend-plugin-api';\nimport { JsonObject } from '@backstage/types';\nimport { Format, TransformableInfo } from 'logform';\nimport {\n  Logger,\n  format,\n  createLogger,\n  transports,\n  transport as Transport,\n} from 'winston';\nimport { MESSAGE } from 'triple-beam';\nimport { escapeRegExp } from '../../lib/escapeRegExp';\n\n/**\n * @public\n */\nexport interface WinstonLoggerOptions {\n  meta?: JsonObject;\n  level?: string;\n  format?: Format;\n  transports?: Transport[];\n}\n\n/**\n * A {@link @backstage/backend-plugin-api#LoggerService} implementation based on winston.\n *\n * @public\n */\nexport class WinstonLogger implements RootLoggerService {\n  #winston: Logger;\n  #addRedactions?: (redactions: Iterable<string>) => void;\n\n  /**\n   * Creates a {@link WinstonLogger} instance.\n   */\n  static create(options: WinstonLoggerOptions): WinstonLogger {\n    const redacter = WinstonLogger.redacter();\n    const defaultFormatter =\n      process.env.NODE_ENV === 'production'\n        ? format.json()\n        : WinstonLogger.colorFormat();\n\n    let logger = createLogger({\n      level: process.env.LOG_LEVEL || options.level || 'info',\n      format: format.combine(\n        options.format ?? defaultFormatter,\n        redacter.format,\n      ),\n      transports: options.transports ?? new transports.Console(),\n    });\n\n    if (options.meta) {\n      logger = logger.child(options.meta);\n    }\n\n    return new WinstonLogger(logger, redacter.add);\n  }\n\n  /**\n   * Creates a winston log formatter for redacting secrets.\n   */\n  static redacter(): {\n    format: Format;\n    add: (redactions: Iterable<string>) => void;\n  } {\n    const redactionSet = new Set<string>();\n\n    let redactionPattern: RegExp | undefined = undefined;\n\n    return {\n      format: format((obj: TransformableInfo) => {\n        if (!redactionPattern || !obj) {\n          return obj;\n        }\n\n        obj[MESSAGE] = obj[MESSAGE]?.replace?.(redactionPattern, '***');\n\n        return obj;\n      })(),\n      add(newRedactions) {\n        let added = 0;\n        for (const redactionToTrim of newRedactions) {\n          // Trimming the string ensures that we don't accdentally get extra\n          // newlines or other whitespace interfering with the redaction; this\n          // can happen for example when using string literals in yaml\n          const redaction = redactionToTrim.trim();\n          // Exclude secrets that are empty or just one character in length. These\n          // typically mean that you are running local dev or tests, or using the\n          // --lax flag which sets things to just 'x'.\n          if (redaction.length <= 1) {\n            continue;\n          }\n          if (!redactionSet.has(redaction)) {\n            redactionSet.add(redaction);\n            added += 1;\n          }\n        }\n        if (added > 0) {\n          const redactions = Array.from(redactionSet)\n            .map(r => escapeRegExp(r))\n            .join('|');\n          redactionPattern = new RegExp(`(${redactions})`, 'g');\n        }\n      },\n    };\n  }\n\n  /**\n   * Creates a pretty printed winston log formatter.\n   */\n  static colorFormat(): Format {\n    const colorizer = format.colorize();\n\n    return format.combine(\n      format.timestamp(),\n      format.colorize({\n        colors: {\n          timestamp: 'dim',\n          prefix: 'blue',\n          field: 'cyan',\n          debug: 'grey',\n        },\n      }),\n      format.printf((info: TransformableInfo) => {\n        const { timestamp, level, message, plugin, service, ...fields } = info;\n        const prefix = plugin || service;\n        const timestampColor = colorizer.colorize('timestamp', timestamp);\n        const prefixColor = colorizer.colorize('prefix', prefix);\n\n        const extraFields = Object.entries(fields)\n          .map(\n            ([key, value]) =>\n              `${colorizer.colorize('field', `${key}`)}=${value}`,\n          )\n          .join(' ');\n\n        return `${timestampColor} ${prefixColor} ${level} ${message} ${extraFields}`;\n      }),\n    );\n  }\n\n  private constructor(\n    winston: Logger,\n    addRedactions?: (redactions: Iterable<string>) => void,\n  ) {\n    this.#winston = winston;\n    this.#addRedactions = addRedactions;\n  }\n\n  error(message: string, meta?: JsonObject): void {\n    this.#winston.error(message, meta);\n  }\n\n  warn(message: string, meta?: JsonObject): void {\n    this.#winston.warn(message, meta);\n  }\n\n  info(message: string, meta?: JsonObject): void {\n    this.#winston.info(message, meta);\n  }\n\n  debug(message: string, meta?: JsonObject): void {\n    this.#winston.debug(message, meta);\n  }\n\n  child(meta: JsonObject): LoggerService {\n    return new WinstonLogger(this.#winston.child(meta));\n  }\n\n  addRedactions(redactions: Iterable<string>) {\n    this.#addRedactions?.(redactions);\n  }\n}\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  createServiceFactory,\n  coreServices,\n} from '@backstage/backend-plugin-api';\nimport { transports, format } from 'winston';\nimport { WinstonLogger } from '../rootLogger/WinstonLogger';\nimport { createConfigSecretEnumerator } from '../rootConfig/createConfigSecretEnumerator';\n\n/**\n * Root-level logging.\n *\n * See {@link @backstage/code-plugin-api#RootLoggerService}\n * and {@link https://backstage.io/docs/backend-system/core-services/root-logger | the service docs}\n * for more information.\n *\n * @public\n */\nexport const rootLoggerServiceFactory = createServiceFactory({\n  service: coreServices.rootLogger,\n  deps: {\n    config: coreServices.rootConfig,\n  },\n  async factory({ config }) {\n    const logger = WinstonLogger.create({\n      meta: {\n        service: 'backstage',\n      },\n      level: process.env.LOG_LEVEL || 'info',\n      format:\n        process.env.NODE_ENV === 'production'\n          ? format.json()\n          : WinstonLogger.colorFormat(),\n      transports: [new transports.Console()],\n    });\n\n    const secretEnumerator = await createConfigSecretEnumerator({ logger });\n    logger.addRedactions(secretEnumerator(config));\n    config.subscribe?.(() => logger.addRedactions(secretEnumerator(config)));\n\n    return logger;\n  },\n});\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport {\n  WinstonLogger as _WinstonLogger,\n  type WinstonLoggerOptions as _WinstonLoggerOptions,\n} from '../../../backend-defaults/src/entrypoints/rootLogger';\n\nimport {\n  LoggerService,\n  RootLoggerService,\n} from '@backstage/backend-plugin-api';\nimport { JsonObject } from '@backstage/types';\nimport { Format } from 'logform';\n\n/**\n * @public\n * @deprecated Please import from `@backstage/backend-defaults/rootLogger` instead.\n */\nexport type WinstonLoggerOptions = _WinstonLoggerOptions;\n\n/**\n * A {@link @backstage/backend-plugin-api#LoggerService} implementation based on winston.\n *\n * @public\n * @deprecated Please import from `@backstage/backend-defaults/rootLogger` instead.\n */\nexport class WinstonLogger implements RootLoggerService {\n  /**\n   * Creates a {@link WinstonLogger} instance.\n   */\n  static create(options: WinstonLoggerOptions): WinstonLogger {\n    return new WinstonLogger(_WinstonLogger.create(options));\n  }\n\n  /**\n   * Creates a winston log formatter for redacting secrets.\n   */\n  static redacter(): {\n    format: Format;\n    add: (redactions: Iterable<string>) => void;\n  } {\n    return _WinstonLogger.redacter();\n  }\n\n  /**\n   * Creates a pretty printed winston log formatter.\n   */\n  static colorFormat(): Format {\n    return _WinstonLogger.colorFormat();\n  }\n\n  private constructor(private readonly impl: _WinstonLogger) {}\n\n  error(message: string, meta?: JsonObject): void {\n    this.impl.error(message, meta);\n  }\n\n  warn(message: string, meta?: JsonObject): void {\n    this.impl.warn(message, meta);\n  }\n\n  info(message: string, meta?: JsonObject): void {\n    this.impl.info(message, meta);\n  }\n\n  debug(message: string, meta?: JsonObject): void {\n    this.impl.debug(message, meta);\n  }\n\n  child(meta: JsonObject): LoggerService {\n    return this.impl.child(meta);\n  }\n\n  addRedactions(redactions: Iterable<string>) {\n    this.impl.addRedactions(redactions);\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as winston from 'winston';\nimport { createRootLogger } from './createRootLogger';\n\n/**\n * A logger that just throws away all messages.\n *\n * @public\n * @deprecated As we are going to deprecate the legacy backend, this function will be removed in the future.\n * If you need to mock the root logger in the new system, please use `mockServices.logger.mock()` from `@backstage/test-utils` instead.\n */\nexport function getVoidLogger(): winston.Logger {\n  return winston.createLogger({\n    transports: [new winston.transports.Console({ silent: true })],\n  });\n}\n\nlet rootLogger: winston.Logger;\n\n/**\n * Gets the current root logger.\n *\n * @public\n * @deprecated As we are going to deprecate the legacy backend, this function will be removed in the future.\n * If you need to get the root logger in the new system, please check out this documentation:\n * https://backstage.io/docs/backend-system/core-services/logger\n */\nexport function getRootLogger(): winston.Logger {\n  if (!rootLogger) {\n    rootLogger = createRootLogger();\n  }\n  return rootLogger;\n}\n\n/**\n * Sets a completely custom default \"root\" logger.\n *\n * @remarks\n *\n * This is the logger instance that will be the foundation for all other logger\n * instances passed to plugins etc, in a given backend.\n *\n * Only use this if you absolutely need to make a completely custom logger.\n * Normally if you want to make light adaptations to the default logger\n * behavior, you would instead call {@link createRootLogger}.\n *\n * @public\n * @deprecated As we are going to deprecate the legacy backend, this function will be removed in the future.\n * If you need to set the root logger in the new system, please check out this documentation:\n * https://backstage.io/docs/backend-system/core-services/logger\n */\nexport function setRootLogger(newLogger: winston.Logger) {\n  rootLogger = newLogger;\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport { WinstonLogger } from '../../../../backend-app-api/src/logging/WinstonLogger';\nimport { merge } from 'lodash';\nimport * as winston from 'winston';\nimport { format, LoggerOptions } from 'winston';\nimport { TransformableInfo } from 'logform';\nimport { setRootLogger } from './globalLoggers';\n\nconst getRedacter = (() => {\n  let redacter: ReturnType<typeof WinstonLogger.redacter> | undefined =\n    undefined;\n  return () => {\n    if (!redacter) {\n      redacter = WinstonLogger.redacter();\n    }\n    return redacter;\n  };\n})();\n\nexport const setRootLoggerRedactionList = (\n  redactions: Iterable<string>,\n): void => {\n  getRedacter().add(redactions);\n};\n\n/**\n * A winston formatting function that finds occurrences of filteredKeys\n * and replaces them with the corresponding identifier.\n *\n * @public\n * @deprecated This utility is being deprecated along with the {@link https://github.com/backstage/backstage/issues/24493 |legacy backend system}.\n * Migrate your {@link https://backstage.io/docs/backend-system/building-backends/migrating | backend} and {@link https://backstage.io/docs/backend-system/building-plugins-and-modules/migrating | plugin} to the new system and use the {@link https://github.com/backstage/backstage/pull/24730 | RedactionsService} for customization instead.\n */\nexport function redactWinstonLogLine(\n  info: winston.Logform.TransformableInfo,\n): winston.Logform.TransformableInfo {\n  return getRedacter().format.transform(\n    info,\n  ) as winston.Logform.TransformableInfo;\n}\n\nconst colorizer = format.colorize();\n\n// NOTE: This is a copy of the WinstonLogger.colorFormat to avoid a circular dependency\n/**\n * Creates a pretty printed winston log formatter.\n *\n * @public\n * @deprecated As we are going to deprecate the legacy backend, this formatter utility will be removed in the future.\n * If you need to format logs in the new system, please use the `WinstonLogger.colorFormat()` from `@backstage/backend-app-api` instead.\n */\nexport const coloredFormat = format.combine(\n  format.timestamp(),\n  format.colorize({\n    colors: {\n      timestamp: 'dim',\n      prefix: 'blue',\n      field: 'cyan',\n      debug: 'grey',\n    },\n  }),\n  format.printf((info: TransformableInfo) => {\n    const { timestamp, level, message, plugin, service, ...fields } = info;\n    const prefix = plugin || service;\n    const timestampColor = colorizer.colorize('timestamp', timestamp);\n    const prefixColor = colorizer.colorize('prefix', prefix);\n\n    const extraFields = Object.entries(fields)\n      .map(\n        ([key, value]) => `${colorizer.colorize('field', `${key}`)}=${value}`,\n      )\n      .join(' ');\n\n    return `${timestampColor} ${prefixColor} ${level} ${message} ${extraFields}`;\n  }),\n);\n\n/**\n * Creates a default \"root\" logger. This also calls {@link setRootLogger} under\n * the hood.\n *\n * @remarks\n *\n * This is the logger instance that will be the foundation for all other logger\n * instances passed to plugins etc, in a given backend.\n *\n * @public\n * @deprecated As we are going to deprecate the legacy backend, this function will be removed in the future.\n * If you need to create the root logger in the new system, please check out this documentation:\n * https://backstage.io/docs/backend-system/core-services/logger\n */\nexport function createRootLogger(\n  options: winston.LoggerOptions = {},\n  env = process.env,\n): winston.Logger {\n  const logger = winston\n    .createLogger(\n      merge<LoggerOptions, LoggerOptions>(\n        {\n          level: env.LOG_LEVEL || 'info',\n          format: winston.format.combine(\n            getRedacter().format,\n            env.NODE_ENV === 'production'\n              ? winston.format.json()\n              : WinstonLogger.colorFormat(),\n          ),\n          transports: [\n            new winston.transports.Console({\n              silent: env.JEST_WORKER_ID !== undefined && !env.LOG_LEVEL,\n            }),\n          ],\n        },\n        options,\n      ),\n    )\n    .child({ service: 'backstage' });\n\n  setRootLogger(logger);\n\n  return logger;\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport {\n  createConfigSecretEnumerator,\n  loadBackendConfig as newLoadBackendConfig,\n} from '../../../backend-app-api/src/config';\nimport { LoggerService } from '@backstage/backend-plugin-api';\nimport { AppConfig, Config } from '@backstage/config';\nimport { LoadConfigOptionsRemote } from '@backstage/config-loader';\nimport { setRootLoggerRedactionList } from './logging/createRootLogger';\n\n/**\n * Load configuration for a Backend.\n *\n * This function should only be called once, during the initialization of the backend.\n *\n * @public\n * @deprecated Use {@link @backstage/backend-app-api#loadBackendConfig} instead.\n */\nexport async function loadBackendConfig(options: {\n  logger: LoggerService;\n  // process.argv or any other overrides\n  remote?: LoadConfigOptionsRemote;\n  additionalConfigs?: AppConfig[];\n  argv: string[];\n  watch?: boolean;\n}): Promise<Config> {\n  const secretEnumerator = await createConfigSecretEnumerator({\n    logger: options.logger,\n  });\n  const { config } = await newLoadBackendConfig(options);\n\n  setRootLoggerRedactionList(secretEnumerator(config));\n  config.subscribe?.(() =>\n    setRootLoggerRedactionList(secretEnumerator(config)),\n  );\n\n  return config;\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport git, {\n  ProgressCallback,\n  MergeResult,\n  ReadCommitResult,\n  AuthCallback,\n} from 'isomorphic-git';\nimport http from 'isomorphic-git/http/node';\nimport fs from 'fs-extra';\nimport { LoggerService } from '@backstage/backend-plugin-api';\n\nfunction isAuthCallbackOptions(\n  options: StaticAuthOptions | AuthCallbackOptions,\n): options is AuthCallbackOptions {\n  return 'onAuth' in options;\n}\n\n/**\n * Configure static credential for authentication\n * @public\n * @deprecated This type is deprecated and will be removed in a future release, see https://github.com/backstage/backstage/issues/24493.\n */\nexport type StaticAuthOptions = {\n  username?: string;\n  password?: string;\n  token?: string;\n  logger?: LoggerService;\n};\n\n/**\n * Configure an authentication callback that can provide credentials on demand\n * @public\n * @deprecated This type is deprecated and will be removed in a future release, see https://github.com/backstage/backstage/issues/24493.\n */\nexport type AuthCallbackOptions = {\n  onAuth: AuthCallback;\n  logger?: LoggerService;\n};\n\n/*\nprovider          username         password\nAzure             'notempty'       token\nBitbucket Cloud   'x-token-auth'   token\nBitbucket Server  username         password or token\nGitHub            'x-access-token' token\nGitLab            'oauth2'         token\n\nFrom : https://isomorphic-git.org/docs/en/onAuth with fix for GitHub\n\nOr token provided as `token` for Bearer auth header\ninstead of Basic Auth (e.g., Bitbucket Server).\n*/\n\n/**\n * A convenience wrapper around the `isomorphic-git` library.\n * @public\n * @deprecated This class is deprecated and will be removed in a future release, see https://github.com/backstage/backstage/issues/24493.\n */\n\nexport class Git {\n  private readonly headers: {\n    [x: string]: string;\n  };\n\n  private constructor(\n    private readonly config: {\n      onAuth: AuthCallback;\n      token?: string;\n      logger?: LoggerService;\n    },\n  ) {\n    this.onAuth = config.onAuth;\n\n    this.headers = {\n      'user-agent': 'git/@isomorphic-git',\n      ...(config.token ? { Authorization: `Bearer ${config.token}` } : {}),\n    };\n  }\n\n  async add(options: { dir: string; filepath: string }): Promise<void> {\n    const { dir, filepath } = options;\n    this.config.logger?.info(`Adding file {dir=${dir},filepath=${filepath}}`);\n\n    return git.add({ fs, dir, filepath });\n  }\n\n  async addRemote(options: {\n    dir: string;\n    remote: string;\n    url: string;\n    force?: boolean;\n  }): Promise<void> {\n    const { dir, url, remote, force } = options;\n    this.config.logger?.info(\n      `Creating new remote {dir=${dir},remote=${remote},url=${url}}`,\n    );\n    return git.addRemote({ fs, dir, remote, url, force });\n  }\n\n  async deleteRemote(options: { dir: string; remote: string }): Promise<void> {\n    const { dir, remote } = options;\n    this.config.logger?.info(`Deleting remote {dir=${dir},remote=${remote}}`);\n    return git.deleteRemote({ fs, dir, remote });\n  }\n\n  async checkout(options: { dir: string; ref: string }): Promise<void> {\n    const { dir, ref } = options;\n    this.config.logger?.info(`Checking out branch {dir=${dir},ref=${ref}}`);\n\n    return git.checkout({ fs, dir, ref });\n  }\n\n  async branch(options: { dir: string; ref: string }): Promise<void> {\n    const { dir, ref } = options;\n    this.config.logger?.info(`Creating branch {dir=${dir},ref=${ref}`);\n\n    return git.branch({ fs, dir, ref });\n  }\n\n  async commit(options: {\n    dir: string;\n    message: string;\n    author: { name: string; email: string };\n    committer: { name: string; email: string };\n  }): Promise<string> {\n    const { dir, message, author, committer } = options;\n    this.config.logger?.info(\n      `Committing file to repo {dir=${dir},message=${message}}`,\n    );\n    return git.commit({ fs, dir, message, author, committer });\n  }\n\n  /** https://isomorphic-git.org/docs/en/clone */\n  async clone(options: {\n    url: string;\n    dir: string;\n    ref?: string;\n    depth?: number;\n    noCheckout?: boolean;\n  }): Promise<void> {\n    const { url, dir, ref, depth, noCheckout } = options;\n    this.config.logger?.info(`Cloning repo {dir=${dir},url=${url}}`);\n\n    try {\n      return await git.clone({\n        fs,\n        http,\n        url,\n        dir,\n        ref,\n        singleBranch: true,\n        depth: depth ?? 1,\n        noCheckout,\n        onProgress: this.onProgressHandler(),\n        headers: this.headers,\n        onAuth: this.onAuth,\n      });\n    } catch (ex) {\n      this.config.logger?.error(`Failed to clone repo {dir=${dir},url=${url}}`);\n      if (ex.data) {\n        throw new Error(`${ex.message} {data=${JSON.stringify(ex.data)}}`);\n      }\n      throw ex;\n    }\n  }\n\n  /** https://isomorphic-git.org/docs/en/currentBranch */\n  async currentBranch(options: {\n    dir: string;\n    fullName?: boolean;\n  }): Promise<string | undefined> {\n    const { dir, fullName = false } = options;\n    return git.currentBranch({ fs, dir, fullname: fullName }) as Promise<\n      string | undefined\n    >;\n  }\n\n  /** https://isomorphic-git.org/docs/en/fetch */\n  async fetch(options: {\n    dir: string;\n    remote?: string;\n    tags?: boolean;\n  }): Promise<void> {\n    const { dir, remote = 'origin', tags = false } = options;\n    this.config.logger?.info(\n      `Fetching remote=${remote} for repository {dir=${dir}}`,\n    );\n\n    try {\n      await git.fetch({\n        fs,\n        http,\n        dir,\n        remote,\n        tags,\n        onProgress: this.onProgressHandler(),\n        headers: this.headers,\n        onAuth: this.onAuth,\n      });\n    } catch (ex) {\n      this.config.logger?.error(\n        `Failed to fetch repo {dir=${dir},remote=${remote}}`,\n      );\n      if (ex.data) {\n        throw new Error(`${ex.message} {data=${JSON.stringify(ex.data)}}`);\n      }\n      throw ex;\n    }\n  }\n\n  async init(options: { dir: string; defaultBranch?: string }): Promise<void> {\n    const { dir, defaultBranch = 'master' } = options;\n    this.config.logger?.info(`Init git repository {dir=${dir}}`);\n\n    return git.init({\n      fs,\n      dir,\n      defaultBranch,\n    });\n  }\n\n  /** https://isomorphic-git.org/docs/en/merge */\n  async merge(options: {\n    dir: string;\n    theirs: string;\n    ours?: string;\n    author: { name: string; email: string };\n    committer: { name: string; email: string };\n  }): Promise<MergeResult> {\n    const { dir, theirs, ours, author, committer } = options;\n    this.config.logger?.info(\n      `Merging branch '${theirs}' into '${ours}' for repository {dir=${dir}}`,\n    );\n\n    // If ours is undefined, current branch is used.\n    return git.merge({\n      fs,\n      dir,\n      ours,\n      theirs,\n      author,\n      committer,\n    });\n  }\n\n  async push(options: {\n    dir: string;\n    remote: string;\n    remoteRef?: string;\n    force?: boolean;\n  }) {\n    const { dir, remote, remoteRef, force } = options;\n    this.config.logger?.info(\n      `Pushing directory to remote {dir=${dir},remote=${remote}}`,\n    );\n    try {\n      return await git.push({\n        fs,\n        dir,\n        http,\n        onProgress: this.onProgressHandler(),\n        remoteRef,\n        force,\n        headers: this.headers,\n        remote,\n        onAuth: this.onAuth,\n      });\n    } catch (ex) {\n      this.config.logger?.error(\n        `Failed to push to repo {dir=${dir}, remote=${remote}}`,\n      );\n      if (ex.data) {\n        throw new Error(`${ex.message} {data=${JSON.stringify(ex.data)}}`);\n      }\n      throw ex;\n    }\n  }\n\n  /** https://isomorphic-git.org/docs/en/readCommit */\n  async readCommit(options: {\n    dir: string;\n    sha: string;\n  }): Promise<ReadCommitResult> {\n    const { dir, sha } = options;\n    return git.readCommit({ fs, dir, oid: sha });\n  }\n\n  /** https://isomorphic-git.org/docs/en/remove */\n  async remove(options: { dir: string; filepath: string }): Promise<void> {\n    const { dir, filepath } = options;\n    this.config.logger?.info(\n      `Removing file from git index {dir=${dir},filepath=${filepath}}`,\n    );\n    return git.remove({ fs, dir, filepath });\n  }\n\n  /** https://isomorphic-git.org/docs/en/resolveRef */\n  async resolveRef(options: { dir: string; ref: string }): Promise<string> {\n    const { dir, ref } = options;\n    return git.resolveRef({ fs, dir, ref });\n  }\n\n  /** https://isomorphic-git.org/docs/en/log */\n  async log(options: {\n    dir: string;\n    ref?: string;\n  }): Promise<ReadCommitResult[]> {\n    const { dir, ref } = options;\n    return git.log({\n      fs,\n      dir,\n      ref: ref ?? 'HEAD',\n    });\n  }\n\n  private onAuth: AuthCallback;\n\n  private onProgressHandler = (): ProgressCallback => {\n    let currentPhase = '';\n\n    return event => {\n      if (currentPhase !== event.phase) {\n        currentPhase = event.phase;\n        this.config.logger?.info(event.phase);\n      }\n      const total = event.total\n        ? `${Math.round((event.loaded / event.total) * 100)}%`\n        : event.loaded;\n      this.config.logger?.debug(`status={${event.phase},total={${total}}}`);\n    };\n  };\n\n  static fromAuth = (options: StaticAuthOptions | AuthCallbackOptions) => {\n    if (isAuthCallbackOptions(options)) {\n      const { onAuth, logger } = options;\n      return new Git({ onAuth, logger });\n    }\n\n    const { username, password, token, logger } = options;\n    return new Git({ onAuth: () => ({ username, password }), token, logger });\n  };\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport { AuthenticationError } from '@backstage/errors';\nimport { base64url, exportJWK, generateSecret, jwtVerify, SignJWT } from 'jose';\nimport { DateTime, Duration } from 'luxon';\nimport { LoggerService } from '@backstage/backend-plugin-api';\nimport { TokenManager } from './types';\n\nconst TOKEN_ALG = 'HS256';\nconst TOKEN_SUB = 'backstage-server';\nconst TOKEN_EXPIRY_AFTER = Duration.fromObject({ hours: 1 });\nconst TOKEN_REISSUE_AFTER = Duration.fromObject({ minutes: 10 });\n\n/**\n * A token manager that issues static fake tokens and never fails\n * authentication. This can be useful for testing.\n */\nclass NoopTokenManager implements TokenManager {\n  public readonly isInsecureServerTokenManager: boolean = true;\n\n  async getToken() {\n    return { token: '' };\n  }\n\n  async authenticate() {}\n}\n\n/**\n * A token manager that throws an error when trying to generate or authenticate tokens.\n */\nclass DisabledTokenManager implements TokenManager {\n  async getToken(): Promise<{ token: string }> {\n    throw new Error(\n      \"Unable to generate legacy token, no legacy keys are configured in 'backend.auth.keys' or 'backend.auth.externalAccess'\",\n    );\n  }\n\n  async authenticate() {\n    throw new AuthenticationError(\n      \"Unable to authenticate legacy token, no legacy keys are configured in 'backend.auth.keys' or 'backend.auth.externalAccess'\",\n    );\n  }\n}\n\n/**\n * Options for {@link ServerTokenManager}.\n *\n * @public\n * @deprecated Please {@link https://backstage.io/docs/tutorials/auth-service-migration | migrate} to the new `coreServices.auth`, `coreServices.httpAuth`, and `coreServices.userInfo` services as needed instead.\n */\nexport interface ServerTokenManagerOptions {\n  /**\n   * The logger to use.\n   */\n  logger: LoggerService;\n\n  /**\n   * Whether to disable the token manager if no keys are configured.\n   */\n  allowDisabledTokenManager?: boolean;\n}\n\n/**\n * Creates and validates tokens for use during service-to-service\n * authentication.\n *\n * @public\n * @deprecated Please {@link https://backstage.io/docs/tutorials/auth-service-migration | migrate} to the new `coreServices.auth`, `coreServices.httpAuth`, and `coreServices.userInfo` services as needed instead.\n */\nexport class ServerTokenManager implements TokenManager {\n  private readonly options: ServerTokenManagerOptions;\n  private readonly verificationKeys: Uint8Array[];\n  private signingKey: Uint8Array;\n  private privateKeyPromise: Promise<void> | undefined;\n  private currentTokenPromise: Promise<{ token: string }> | undefined;\n\n  /**\n   * Creates a token manager that issues static fake tokens and never fails\n   * authentication. This can be useful for testing.\n   */\n  static noop(): TokenManager {\n    return new NoopTokenManager();\n  }\n\n  static fromConfig(\n    config: Config,\n    options: ServerTokenManagerOptions,\n  ): TokenManager {\n    const oldSecrets = config\n      .getOptionalConfigArray('backend.auth.keys')\n      ?.map(c => c.getString('secret'));\n    const newSecrets = config\n      .getOptionalConfigArray('backend.auth.externalAccess')\n      ?.filter(c => c.getString('type') === 'legacy')\n      .map(c => c.getString('options.secret'));\n    const secrets = [...(oldSecrets ?? []), ...(newSecrets ?? [])];\n\n    if (secrets.length) {\n      return new ServerTokenManager(secrets, options);\n    }\n\n    // When using the new backend system with new auth services we instead rely\n    // on the new plugin auth and external access configurations. If no legacy\n    // keys are configured we disable the token manager completely, rather than\n    // requiring users to configure legacy keys.\n    if (options.allowDisabledTokenManager) {\n      return new DisabledTokenManager();\n    }\n\n    if (process.env.NODE_ENV !== 'development') {\n      throw new Error(\n        'You must configure at least one key in backend.auth.keys for production.',\n      );\n    }\n\n    // For development, if a secret has not been configured, we auto generate a secret instead of throwing.\n    options.logger.warn(\n      'Generated a secret for service-to-service authentication: DEVELOPMENT USE ONLY.',\n    );\n    return new ServerTokenManager([], options);\n  }\n\n  private constructor(secrets: string[], options: ServerTokenManagerOptions) {\n    if (!secrets.length && process.env.NODE_ENV !== 'development') {\n      throw new Error(\n        'No secrets provided when constructing ServerTokenManager',\n      );\n    }\n    this.options = options;\n    this.verificationKeys = secrets.map(s => base64url.decode(s));\n    this.signingKey = this.verificationKeys[0];\n  }\n\n  // Called when no keys have been generated yet in the dev environment\n  private async generateKeys(): Promise<void> {\n    if (process.env.NODE_ENV !== 'development') {\n      throw new Error(\n        'Key generation is not supported outside of the dev environment',\n      );\n    }\n\n    if (this.privateKeyPromise) {\n      return this.privateKeyPromise;\n    }\n\n    const promise = (async () => {\n      const secret = await generateSecret(TOKEN_ALG);\n      const jwk = await exportJWK(secret);\n      this.verificationKeys.push(base64url.decode(jwk.k ?? ''));\n      this.signingKey = this.verificationKeys[0];\n      return;\n    })();\n\n    try {\n      this.privateKeyPromise = promise;\n      await promise;\n    } catch (error) {\n      // If we fail to generate a new key, we need to clear the state so that\n      // the next caller will try to generate another key.\n      this.options.logger.error(`Failed to generate new key, ${error}`);\n      delete this.privateKeyPromise;\n    }\n\n    return promise;\n  }\n\n  async getToken(): Promise<{ token: string }> {\n    if (!this.verificationKeys.length) {\n      await this.generateKeys();\n    }\n\n    if (this.currentTokenPromise) {\n      return this.currentTokenPromise;\n    }\n\n    const result = Promise.resolve().then(async () => {\n      const jwt = await new SignJWT({})\n        .setProtectedHeader({ alg: TOKEN_ALG })\n        .setSubject(TOKEN_SUB)\n        .setExpirationTime(\n          DateTime.now().plus(TOKEN_EXPIRY_AFTER).toUnixInteger(),\n        )\n        .sign(this.signingKey);\n      return { token: jwt };\n    });\n\n    this.currentTokenPromise = result;\n\n    result\n      .then(() => {\n        setTimeout(() => {\n          this.currentTokenPromise = undefined;\n        }, TOKEN_REISSUE_AFTER.toMillis());\n      })\n      .catch(() => {\n        this.currentTokenPromise = undefined;\n      });\n\n    return result;\n  }\n\n  async authenticate(token: string): Promise<void> {\n    let verifyError = undefined;\n\n    for (const key of this.verificationKeys) {\n      try {\n        const {\n          protectedHeader: { alg },\n          payload: { sub, exp },\n        } = await jwtVerify(token, key);\n\n        if (alg !== TOKEN_ALG) {\n          throw new AuthenticationError(`Illegal alg \"${alg}\"`);\n        }\n\n        if (sub !== TOKEN_SUB) {\n          throw new AuthenticationError(`Illegal sub \"${sub}\"`);\n        }\n\n        if (typeof exp !== 'number') {\n          throw new AuthenticationError(\n            'Server-to-server token had no exp claim',\n          );\n        }\n        return;\n      } catch (e) {\n        // Catch the verify exception and continue\n        verifyError = e;\n      }\n    }\n\n    throw new AuthenticationError('Invalid server token', verifyError);\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport helmet from 'helmet';\nimport { HelmetOptions } from 'helmet';\nimport { ContentSecurityPolicyOptions } from 'helmet/dist/types/middlewares/content-security-policy';\nimport kebabCase from 'lodash/kebabCase';\n\n/**\n * Attempts to read Helmet options from the backend configuration object.\n *\n * @public\n * @param config - The backend configuration object.\n * @returns A Helmet options object, or undefined if no Helmet configuration is present.\n *\n * @example\n * ```ts\n * const helmetOptions = readHelmetOptions(config.getConfig('backend'));\n * ```\n */\nexport function readHelmetOptions(config?: Config): HelmetOptions {\n  const cspOptions = readCspDirectives(config);\n  return {\n    contentSecurityPolicy: {\n      useDefaults: false,\n      directives: applyCspDirectives(cspOptions),\n    },\n    // These are all disabled in order to maintain backwards compatibility\n    // when bumping helmet v5. We can't enable these by default because\n    // there is no way for users to configure them.\n    // TODO(Rugvip): We should give control of this setup to consumers\n    crossOriginEmbedderPolicy: false,\n    crossOriginOpenerPolicy: false,\n    crossOriginResourcePolicy: false,\n    originAgentCluster: false,\n  };\n}\n\ntype CspDirectives = Record<string, string[] | false> | undefined;\n\n/**\n * Attempts to read a CSP directives from the backend configuration object.\n *\n * @example\n * ```yaml\n * backend:\n *   csp:\n *     connect-src: [\"'self'\", 'http:', 'https:']\n *     upgrade-insecure-requests: false\n * ```\n */\nfunction readCspDirectives(config?: Config): CspDirectives {\n  const cc = config?.getOptionalConfig('csp');\n  if (!cc) {\n    return undefined;\n  }\n\n  const result: Record<string, string[] | false> = {};\n  for (const key of cc.keys()) {\n    if (cc.get(key) === false) {\n      result[key] = false;\n    } else {\n      result[key] = cc.getStringArray(key);\n    }\n  }\n\n  return result;\n}\n\nexport function applyCspDirectives(\n  directives: CspDirectives,\n): ContentSecurityPolicyOptions['directives'] {\n  const result: ContentSecurityPolicyOptions['directives'] =\n    helmet.contentSecurityPolicy.getDefaultDirectives();\n\n  // TODO(Rugvip): We currently use non-precompiled AJV for validation in the frontend, which uses eval.\n  //               It should be replaced by any other solution that doesn't require unsafe-eval.\n  result['script-src'] = [\"'self'\", \"'unsafe-eval'\"];\n\n  // TODO(Rugvip): This is removed so that we maintained backwards compatibility\n  //               when bumping to helmet v5, we could remove this as well as\n  //               skip setting `useDefaults: false` in the future.\n  delete result['form-action'];\n\n  if (directives) {\n    for (const [key, value] of Object.entries(directives)) {\n      const kebabCaseKey = kebabCase(key);\n      if (value === false) {\n        delete result[kebabCaseKey];\n      } else {\n        result[kebabCaseKey] = value;\n      }\n    }\n  }\n\n  return result;\n}\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport { CorsOptions } from 'cors';\nimport { Minimatch } from 'minimatch';\n\n/**\n * Attempts to read a CORS options object from the backend configuration object.\n *\n * @public\n * @param config - The backend configuration object.\n * @returns A CORS options object, or undefined if no cors configuration is present.\n *\n * @example\n * ```ts\n * const corsOptions = readCorsOptions(config.getConfig('backend'));\n * ```\n */\nexport function readCorsOptions(config?: Config): CorsOptions {\n  const cc = config?.getOptionalConfig('cors');\n  if (!cc) {\n    return { origin: false }; // Disable CORS\n  }\n\n  return removeUnknown({\n    origin: createCorsOriginMatcher(readStringArray(cc, 'origin')),\n    methods: readStringArray(cc, 'methods'),\n    allowedHeaders: readStringArray(cc, 'allowedHeaders'),\n    exposedHeaders: readStringArray(cc, 'exposedHeaders'),\n    credentials: cc.getOptionalBoolean('credentials'),\n    maxAge: cc.getOptionalNumber('maxAge'),\n    preflightContinue: cc.getOptionalBoolean('preflightContinue'),\n    optionsSuccessStatus: cc.getOptionalNumber('optionsSuccessStatus'),\n  });\n}\n\nfunction removeUnknown<T extends object>(obj: T): T {\n  return Object.fromEntries(\n    Object.entries(obj).filter(([, v]) => v !== undefined),\n  ) as T;\n}\n\nfunction readStringArray(config: Config, key: string): string[] | undefined {\n  const value = config.getOptional(key);\n  if (typeof value === 'string') {\n    return [value];\n  } else if (!value) {\n    return undefined;\n  }\n  return config.getStringArray(key);\n}\n\nfunction createCorsOriginMatcher(allowedOriginPatterns: string[] | undefined) {\n  if (!allowedOriginPatterns) {\n    return undefined;\n  }\n\n  const allowedOriginMatchers = allowedOriginPatterns.map(\n    pattern => new Minimatch(pattern, { nocase: true, noglobstar: true }),\n  );\n\n  return (\n    origin: string | undefined,\n    callback: (\n      err: Error | null,\n      origin: boolean | string | RegExp | (boolean | string | RegExp)[],\n    ) => void,\n  ) => {\n    return callback(\n      null,\n      allowedOriginMatchers.some(pattern => pattern.match(origin ?? '')),\n    );\n  };\n}\n","/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LoggerService } from '@backstage/backend-plugin-api';\nimport { assertError } from '@backstage/errors';\nimport { randomBytes } from 'crypto';\n\nfunction handleBadError(error: Error, logger: LoggerService) {\n  const logId = randomBytes(10).toString('hex');\n  logger\n    .child({ logId })\n    .error(`Filtered internal error with logId=${logId} from response`, error);\n  const newError = new Error(`An internal error occurred logId=${logId}`);\n  delete newError.stack; // Trim the stack since it's not particularly useful\n  return newError;\n}\n\n/**\n * Filters out certain known error types that should never be returned in responses.\n *\n * @internal\n */\nexport function applyInternalErrorFilter(\n  error: unknown,\n  logger: LoggerService,\n): Error {\n  try {\n    assertError(error);\n  } catch (assertionError: unknown) {\n    assertError(assertionError);\n    return handleBadError(assertionError, logger);\n  }\n\n  const constructorName = error.constructor.name;\n\n  // DatabaseError are thrown by the pg-protocol module\n  if (constructorName === 'DatabaseError') {\n    return handleBadError(error, logger);\n  }\n\n  return error;\n}\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  RootConfigService,\n  LoggerService,\n} from '@backstage/backend-plugin-api';\nimport {\n  Request,\n  Response,\n  ErrorRequestHandler,\n  NextFunction,\n  RequestHandler,\n} from 'express';\nimport cors from 'cors';\nimport helmet from 'helmet';\nimport morgan from 'morgan';\nimport compression from 'compression';\nimport { readHelmetOptions } from './readHelmetOptions';\nimport { readCorsOptions } from './readCorsOptions';\nimport {\n  AuthenticationError,\n  ConflictError,\n  ErrorResponseBody,\n  InputError,\n  NotAllowedError,\n  NotFoundError,\n  NotModifiedError,\n  ServiceUnavailableError,\n  serializeError,\n} from '@backstage/errors';\nimport { NotImplementedError } from '@backstage/errors';\nimport { applyInternalErrorFilter } from './applyInternalErrorFilter';\n\n/**\n * Options used to create a {@link MiddlewareFactory}.\n *\n * @public\n */\nexport interface MiddlewareFactoryOptions {\n  config: RootConfigService;\n  logger: LoggerService;\n}\n\n/**\n * Options passed to the {@link MiddlewareFactory.error} middleware.\n *\n * @public\n */\nexport interface MiddlewareFactoryErrorOptions {\n  /**\n   * Whether error response bodies should show error stack traces or not.\n   *\n   * If not specified, by default shows stack traces only in development mode.\n   */\n  showStackTraces?: boolean;\n\n  /**\n   * Whether any 4xx errors should be logged or not.\n   *\n   * If not specified, default to only logging 5xx errors.\n   */\n  logAllErrors?: boolean;\n}\n\n/**\n * A utility to configure common middleware.\n *\n * @public\n */\nexport class MiddlewareFactory {\n  #config: RootConfigService;\n  #logger: LoggerService;\n\n  /**\n   * Creates a new {@link MiddlewareFactory}.\n   */\n  static create(options: MiddlewareFactoryOptions) {\n    return new MiddlewareFactory(options);\n  }\n\n  private constructor(options: MiddlewareFactoryOptions) {\n    this.#config = options.config;\n    this.#logger = options.logger;\n  }\n\n  /**\n   * Returns a middleware that unconditionally produces a 404 error response.\n   *\n   * @remarks\n   *\n   * Typically you want to place this middleware at the end of the chain, such\n   * that it's the last one attempted after no other routes matched.\n   *\n   * @returns An Express request handler\n   */\n  notFound(): RequestHandler {\n    return (_req: Request, res: Response) => {\n      res.status(404).end();\n    };\n  }\n\n  /**\n   * Returns the compression middleware.\n   *\n   * @remarks\n   *\n   * The middleware will attempt to compress response bodies for all requests\n   * that traverse through the middleware.\n   */\n  compression(): RequestHandler {\n    return compression();\n  }\n\n  /**\n   * Returns a request logging middleware.\n   *\n   * @remarks\n   *\n   * Typically you want to place this middleware at the start of the chain, such\n   * that it always logs requests whether they are \"caught\" by handlers farther\n   * down or not.\n   *\n   * @returns An Express request handler\n   */\n  logging(): RequestHandler {\n    const logger = this.#logger.child({\n      type: 'incomingRequest',\n    });\n\n    return morgan('combined', {\n      stream: {\n        write(message: string) {\n          logger.info(message.trimEnd());\n        },\n      },\n    });\n  }\n\n  /**\n   * Returns a middleware that implements the helmet library.\n   *\n   * @remarks\n   *\n   * This middleware applies security policies to incoming requests and outgoing\n   * responses. It is configured using config keys such as `backend.csp`.\n   *\n   * @see {@link https://helmetjs.github.io/}\n   *\n   * @returns An Express request handler\n   */\n  helmet(): RequestHandler {\n    return helmet(readHelmetOptions(this.#config.getOptionalConfig('backend')));\n  }\n\n  /**\n   * Returns a middleware that implements the cors library.\n   *\n   * @remarks\n   *\n   * This middleware handles CORS. It is configured using the config key\n   * `backend.cors`.\n   *\n   * @see {@link https://github.com/expressjs/cors}\n   *\n   * @returns An Express request handler\n   */\n  cors(): RequestHandler {\n    return cors(readCorsOptions(this.#config.getOptionalConfig('backend')));\n  }\n\n  /**\n   * Express middleware to handle errors during request processing.\n   *\n   * @remarks\n   *\n   * This is commonly the very last middleware in the chain.\n   *\n   * Its primary purpose is not to do translation of business logic exceptions,\n   * but rather to be a global catch-all for uncaught \"fatal\" errors that are\n   * expected to result in a 500 error. However, it also does handle some common\n   * error types (such as http-error exceptions, and the well-known error types\n   * in the `@backstage/errors` package) and returns the enclosed status code\n   * accordingly.\n   *\n   * It will also produce a response body with a serialized form of the error,\n   * unless a previous handler already did send a body. See\n   * {@link @backstage/errors#ErrorResponseBody} for the response shape used.\n   *\n   * @returns An Express error request handler\n   */\n  error(options: MiddlewareFactoryErrorOptions = {}): ErrorRequestHandler {\n    const showStackTraces =\n      options.showStackTraces ?? process.env.NODE_ENV === 'development';\n\n    const logger = this.#logger.child({\n      type: 'errorHandler',\n    });\n\n    return (\n      rawError: Error,\n      req: Request,\n      res: Response,\n      next: NextFunction,\n    ) => {\n      const error = applyInternalErrorFilter(rawError, logger);\n\n      const statusCode = getStatusCode(error);\n      if (options.logAllErrors || statusCode >= 500) {\n        logger.error(`Request failed with status ${statusCode}`, error);\n      }\n\n      if (res.headersSent) {\n        // If the headers have already been sent, do not send the response again\n        // as this will throw an error in the backend.\n        next(error);\n        return;\n      }\n\n      const body: ErrorResponseBody = {\n        error: serializeError(error, { includeStack: showStackTraces }),\n        request: { method: req.method, url: req.url },\n        response: { statusCode },\n      };\n\n      res.status(statusCode).json(body);\n    };\n  }\n}\n\nfunction getStatusCode(error: Error): number {\n  // Look for common http library status codes\n  const knownStatusCodeFields = ['statusCode', 'status'];\n  for (const field of knownStatusCodeFields) {\n    const statusCode = (error as any)[field];\n    if (\n      typeof statusCode === 'number' &&\n      (statusCode | 0) === statusCode && // is whole integer\n      statusCode >= 100 &&\n      statusCode <= 599\n    ) {\n      return statusCode;\n    }\n  }\n\n  // Handle well-known error types\n  switch (error.name) {\n    case NotModifiedError.name:\n      return 304;\n    case InputError.name:\n      return 400;\n    case AuthenticationError.name:\n      return 401;\n    case NotAllowedError.name:\n      return 403;\n    case NotFoundError.name:\n      return 404;\n    case ConflictError.name:\n      return 409;\n    case NotImplementedError.name:\n      return 501;\n    case ServiceUnavailableError.name:\n      return 503;\n    default:\n      break;\n  }\n\n  // Fall back to internal server error\n  return 500;\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorRequestHandler } from 'express';\nimport { LoggerService } from '@backstage/backend-plugin-api';\nimport { ConfigReader } from '@backstage/config';\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport { MiddlewareFactory } from '../../../../backend-defaults/src/entrypoints/rootHttpRouter/http/MiddlewareFactory';\nimport { getRootLogger } from '../logging';\n\n/**\n * Options passed to the {@link errorHandler} middleware.\n *\n * @public\n * @deprecated This type is being deprecated along with the {@link @backstage/backend-common#errorHandler} function.\n */\nexport type ErrorHandlerOptions = {\n  /**\n   * Whether error response bodies should show error stack traces or not.\n   *\n   * If not specified, by default shows stack traces only in development mode.\n   */\n  showStackTraces?: boolean;\n\n  /**\n   * Logger instance to log errors.\n   *\n   * If not specified, the root logger will be used.\n   */\n  logger?: LoggerService;\n\n  /**\n   * Whether any 4xx errors should be logged or not.\n   *\n   * If not specified, default to only logging 5xx errors.\n   */\n  logClientErrors?: boolean;\n};\n\n/**\n * Express middleware to handle errors during request processing.\n *\n * This is commonly the very last middleware in the chain.\n *\n * Its primary purpose is not to do translation of business logic exceptions,\n * but rather to be a global catch-all for uncaught \"fatal\" errors that are\n * expected to result in a 500 error. However, it also does handle some common\n * error types (such as http-error exceptions) and returns the enclosed status\n * code accordingly.\n *\n * @public\n * @returns An Express error request handler\n * @deprecated Use {@link @backstage/backend-defaults/rootHttpRouter#MiddlewareFactory.create.error} instead\n */\nexport function errorHandler(\n  options: ErrorHandlerOptions = {},\n): ErrorRequestHandler {\n  return MiddlewareFactory.create({\n    config: new ConfigReader({}),\n    logger: options.logger ?? getRootLogger(),\n  }).error({\n    logAllErrors: options.logClientErrors,\n    showStackTraces: options.showStackTraces,\n  });\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport { MiddlewareFactory } from '../../../../backend-defaults/src/entrypoints/rootHttpRouter/http/MiddlewareFactory';\nimport { ConfigReader } from '@backstage/config';\nimport { RequestHandler } from 'express';\nimport { getRootLogger } from '../logging';\n\n/**\n * Express middleware to handle requests for missing routes.\n *\n * Should be used as the very last handler in the chain, as it unconditionally\n * returns a 404 status.\n *\n * @public\n * @returns An Express request handler\n * @deprecated Use {@link @backstage/backend-app-api#MiddlewareFactory.create.notFound} instead\n */\nexport function notFoundHandler(): RequestHandler {\n  return MiddlewareFactory.create({\n    config: new ConfigReader({}),\n    logger: getRootLogger(),\n  }).notFound();\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport { MiddlewareFactory } from '../../../../backend-defaults/src/entrypoints/rootHttpRouter/http/MiddlewareFactory';\nimport { RequestHandler } from 'express';\nimport { ConfigReader } from '@backstage/config';\nimport { LoggerService } from '@backstage/backend-plugin-api';\nimport { getRootLogger } from '../logging';\n\n/**\n * Logs incoming requests.\n *\n * @public\n * @param logger - An optional logger to use. If not specified, the root logger will be used.\n * @returns An Express request handler\n * @deprecated Use {@link @backstage/backend-app-api#MiddlewareFactory.create.logging} instead\n */\nexport function requestLoggingHandler(logger?: LoggerService): RequestHandler {\n  return MiddlewareFactory.create({\n    config: new ConfigReader({}),\n    logger: logger ?? getRootLogger(),\n  }).logging();\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NextFunction, Request, Response, RequestHandler } from 'express';\n\n/**\n * A custom status checking function, passed to {@link statusCheckHandler} and\n * {@link createStatusCheckRouter}.\n *\n * @public\n * @deprecated Migrate to the {@link https://backstage.io/docs/backend-system/ | new backend system} and use the {@link https://backstage.io/docs/backend-system/core-services/root-health | Root Health Service} instead.\n */\nexport type StatusCheck = () => Promise<any>;\n\n/**\n * Options passed to {@link statusCheckHandler}.\n *\n * @public\n * @deprecated Migrate to the {@link https://backstage.io/docs/backend-system/ | new backend system} and use the {@link https://backstage.io/docs/backend-system/core-services/root-health | Root Health Service} instead.\n */\nexport interface StatusCheckHandlerOptions {\n  /**\n   * Optional status function which returns a message.\n   */\n  statusCheck?: StatusCheck;\n}\n\n/**\n * Express middleware for status checks.\n *\n * This is commonly used to implement healthcheck and readiness routes.\n *\n * @public\n * @param options - An optional configuration object.\n * @returns An Express error request handler\n * @deprecated Migrate to the {@link https://backstage.io/docs/backend-system/ | new backend system} and use the {@link https://backstage.io/docs/backend-system/core-services/root-health | Root Health Service} instead.\n */\nexport async function statusCheckHandler(\n  options: StatusCheckHandlerOptions = {},\n): Promise<RequestHandler> {\n  const statusCheck: StatusCheck = options.statusCheck\n    ? options.statusCheck\n    : () => Promise.resolve({ status: 'ok' });\n\n  return async (_request: Request, response: Response, next: NextFunction) => {\n    try {\n      const status = await statusCheck();\n      response.status(200).json(status);\n    } catch (err) {\n      next(err);\n    }\n  };\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fs from 'fs-extra';\nimport { resolve as resolvePath, dirname } from 'path';\nimport { LoggerService } from '@backstage/backend-plugin-api';\nimport forge from 'node-forge';\n\nconst FIVE_DAYS_IN_MS = 5 * 24 * 60 * 60 * 1000;\n\nconst IP_HOSTNAME_REGEX = /:|^\\d+\\.\\d+\\.\\d+\\.\\d+$/;\n\nexport async function getGeneratedCertificate(\n  hostname: string,\n  logger: LoggerService,\n) {\n  const hasModules = await fs.pathExists('node_modules');\n  let certPath;\n  if (hasModules) {\n    certPath = resolvePath(\n      'node_modules/.cache/backstage-backend/dev-cert.pem',\n    );\n    await fs.ensureDir(dirname(certPath));\n  } else {\n    certPath = resolvePath('.dev-cert.pem');\n  }\n\n  if (await fs.pathExists(certPath)) {\n    try {\n      const cert = await fs.readFile(certPath);\n\n      const crt = forge.pki.certificateFromPem(cert.toString());\n      const remainingMs = crt.validity.notAfter.getTime() - Date.now();\n      if (remainingMs > FIVE_DAYS_IN_MS) {\n        logger.info('Using existing self-signed certificate');\n        return {\n          key: cert,\n          cert,\n        };\n      }\n    } catch (error) {\n      logger.warn(`Unable to use existing self-signed certificate, ${error}`);\n    }\n  }\n\n  logger.info('Generating new self-signed certificate');\n  const newCert = await generateCertificate(hostname);\n  await fs.writeFile(certPath, newCert.cert + newCert.key, 'utf8');\n  return newCert;\n}\n\nasync function generateCertificate(hostname: string) {\n  const attributes = [\n    {\n      name: 'commonName',\n      value: 'dev-cert',\n    },\n  ];\n\n  const sans = [\n    {\n      type: 2, // DNS\n      value: 'localhost',\n    },\n    {\n      type: 2,\n      value: 'localhost.localdomain',\n    },\n    {\n      type: 2,\n      value: '[::1]',\n    },\n    {\n      type: 7, // IP\n      ip: '127.0.0.1',\n    },\n    {\n      type: 7,\n      ip: 'fe80::1',\n    },\n  ];\n\n  // Add hostname from backend.baseUrl if it doesn't already exist in our list of SANs\n  if (!sans.find(({ value, ip }) => value === hostname || ip === hostname)) {\n    sans.push(\n      IP_HOSTNAME_REGEX.test(hostname)\n        ? {\n            type: 7,\n            ip: hostname,\n          }\n        : {\n            type: 2,\n            value: hostname,\n          },\n    );\n  }\n\n  const params = {\n    algorithm: 'sha256',\n    keySize: 2048,\n    days: 30,\n    extensions: [\n      {\n        name: 'keyUsage',\n        keyCertSign: true,\n        digitalSignature: true,\n        nonRepudiation: true,\n        keyEncipherment: true,\n        dataEncipherment: true,\n      },\n      {\n        name: 'extKeyUsage',\n        serverAuth: true,\n        clientAuth: true,\n        codeSigning: true,\n        timeStamping: true,\n      },\n      {\n        name: 'subjectAltName',\n        altNames: sans,\n      },\n    ],\n  };\n\n  return new Promise<{ key: string; cert: string }>((resolve, reject) =>\n    require('selfsigned').generate(\n      attributes,\n      params,\n      (err: Error, bundle: { private: string; cert: string }) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve({ key: bundle.private, cert: bundle.cert });\n        }\n      },\n    ),\n  );\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as http from 'http';\nimport * as https from 'https';\nimport stoppableServer from 'stoppable';\nimport { RequestListener } from 'http';\nimport { LoggerService } from '@backstage/backend-plugin-api';\nimport { HttpServerOptions, ExtendedHttpServer } from './types';\nimport { getGeneratedCertificate } from './getGeneratedCertificate';\n\n/**\n * Creates a Node.js HTTP or HTTPS server instance.\n *\n * @public\n */\nexport async function createHttpServer(\n  listener: RequestListener,\n  options: HttpServerOptions,\n  deps: { logger: LoggerService },\n): Promise<ExtendedHttpServer> {\n  const server = await createServer(listener, options, deps);\n\n  const stopper = stoppableServer(server, 0);\n  // The stopper here is actually the server itself, so if we try\n  // to call stopper.stop() down in the stop implementation, we'll\n  // be calling ourselves.\n  const stopServer = stopper.stop.bind(stopper);\n\n  return Object.assign(server, {\n    start() {\n      return new Promise<void>((resolve, reject) => {\n        const handleStartupError = (error: Error) => {\n          server.close();\n          reject(error);\n        };\n\n        server.on('error', handleStartupError);\n\n        const { host, port } = options.listen;\n        server.listen(port, host, () => {\n          server.off('error', handleStartupError);\n          deps.logger.info(`Listening on ${host}:${port}`);\n          resolve();\n        });\n      });\n    },\n\n    stop() {\n      return new Promise<void>((resolve, reject) => {\n        stopServer((error?: Error) => {\n          if (error) {\n            reject(error);\n          } else {\n            resolve();\n          }\n        });\n      });\n    },\n\n    port() {\n      const address = server.address();\n      if (typeof address === 'string' || address === null) {\n        throw new Error(`Unexpected server address '${address}'`);\n      }\n      return address.port;\n    },\n  });\n}\n\nasync function createServer(\n  listener: RequestListener,\n  options: HttpServerOptions,\n  deps: { logger: LoggerService },\n): Promise<http.Server> {\n  if (options.https) {\n    const { certificate } = options.https;\n    if (certificate.type === 'generated') {\n      const credentials = await getGeneratedCertificate(\n        certificate.hostname,\n        deps.logger,\n      );\n      return https.createServer(credentials, listener);\n    }\n    return https.createServer(certificate, listener);\n  }\n\n  return http.createServer(listener);\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport compression from 'compression';\nimport cors from 'cors';\nimport express, { Router, ErrorRequestHandler } from 'express';\nimport helmet, { HelmetOptions } from 'helmet';\nimport { ContentSecurityPolicyOptions } from 'helmet/dist/types/middlewares/content-security-policy';\nimport * as http from 'http';\nimport { LoggerService } from '@backstage/backend-plugin-api';\nimport { useHotCleanup } from '../../hot';\nimport { getRootLogger } from '../../logging';\nimport {\n  errorHandler as defaultErrorHandler,\n  notFoundHandler,\n  requestLoggingHandler as defaultRequestLoggingHandler,\n} from '../../middleware';\nimport { RequestLoggingHandlerFactory, ServiceBuilder } from '../types';\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport {\n  readCorsOptions,\n  readHelmetOptions,\n  readHttpServerOptions,\n  HttpServerOptions,\n  createHttpServer,\n} from '../../../../../backend-defaults/src/entrypoints/rootHttpRouter/http';\n\nexport type CspOptions = Record<string, string[]>;\n\nexport class ServiceBuilderImpl implements ServiceBuilder {\n  private logger: LoggerService | undefined;\n  private serverOptions: HttpServerOptions;\n  private helmetOptions: HelmetOptions;\n  private corsOptions: cors.CorsOptions;\n  private routers: [string, Router][];\n  private requestLoggingHandler: RequestLoggingHandlerFactory | undefined;\n  private errorHandler: ErrorRequestHandler | undefined;\n  private useDefaultErrorHandler: boolean;\n  // Reference to the module where builder is created - needed for hot module\n  // reloading\n  private module: NodeModule;\n\n  constructor(moduleRef: NodeModule) {\n    this.routers = [];\n    this.module = moduleRef;\n    this.useDefaultErrorHandler = true;\n\n    this.serverOptions = readHttpServerOptions();\n    this.corsOptions = readCorsOptions();\n    this.helmetOptions = readHelmetOptions();\n  }\n\n  loadConfig(config: Config): ServiceBuilder {\n    const backendConfig = config.getOptionalConfig('backend');\n\n    this.serverOptions = readHttpServerOptions(backendConfig);\n    this.corsOptions = readCorsOptions(backendConfig);\n    this.helmetOptions = readHelmetOptions(backendConfig);\n\n    return this;\n  }\n\n  setPort(port: number): ServiceBuilder {\n    this.serverOptions.listen.port = port;\n    return this;\n  }\n\n  setHost(host: string): ServiceBuilder {\n    this.serverOptions.listen.host = host;\n    return this;\n  }\n\n  setLogger(logger: LoggerService): ServiceBuilder {\n    this.logger = logger;\n    return this;\n  }\n\n  setHttpsSettings(settings: {\n    certificate: { key: string; cert: string } | { hostname: string };\n  }): ServiceBuilder {\n    if ('hostname' in settings.certificate) {\n      this.serverOptions.https = {\n        certificate: {\n          ...settings.certificate,\n          type: 'generated',\n        },\n      };\n    } else {\n      this.serverOptions.https = {\n        certificate: {\n          ...settings.certificate,\n          type: 'pem',\n        },\n      };\n    }\n    return this;\n  }\n\n  enableCors(options: cors.CorsOptions): ServiceBuilder {\n    this.corsOptions = options;\n    return this;\n  }\n\n  setCsp(options: CspOptions): ServiceBuilder {\n    const csp = this.helmetOptions.contentSecurityPolicy;\n    this.helmetOptions.contentSecurityPolicy = {\n      ...(typeof csp === 'object' ? csp : {}),\n      directives: applyCspDirectives(options),\n    };\n    return this;\n  }\n\n  addRouter(root: string, router: Router): ServiceBuilder {\n    this.routers.push([root, router]);\n    return this;\n  }\n\n  setRequestLoggingHandler(\n    requestLoggingHandler: RequestLoggingHandlerFactory,\n  ) {\n    this.requestLoggingHandler = requestLoggingHandler;\n    return this;\n  }\n\n  setErrorHandler(errorHandler: ErrorRequestHandler) {\n    this.errorHandler = errorHandler;\n    return this;\n  }\n\n  disableDefaultErrorHandler() {\n    this.useDefaultErrorHandler = false;\n    return this;\n  }\n\n  async start(): Promise<http.Server> {\n    const app = express();\n    const logger = this.logger ?? getRootLogger();\n\n    app.use(helmet(this.helmetOptions));\n    app.use(cors(this.corsOptions));\n    app.use(compression());\n    app.use(\n      (this.requestLoggingHandler ?? defaultRequestLoggingHandler)(logger),\n    );\n    for (const [root, route] of this.routers) {\n      app.use(root, route);\n    }\n    app.use(notFoundHandler());\n\n    if (this.errorHandler) {\n      app.use(this.errorHandler);\n    }\n\n    if (this.useDefaultErrorHandler) {\n      app.use(defaultErrorHandler());\n    }\n\n    const server = await createHttpServer(app, this.serverOptions, { logger });\n\n    useHotCleanup(this.module, () =>\n      server.stop().catch(error => {\n        console.error(error);\n      }),\n    );\n\n    await server.start();\n\n    return server;\n  }\n}\n\n// TODO(Rugvip): This is a duplicate of the same logic over in backend-app-api.\n//               It's needed as we don't want to export this helper from there, but need\n//               It to implement the setCsp method here.\nexport function applyCspDirectives(\n  directives: Record<string, string[] | false> | undefined,\n): ContentSecurityPolicyOptions['directives'] {\n  const result: ContentSecurityPolicyOptions['directives'] =\n    helmet.contentSecurityPolicy.getDefaultDirectives();\n\n  // TODO(Rugvip): We currently use non-precompiled AJV for validation in the frontend, which uses eval.\n  //               It should be replaced by any other solution that doesn't require unsafe-eval.\n  result['script-src'] = [\"'self'\", \"'unsafe-eval'\"];\n\n  // TODO(Rugvip): This is removed so that we maintained backwards compatibility\n  //               when bumping to helmet v5, we could remove this as well as\n  //               skip setting `useDefaults: false` in the future.\n  delete result['form-action'];\n\n  if (directives) {\n    for (const [key, value] of Object.entries(directives)) {\n      if (value === false) {\n        delete result[key];\n      } else {\n        result[key] = value;\n      }\n    }\n  }\n\n  return result;\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ServiceBuilderImpl } from './lib/ServiceBuilderImpl';\nimport { ServiceBuilder } from './types';\n\n/**\n * Creates a new service builder.\n * @public\n * @deprecated We are going to deprecated this old way of creating services in a near future, if you are using this service helper, please checkout the {@link https://backstage.io/docs/backend-system/building-backends/migrating | backend} and {@link https://backstage.io/docs/backend-system/building-plugins-and-modules/migrating | plugin} migration guides.\n */\nexport function createServiceBuilder(_module: NodeModule): ServiceBuilder {\n  return new ServiceBuilderImpl(_module);\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LoggerService } from '@backstage/backend-plugin-api';\nimport Router from 'express-promise-router';\nimport express from 'express';\nimport { errorHandler, statusCheckHandler, StatusCheck } from '..';\n\n/**\n * Creates a default status checking router, that you can add to your express\n * app.\n *\n * @remarks\n *\n * This adds a `/healthcheck` route (or any other path, if given as an\n * argument), which your infra can call to see if the service is ready to serve\n * requests.\n *\n * @public\n * @deprecated Migrate to the {@link https://backstage.io/docs/backend-system/ | new backend system} and use the {@link https://backstage.io/docs/backend-system/core-services/root-health | Root Health Service} instead.\n */\nexport async function createStatusCheckRouter(options: {\n  logger: LoggerService;\n  /**\n   * The path (including a leading slash) that the health check should be\n   * mounted on.\n   *\n   * @defaultValue '/healthcheck'\n   */\n  path?: string;\n  /**\n   * If not implemented, the default express middleware always returns 200.\n   * Override this to implement your own logic for a health check.\n   */\n  statusCheck?: StatusCheck;\n}): Promise<express.Router> {\n  const router = Router();\n  const { path = '/healthcheck', statusCheck } = options;\n\n  router.use(path, await statusCheckHandler({ statusCheck }));\n  router.use(errorHandler());\n\n  return router;\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Docker from 'dockerode';\nimport fs from 'fs-extra';\nimport { ForwardedError } from '@backstage/errors';\nimport { PassThrough } from 'stream';\nimport { ContainerRunner, RunContainerOptions } from './ContainerRunner';\n\nexport type UserOptions = {\n  User?: string;\n};\n\n/**\n * A {@link ContainerRunner} for Docker containers.\n *\n * @public\n * @deprecated This class is deprecated and will be removed in a future release.\n */\nexport class DockerContainerRunner implements ContainerRunner {\n  private readonly dockerClient: Docker;\n\n  constructor(options: { dockerClient: Docker }) {\n    this.dockerClient = options.dockerClient;\n  }\n\n  async runContainer(options: RunContainerOptions) {\n    const {\n      imageName,\n      command,\n      args,\n      logStream = new PassThrough(),\n      mountDirs = {},\n      workingDir,\n      envVars = {},\n      pullImage = true,\n      defaultUser = false,\n      pullOptions = {},\n    } = options;\n\n    // Show a better error message when Docker is unavailable.\n    try {\n      await this.dockerClient.ping();\n    } catch (e) {\n      throw new ForwardedError(\n        'This operation requires Docker. Docker does not appear to be available. Docker.ping() failed with',\n        e,\n      );\n    }\n\n    if (pullImage) {\n      await new Promise<void>((resolve, reject) => {\n        this.dockerClient.pull(imageName, pullOptions, (err, stream) => {\n          if (err) return reject(err);\n          stream.pipe(logStream, { end: false });\n          stream.on('end', () => resolve());\n          stream.on('error', (error: Error) => reject(error));\n          return undefined;\n        });\n      });\n    }\n\n    const userOptions: UserOptions = {};\n    if (!defaultUser && process.getuid && process.getgid) {\n      // Files that are created inside the Docker container will be owned by\n      // root on the host system on non Mac systems, because of reasons. Mainly the fact that\n      // volume sharing is done using NFS on Mac and actual mounts in Linux world.\n      // So we set the user in the container as the same user and group id as the host.\n      // On Windows we don't have process.getuid nor process.getgid\n      userOptions.User = `${process.getuid()}:${process.getgid()}`;\n    }\n\n    // Initialize volumes to mount based on mountDirs map\n    const Volumes: { [T: string]: object } = {};\n    for (const containerDir of Object.values(mountDirs)) {\n      Volumes[containerDir] = {};\n    }\n\n    // Create bind volumes\n    const Binds: string[] = [];\n    for (const [hostDir, containerDir] of Object.entries(mountDirs)) {\n      // Need to use realpath here as Docker mounting does not like\n      // symlinks for binding volumes\n      const realHostDir = await fs.realpath(hostDir);\n      Binds.push(`${realHostDir}:${containerDir}`);\n    }\n\n    // Create docker environment variables array\n    const Env = [];\n    for (const [key, value] of Object.entries(envVars)) {\n      Env.push(`${key}=${value}`);\n    }\n\n    const [{ Error: error, StatusCode: statusCode }] =\n      await this.dockerClient.run(imageName, args, logStream, {\n        Volumes,\n        HostConfig: {\n          AutoRemove: true,\n          Binds,\n        },\n        ...(workingDir ? { WorkingDir: workingDir } : {}),\n        Entrypoint: command,\n        Env,\n        ...userOptions,\n      } as Docker.ContainerCreateOptions);\n\n    if (error) {\n      throw new Error(\n        `Docker failed to run with the following error message: ${error}`,\n      );\n    }\n\n    if (statusCode !== 0) {\n      throw new Error(\n        `Docker container returned a non-zero exit code (${statusCode})`,\n      );\n    }\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PassThrough, Writable } from 'stream';\nimport { ContainerRunner, RunContainerOptions } from './ContainerRunner';\nimport {\n  KubeConfig,\n  BatchV1Api,\n  V1Job,\n  V1EnvVar,\n  Log,\n  HttpError,\n  V1Status,\n  V1VolumeMount,\n  V1PodTemplateSpec,\n  V1Pod,\n  Watch,\n} from '@kubernetes/client-node';\nimport { v4 as uuid } from 'uuid';\n\n/**\n * An existing Kubernetes volume that will be used as base for mounts.\n *\n * Every mount must start with the 'basePath'.\n *\n * @public\n * @deprecated This type is deprecated and will be removed in a future release.\n */\nexport type KubernetesContainerRunnerMountBase = {\n  volumeName: string;\n  basePath: string;\n};\n\n/**\n * Options to create a {@link KubernetesContainerRunner}\n *\n * Kubernetes Jobs will be created on the provided 'namespace'\n * and their names will be prefixed with the provided 'name'.\n *\n * 'podTemplate' defines a Pod template for the Jobs. It has to include\n * a volume definition named as the {@link KubernetesContainerRunnerMountBase} 'volumeName'.\n *\n * @public\n * @deprecated This type is deprecated and will be removed in a future release.\n */\nexport type KubernetesContainerRunnerOptions = {\n  kubeConfig: KubeConfig;\n  name: string;\n  namespace?: string;\n  mountBase?: KubernetesContainerRunnerMountBase;\n  podTemplate?: V1PodTemplateSpec;\n  timeoutMs?: number;\n};\n\n/**\n * A {@link ContainerRunner} for Kubernetes.\n *\n * Runs containers leveraging Jobs on a Kubernetes cluster\n *\n * @public\n * @deprecated This class is deprecated and will be removed in a future release.\n */\nexport class KubernetesContainerRunner implements ContainerRunner {\n  private readonly kubeConfig: KubeConfig;\n  private readonly batchV1Api: BatchV1Api;\n  private readonly log: Log;\n  private readonly name: string;\n  private readonly namespace: string;\n  private readonly mountBase?: KubernetesContainerRunnerMountBase;\n  private readonly podTemplate?: V1PodTemplateSpec;\n  private readonly timeoutMs: number;\n  private readonly containerName = 'executor';\n\n  private getNamespace(kubeConfig: KubeConfig, namespace?: string): string {\n    let _namespace = namespace;\n    if (!_namespace) {\n      _namespace = kubeConfig.getContextObject(\n        kubeConfig.currentContext,\n      )?.namespace;\n    }\n    if (!_namespace) {\n      throw new Error('Cannot read current namespace from Kubernetes cluster');\n    }\n    return _namespace;\n  }\n\n  private validateMountBase(\n    mountBase: KubernetesContainerRunnerMountBase,\n    podTemplate?: V1PodTemplateSpec,\n  ): KubernetesContainerRunnerMountBase {\n    if (\n      !podTemplate?.spec?.volumes?.filter(v => v.name === mountBase.volumeName)\n        .length\n    ) {\n      throw new Error(\n        `A Pod template containing the volume ${mountBase.volumeName} is required`,\n      );\n    }\n    if (!mountBase.basePath.endsWith('/')) {\n      mountBase.basePath += '/';\n    }\n    return mountBase;\n  }\n\n  constructor(options: KubernetesContainerRunnerOptions) {\n    const { kubeConfig, name, namespace, mountBase, podTemplate, timeoutMs } =\n      options;\n    this.kubeConfig = kubeConfig;\n    this.batchV1Api = kubeConfig.makeApiClient(BatchV1Api);\n    this.log = new Log(kubeConfig);\n    this.name = name;\n    this.namespace = this.getNamespace(kubeConfig, namespace);\n    if (mountBase) {\n      this.mountBase = this.validateMountBase(mountBase, podTemplate);\n    }\n    this.podTemplate = podTemplate;\n    this.timeoutMs = timeoutMs || 120 * 1000;\n  }\n\n  async runContainer(options: RunContainerOptions) {\n    const {\n      imageName,\n      command,\n      args,\n      logStream,\n      mountDirs = {},\n      workingDir,\n      envVars = {},\n    } = options;\n\n    const containerLogStream = new PassThrough();\n    if (logStream) {\n      containerLogStream.pipe(logStream, { end: false });\n    }\n\n    const commandArr = typeof command === 'string' ? [command] : command;\n\n    const volumeMounts: V1VolumeMount[] = [];\n    for (const [hostDir, containerDir] of Object.entries(mountDirs)) {\n      if (!this.mountBase) {\n        throw new Error(\n          'A volumeName and a basePath must be configured to bind mount directories',\n        );\n      }\n      if (!hostDir.startsWith(this.mountBase.basePath)) {\n        throw new Error(\n          `Mounted '${hostDir}' dir should be subdirectories of '${this.mountBase.basePath}'`,\n        );\n      }\n      volumeMounts.push({\n        name: this.mountBase.volumeName,\n        mountPath: containerDir,\n        subPath: hostDir.slice(this.mountBase.basePath.length),\n      });\n    }\n\n    const env = [];\n    for (const [key, value] of Object.entries(envVars)) {\n      env.push({\n        name: key,\n        value: value,\n      } as V1EnvVar);\n    }\n\n    const taskId = uuid();\n\n    // TODO find a way to merge recursively\n    const mergedPodTemplate: V1PodTemplateSpec = {\n      metadata: {\n        ...{\n          labels: {\n            task: taskId,\n          },\n        },\n        ...this.podTemplate?.metadata,\n      },\n      spec: {\n        ...{\n          containers: [\n            {\n              name: this.containerName,\n              image: imageName,\n              command: commandArr,\n              args: args,\n              env: env,\n              workingDir: workingDir,\n              volumeMounts: volumeMounts,\n            },\n          ],\n          restartPolicy: 'Never',\n        },\n        ...this.podTemplate?.spec,\n      },\n    };\n\n    const jobSpec: V1Job = {\n      metadata: {\n        generateName: `${this.name}-`,\n      },\n      spec: {\n        backoffLimit: 0,\n        ttlSecondsAfterFinished: 60,\n        template: mergedPodTemplate,\n      },\n    };\n\n    await this.runJob(jobSpec, taskId, containerLogStream);\n  }\n\n  private handleError(err: any, errorCallback: (reason: any) => void) {\n    if (err.code !== 'ECONNRESET' && err.message !== 'aborted') {\n      errorCallback(\n        handleKubernetesError(\n          'Kubernetes watch request failed with the following error message:',\n          err,\n        ),\n      );\n    }\n  }\n\n  private watchPod(\n    taskId: string,\n    callback: (pod: V1Pod) => void,\n    errorCallback: (reason: any) => void,\n  ): Promise<{ abort: () => void }> {\n    const watch = new Watch(this.kubeConfig);\n    const labelSelector = `task=${taskId}`;\n    return watch.watch(\n      `/api/v1/namespaces/${this.namespace}/pods`,\n      {\n        labelSelector,\n      },\n      (_, pod) => {\n        callback(pod);\n      },\n      err => {\n        if (err) {\n          this.handleError(err, errorCallback);\n        }\n      },\n    );\n  }\n\n  private tailLogs(\n    taskId: string,\n    logStream: Writable,\n  ): { promise: Promise<void>; close: () => Promise<void> } {\n    let log: Promise<{ abort: () => void }>;\n    let req: Promise<{ abort: () => void }>;\n    const watchPromise = new Promise<void>((_, reject) => {\n      req = this.watchPod(\n        taskId,\n        pod => {\n          if (\n            log === undefined &&\n            (pod.status?.phase === 'Running' ||\n              pod.status?.phase === 'Succeeded' ||\n              pod.status?.phase === 'Failed')\n          ) {\n            log = this.log.log(\n              this.namespace,\n              pod.metadata?.name!,\n              this.containerName,\n              logStream,\n              { follow: true },\n            );\n          }\n        },\n        reject,\n      );\n    });\n    const logPromise = new Promise<void>((resolve, _) => {\n      if (!logStream.writableFinished) {\n        logStream.on('finish', () => {\n          resolve();\n        });\n      } else {\n        resolve();\n      }\n    });\n    const close = async () => {\n      if (req) {\n        (await req).abort();\n      }\n      if (log) {\n        (await log).abort();\n      }\n    };\n    return { promise: Promise.race([watchPromise, logPromise]), close };\n  }\n\n  private waitPod(taskId: string): {\n    promise: Promise<void>;\n    close: () => Promise<void>;\n  } {\n    let req: Promise<{ abort: () => void }>;\n    const promise = new Promise<void>(async (resolve, reject) => {\n      req = this.watchPod(\n        taskId,\n        pod => {\n          if (pod.status?.phase === 'Succeeded') {\n            resolve();\n          }\n          if (pod.status?.phase === 'Failed') {\n            reject(new Error('Container execution failed'));\n          }\n        },\n        reject,\n      );\n    });\n    const close = async () => {\n      if (req) {\n        (await req).abort();\n      }\n    };\n    return { promise, close };\n  }\n\n  private async createJob(jobSpec: V1Job): Promise<any> {\n    return this.batchV1Api\n      .createNamespacedJob(this.namespace, jobSpec)\n      .catch(err => {\n        throw handleKubernetesError(\n          'Kubernetes Job creation failed with the following error message:',\n          err,\n        );\n      });\n  }\n\n  private async runJob(\n    jobSpec: V1Job,\n    taskId: string,\n    logStream: Writable,\n  ): Promise<any> {\n    let timeout: NodeJS.Timeout;\n    const timeoutPromise = new Promise<void>((_, reject) => {\n      timeout = setTimeout(\n        reject,\n        this.timeoutMs,\n        new Error(`Failed to complete in ${this.timeoutMs} ms`),\n      );\n    });\n\n    const { promise: waitPromise, close: waitClose } = this.waitPod(taskId);\n    const { promise: tailPromise, close: tailClose } = this.tailLogs(\n      taskId,\n      logStream,\n    );\n\n    const taskPromise = Promise.all([\n      waitPromise,\n      tailPromise,\n      this.createJob(jobSpec),\n    ]).finally(() => {\n      clearTimeout(timeout);\n    });\n\n    return Promise.race([timeoutPromise, taskPromise])\n      .finally(() => {\n        return waitClose();\n      })\n      .finally(() => {\n        return tailClose();\n      });\n  }\n}\n\nfunction handleKubernetesError(message: string, err: Error): Error {\n  if (err instanceof HttpError) {\n    return new Error(`${message} ${(err.body as V1Status).message}`);\n  }\n  return new Error(`${message} ${err}`);\n}\n","/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\n\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport { HostDiscovery as _HostDiscovery } from '../../../backend-defaults/src/entrypoints/discovery/HostDiscovery';\n\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport { CacheManager as _CacheManager } from '../../../backend-defaults/src/entrypoints/cache/CacheManager';\n\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport {\n  type PluginCacheManager as _PluginCacheManager,\n  type CacheManagerOptions as _CacheManagerOptions,\n} from '../../../backend-defaults/src/entrypoints/cache/types';\n\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport {\n  dropDatabase as _dropDatabase,\n  DatabaseManager as _DatabaseManager,\n  type DatabaseManagerOptions as _DatabaseManagerOptions,\n  type LegacyRootDatabaseService as _LegacyRootDatabaseService,\n} from '../../../backend-defaults/src/entrypoints/database/DatabaseManager';\n\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport { AzureUrlReader as _AzureUrlReader } from '../../../backend-defaults/src/entrypoints/urlReader/lib/AzureUrlReader';\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport { BitbucketCloudUrlReader as _BitbucketCloudUrlReader } from '../../../backend-defaults/src/entrypoints/urlReader/lib/BitbucketCloudUrlReader';\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport { BitbucketUrlReader as _BitbucketUrlReader } from '../../../backend-defaults/src/entrypoints/urlReader/lib/BitbucketUrlReader';\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport { BitbucketServerUrlReader as _BitbucketServerUrlReader } from '../../../backend-defaults/src/entrypoints/urlReader/lib/BitbucketServerUrlReader';\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport { GerritUrlReader as _GerritUrlReader } from '../../../backend-defaults/src/entrypoints/urlReader/lib/GerritUrlReader';\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport { GithubUrlReader as _GithubUrlReader } from '../../../backend-defaults/src/entrypoints/urlReader/lib/GithubUrlReader';\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport { GitlabUrlReader as _GitlabUrlReader } from '../../../backend-defaults/src/entrypoints/urlReader/lib/GitlabUrlReader';\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport { GiteaUrlReader as _GiteaUrlReader } from '../../../backend-defaults/src/entrypoints/urlReader/lib/GiteaUrlReader';\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport { HarnessUrlReader as _HarnessUrlReader } from '../../../backend-defaults/src/entrypoints/urlReader/lib/HarnessUrlReader';\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport { AwsS3UrlReader as _AwsS3UrlReader } from '../../../backend-defaults/src/entrypoints/urlReader/lib/AwsS3UrlReader';\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport { FetchUrlReader as _FetchUrlReader } from '../../../backend-defaults/src/entrypoints/urlReader/lib/FetchUrlReader';\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport { UrlReaders as _UrlReaders } from '../../../backend-defaults/src/entrypoints/urlReader/lib/UrlReaders';\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport { ReadUrlResponseFactory as _ReadUrlResponseFactory } from '../../../backend-defaults/src/entrypoints/urlReader/lib/ReadUrlResponseFactory';\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport type { UrlReadersOptions as _UrlReadersOptions } from '../../../backend-defaults/src/entrypoints/urlReader/lib/UrlReaders';\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport type { FromReadableArrayOptions as _FromReadableArrayOptions } from '../../../backend-defaults/src/entrypoints/urlReader/lib/types';\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport type {\n  ReaderFactory as _ReaderFactory,\n  ReadTreeResponseFactory as _ReadTreeResponseFactory,\n  ReadTreeResponseFactoryOptions as _ReadTreeResponseFactoryOptions,\n  ReadUrlResponseFactoryFromStreamOptions as _ReadUrlResponseFactoryFromStreamOptions,\n  UrlReaderPredicateTuple as _UrlReaderPredicateTuple,\n} from '../../../backend-defaults/src/entrypoints/urlReader/lib/types';\n\nimport {\n  DiscoveryService,\n  CacheService,\n  CacheServiceOptions,\n  CacheServiceSetOptions,\n  DatabaseService as _PluginDatabaseManager,\n  isDatabaseConflictError as _isDatabaseConflictError,\n  resolvePackagePath as _resolvePackagePath,\n  resolveSafeChildPath as _resolveSafeChildPath,\n  isChildPath as _isChildPath,\n  ReadTreeOptions as _ReadTreeOptions,\n  ReadTreeResponse as _ReadTreeResponse,\n  ReadTreeResponseFile as _ReadTreeResponseFile,\n  ReadTreeResponseDirOptions as _ReadTreeResponseDirOptions,\n  ReadUrlOptions as _ReadUrlOptions,\n  ReadUrlResponse as _ReadUrlResponse,\n  SearchOptions as _SearchOptions,\n  SearchResponse as _SearchResponse,\n  SearchResponseFile as _SearchResponseFile,\n  UrlReaderService as _UrlReaderService,\n  LifecycleService,\n  PluginMetadataService,\n} from '@backstage/backend-plugin-api';\n\nexport * from './hot';\nexport * from './config';\nexport * from './scm';\nexport * from './tokens';\nexport * from './logging';\nexport * from './service';\nexport * from './middleware';\nexport * from './util';\n\n/**\n * @public\n * @deprecated Use `DiscoveryService` from `@backstage/backend-plugin-api` instead\n */\nexport type PluginEndpointDiscovery = DiscoveryService;\n\n/**\n * HostDiscovery is a basic PluginEndpointDiscovery implementation\n * that can handle plugins that are hosted in a single or multiple deployments.\n *\n * The deployment may be scaled horizontally, as long as the external URL\n * is the same for all instances. However, internal URLs will always be\n * resolved to the same host, so there won't be any balancing of internal traffic.\n *\n * @public\n * @deprecated Please import from `@backstage/backend-defaults/discovery` instead.\n */\nexport class HostDiscovery implements DiscoveryService {\n  /**\n   * Creates a new HostDiscovery discovery instance by reading\n   * from the `backend` config section, specifically the `.baseUrl` for\n   * discovering the external URL, and the `.listen` and `.https` config\n   * for the internal one.\n   *\n   * Can be overridden in config by providing a target and corresponding plugins in `discovery.endpoints`.\n   * eg.\n   * ```yaml\n   * discovery:\n   *  endpoints:\n   *    - target: https://internal.example.com/internal-catalog\n   *      plugins: [catalog]\n   *    - target: https://internal.example.com/secure/api/{{pluginId}}\n   *      plugins: [auth, permission]\n   *    - target:\n   *        internal: https://internal.example.com/search\n   *        external: https://example.com/search\n   *      plugins: [search]\n   * ```\n   *\n   * The basePath defaults to `/api`, meaning the default full internal\n   * path for the `catalog` plugin will be `http://localhost:7007/api/catalog`.\n   */\n  static fromConfig(config: Config, options?: { basePath?: string }) {\n    return new HostDiscovery(_HostDiscovery.fromConfig(config, options));\n  }\n\n  private constructor(private readonly impl: _HostDiscovery) {}\n\n  async getBaseUrl(pluginId: string): Promise<string> {\n    return this.impl.getBaseUrl(pluginId);\n  }\n\n  async getExternalBaseUrl(pluginId: string): Promise<string> {\n    return this.impl.getExternalBaseUrl(pluginId);\n  }\n}\n\n/**\n * SingleHostDiscovery is a basic PluginEndpointDiscovery implementation\n * that assumes that all plugins are hosted in a single deployment.\n *\n * The deployment may be scaled horizontally, as long as the external URL\n * is the same for all instances. However, internal URLs will always be\n * resolved to the same host, so there won't be any balancing of internal traffic.\n *\n * @public\n * @deprecated Use `HostDiscovery` from `@backstage/backend-defaults/discovery` instead\n */\nexport { HostDiscovery as SingleHostDiscovery };\n\n/**\n * @public\n * @deprecated Use `CacheManager` from the `@backstage/backend-defaults` package instead\n */\nexport class CacheManager extends _CacheManager {}\n\n/**\n * @public\n * @deprecated Use `CacheManagerOptions` from the `@backstage/backend-defaults` package instead\n */\nexport type CacheManagerOptions = _CacheManagerOptions;\n\n/**\n * @public\n * @deprecated Use `PluginCacheManager` from the `@backstage/backend-defaults` package instead\n */\nexport type PluginCacheManager = _PluginCacheManager;\n\n/**\n * @public\n * @deprecated Use `CacheService` from the `@backstage/backend-plugin-api` package instead\n */\nexport type CacheClient = CacheService;\n\n/**\n * @public\n * @deprecated Use `CacheServiceSetOptions` from the `@backstage/backend-plugin-api` package instead\n */\nexport type CacheClientSetOptions = CacheServiceSetOptions;\n\n/**\n * @public\n * @deprecated Use `CacheServiceOptions` from the `@backstage/backend-plugin-api` package instead\n */\nexport type CacheClientOptions = CacheServiceOptions;\n\n/**\n * @public\n * @deprecated Use `DatabaseManager` from the `@backstage/backend-defaults` package instead\n */\nexport class DatabaseManager implements LegacyRootDatabaseService {\n  private constructor(private readonly _databaseManager: _DatabaseManager) {}\n\n  static fromConfig(\n    config: Config,\n    options?: DatabaseManagerOptions,\n  ): DatabaseManager {\n    const _databaseManager = _DatabaseManager.fromConfig(config, options);\n    return new DatabaseManager(_databaseManager);\n  }\n\n  forPlugin(\n    pluginId: string,\n    deps?:\n      | { lifecycle: LifecycleService; pluginMetadata: PluginMetadataService }\n      | undefined,\n  ): PluginDatabaseManager {\n    return this._databaseManager.forPlugin(pluginId, deps);\n  }\n}\n\n/**\n * @public\n * @deprecated Use `DatabaseManagerOptions` from the `@backstage/backend-defaults` package instead\n */\nexport type DatabaseManagerOptions = _DatabaseManagerOptions;\n\n/**\n * @public\n * @deprecated Use `DatabaseService` from the `@backstage/backend-plugin-api` package instead\n */\nexport type PluginDatabaseManager = _PluginDatabaseManager;\n\n/**\n * @public\n * @deprecated Use `LegacyRootDatabaseService` from the `@backstage/backend-defaults` package instead\n */\nexport type LegacyRootDatabaseService = _LegacyRootDatabaseService;\n\n/**\n * @public\n * @deprecated Use `dropDatabase` from the `@backstage/backend-defaults` package instead\n */\nexport const dropDatabase = _dropDatabase;\n\n/**\n * @public\n * @deprecated This function is deprecated and will be removed in a future release, see https://github.com/backstage/backstage/issues/24493.\n * Please use the `isDatabaseConflictError` function from the `@backstage/backend-plugin-api` package instead.\n */\nexport const isDatabaseConflictError = _isDatabaseConflictError;\n\n/**\n * @public\n * @deprecated This function is deprecated and will be removed in a future release, see https://github.com/backstage/backstage/issues/24493.\n * Please use the `resolvePackagePath` function from the `@backstage/backend-plugin-api` package instead.\n */\nexport const resolvePackagePath = _resolvePackagePath;\n\n/**\n * @public\n * @deprecated This function is deprecated and will be removed in a future release, see https://github.com/backstage/backstage/issues/24493.\n * Please use the `resolveSafeChildPath` function from the `@backstage/backend-plugin-api` package instead.\n */\nexport const resolveSafeChildPath = _resolveSafeChildPath;\n\n/**\n * @public\n * @deprecated This function is deprecated and will be removed in a future release, see https://github.com/backstage/backstage/issues/24493.\n * Please use the `isChildPath` function from the `@backstage/cli-common` package instead.\n */\nexport const isChildPath = _isChildPath;\n\n/**\n * @public\n * @deprecated Import from `@backstage/backend-defaults/urlReader` instead\n */\nexport class AzureUrlReader extends _AzureUrlReader {}\n\n/**\n * @public\n * @deprecated Import from `@backstage/backend-defaults/urlReader` instead\n */\nexport class BitbucketCloudUrlReader extends _BitbucketCloudUrlReader {}\n\n/**\n * @public\n * @deprecated Import from `@backstage/backend-defaults/urlReader` instead\n */\nexport class BitbucketUrlReader extends _BitbucketUrlReader {}\n\n/**\n * @public\n * @deprecated Import from `@backstage/backend-defaults/urlReader` instead\n */\nexport class BitbucketServerUrlReader extends _BitbucketServerUrlReader {}\n\n/**\n * @public\n * @deprecated Import from `@backstage/backend-defaults/urlReader` instead\n */\nexport class GerritUrlReader extends _GerritUrlReader {}\n\n/**\n * @public\n * @deprecated Import from `@backstage/backend-defaults/urlReader` instead\n */\nexport class GithubUrlReader extends _GithubUrlReader {}\n\n/**\n * @public\n * @deprecated Import from `@backstage/backend-defaults/urlReader` instead\n */\nexport class GitlabUrlReader extends _GitlabUrlReader {}\n\n/**\n * @public\n * @deprecated Import from `@backstage/backend-defaults/urlReader` instead\n */\nexport class GiteaUrlReader extends _GiteaUrlReader {}\n\n/**\n * @public\n * @deprecated Import from `@backstage/backend-defaults/urlReader` instead\n */\nexport class HarnessUrlReader extends _HarnessUrlReader {}\n\n/**\n * @public\n * @deprecated Import from `@backstage/backend-defaults/urlReader` instead\n */\nexport class AwsS3UrlReader extends _AwsS3UrlReader {}\n\n/**\n * @public\n * @deprecated Import from `@backstage/backend-defaults/urlReader` instead\n */\nexport class FetchUrlReader extends _FetchUrlReader {}\n\n/**\n * @public\n * @deprecated Import from `@backstage/backend-defaults/urlReader` instead\n */\nexport class UrlReaders extends _UrlReaders {}\n\n/**\n * @public\n * @deprecated Import from `@backstage/backend-defaults/urlReader` instead\n */\nexport class ReadUrlResponseFactory extends _ReadUrlResponseFactory {}\n\n/**\n * @public\n * @deprecated Import from `@backstage/backend-defaults/urlReader` instead\n */\nexport type UrlReadersOptions = _UrlReadersOptions;\n\n/**\n * @public\n * @deprecated Import from `@backstage/backend-defaults/urlReader` instead\n */\nexport type FromReadableArrayOptions = _FromReadableArrayOptions;\n\n/**\n * @public\n * @deprecated Import from `@backstage/backend-defaults/urlReader` instead\n */\nexport type ReaderFactory = _ReaderFactory;\n\n/**\n * @public\n * @deprecated Import from `@backstage/backend-defaults/urlReader` instead\n */\nexport type ReadTreeResponseFactory = _ReadTreeResponseFactory;\n\n/**\n * @public\n * @deprecated Import from `@backstage/backend-defaults/urlReader` instead\n */\nexport type ReadTreeResponseFactoryOptions = _ReadTreeResponseFactoryOptions;\n\n/**\n * @public\n * @deprecated Import from `@backstage/backend-defaults/urlReader` instead\n */\nexport type ReadUrlResponseFactoryFromStreamOptions =\n  _ReadUrlResponseFactoryFromStreamOptions;\n\n/**\n * @public\n * @deprecated Import from `@backstage/backend-defaults/urlReader` instead\n */\nexport type UrlReaderPredicateTuple = _UrlReaderPredicateTuple;\n\n/**\n * @public\n * @deprecated Use `UrlReaderServiceReadTreeOptions` from `@backstage/backend-plugin-api` instead\n */\nexport type ReadTreeOptions = _ReadTreeOptions;\n\n/**\n * @public\n * @deprecated Use `UrlReaderServiceReadTreeResponse` from `@backstage/backend-plugin-api` instead\n */\nexport type ReadTreeResponse = _ReadTreeResponse;\n\n/**\n * @public\n * @deprecated Use `UrlReaderServiceReadTreeResponseFile` from `@backstage/backend-plugin-api` instead\n */\nexport type ReadTreeResponseFile = _ReadTreeResponseFile;\n\n/**\n * @public\n * @deprecated Use `UrlReaderServiceReadTreeResponseDirOptions` from `@backstage/backend-plugin-api` instead\n */\nexport type ReadTreeResponseDirOptions = _ReadTreeResponseDirOptions;\n\n/**\n * @public\n * @deprecated Use `UrlReaderServiceReadUrlOptions` from `@backstage/backend-plugin-api` instead\n */\nexport type ReadUrlOptions = _ReadUrlOptions;\n\n/**\n * @public\n * @deprecated Use `UrlReaderServiceReadUrlResponse` from `@backstage/backend-plugin-api` instead\n */\nexport type ReadUrlResponse = _ReadUrlResponse;\n\n/**\n * @public\n * @deprecated Use `UrlReaderServiceSearchOptions` from `@backstage/backend-plugin-api` instead\n */\nexport type SearchOptions = _SearchOptions;\n\n/**\n * @public\n * @deprecated Use `UrlReaderServiceSearchResponse` from `@backstage/backend-plugin-api` instead\n */\nexport type SearchResponse = _SearchResponse;\n\n/**\n * @public\n * @deprecated Use `UrlReaderServiceSearchResponseFile` from `@backstage/backend-plugin-api` instead\n */\nexport type SearchResponseFile = _SearchResponseFile;\n\n/**\n * @public\n * @deprecated Use `UrlReaderService` from `@backstage/backend-plugin-api` instead\n */\nexport type UrlReader = _UrlReaderService;\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  CacheService,\n  CacheServiceOptions,\n} from '@backstage/backend-plugin-api';\n\n/**\n * Compatibility wrapper for going from a new-backend cache service to the\n * old-backend plugin cache manager.\n *\n * @public\n */\nexport function cacheToPluginCacheManager(cache: CacheService): {\n  getClient(options?: CacheServiceOptions): CacheService;\n} {\n  return {\n    getClient: (opts: CacheServiceOptions) => cache.withOptions(opts),\n  };\n}\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LoggerService } from '@backstage/backend-plugin-api';\nimport { JsonObject } from '@backstage/types';\nimport { Logger as WinstonLogger, createLogger } from 'winston';\nimport Transport, { TransportStreamOptions } from 'winston-transport';\n\nclass BackstageLoggerTransport extends Transport {\n  constructor(\n    private readonly backstageLogger: LoggerService,\n    opts?: TransportStreamOptions,\n  ) {\n    super(opts);\n  }\n\n  log(info: unknown, callback: VoidFunction) {\n    if (typeof info !== 'object' || info === null) {\n      callback();\n      return;\n    }\n    const { level, message, ...meta } = info as JsonObject;\n    switch (level) {\n      case 'error':\n        this.backstageLogger.error(String(message), meta);\n        break;\n      case 'warn':\n        this.backstageLogger.warn(String(message), meta);\n        break;\n      case 'info':\n        this.backstageLogger.info(String(message), meta);\n        break;\n      case 'debug':\n        this.backstageLogger.debug(String(message), meta);\n        break;\n      default:\n        this.backstageLogger.info(String(message), meta);\n    }\n    callback();\n  }\n}\n\n/** @public */\nexport function loggerToWinstonLogger(\n  logger: LoggerService,\n  opts?: TransportStreamOptions,\n): WinstonLogger {\n  return createLogger({\n    transports: [new BackstageLoggerTransport(logger, opts)],\n  });\n}\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AuthService,\n  coreServices,\n  createBackendPlugin,\n  ServiceRef,\n} from '@backstage/backend-plugin-api';\nimport { RequestHandler } from 'express';\nimport { cacheToPluginCacheManager } from '../cache';\nimport { loggerToWinstonLogger } from '../logging';\nimport { TokenManager } from '../../deprecated';\n\n/**\n * @public\n */\nexport type LegacyCreateRouter<TEnv> = (deps: TEnv) => Promise<RequestHandler>;\n\n/** @ignore */\ntype TransformedEnv<\n  TEnv extends Record<string, unknown>,\n  TEnvTransforms extends { [key in keyof TEnv]?: (dep: TEnv[key]) => unknown },\n> = {\n  [key in keyof TEnv]: TEnvTransforms[key] extends (dep: TEnv[key]) => infer R\n    ? R\n    : TEnv[key];\n};\n\n// Since the plugin will be using the new system our callers will expect us to support the\n// new plugin tokens, which we'll also be signaling by supporting the JWKS endpoint through\n// the http router.\n// This makes sure that we accept the new plugin tokens as valid tokens, but otherwise fall\n// back to whatever the token manager is doing.\nfunction wrapTokenManager(tokenManager: TokenManager, auth: AuthService) {\n  return {\n    async getToken() {\n      return tokenManager.getToken();\n    },\n    async authenticate(token) {\n      if (token) {\n        // Unless it's a valid service token, we'll let the token manager do\n        // validation. We'll throw if we for example receive an invalid user\n        // token here, but that's what the token manager does too.\n        const credentials = await auth.authenticate(token);\n        if (auth.isPrincipal(credentials, 'service')) {\n          return;\n        }\n      }\n      await tokenManager.authenticate(token);\n    },\n  } satisfies TokenManager;\n}\n\n/**\n * Creates a new custom plugin compatibility wrapper.\n *\n * @public\n * @remarks\n *\n * Usually you can use {@link legacyPlugin} directly instead, but you might\n * need to use this if you have customized the plugin environment in your backend.\n */\nexport function makeLegacyPlugin<\n  TEnv extends Record<string, unknown>,\n  TEnvTransforms extends { [key in keyof TEnv]?: (dep: TEnv[key]) => unknown },\n>(\n  envMapping: { [key in keyof TEnv]: ServiceRef<TEnv[key]> },\n  envTransforms: TEnvTransforms,\n) {\n  return (\n    name: string,\n    createRouterImport: Promise<{\n      default: LegacyCreateRouter<TransformedEnv<TEnv, TEnvTransforms>>;\n    }>,\n  ) => {\n    const compatPlugin = createBackendPlugin({\n      pluginId: name,\n      register(env) {\n        env.registerInit({\n          deps: {\n            ...envMapping,\n            _router: coreServices.httpRouter,\n            _auth: coreServices.auth,\n          },\n          async init({ _router, _auth, ...envDeps }) {\n            const { default: createRouter } = await createRouterImport;\n            const pluginEnv = Object.fromEntries(\n              Object.entries(envDeps).map(([key, dep]) => {\n                const transform = envTransforms[key];\n                if (transform) {\n                  return [key, transform(dep)];\n                }\n                if (key === 'tokenManager') {\n                  return [key, wrapTokenManager(dep as TokenManager, _auth)];\n                }\n                return [key, dep];\n              }),\n            );\n            const router = await createRouter(\n              pluginEnv as TransformedEnv<TEnv, TEnvTransforms>,\n            );\n            _router.use(router);\n          },\n        });\n      },\n    });\n\n    return compatPlugin();\n  };\n}\n\n/**\n * Helper function to create a plugin from a legacy createRouter function and\n * register it with the http router based on the plugin id.\n *\n * @public\n * @remarks\n *\n * This is intended to be used by plugin authors to ease the transition to the\n * new backend system.\n *\n * @example\n *\n *```ts\n *backend.add(legacyPlugin('kafka', import('./plugins/kafka')));\n *```\n */\nexport const legacyPlugin = makeLegacyPlugin(\n  {\n    cache: coreServices.cache,\n    config: coreServices.rootConfig,\n    database: coreServices.database,\n    discovery: coreServices.discovery,\n    logger: coreServices.logger,\n    permissions: coreServices.permissions,\n    scheduler: coreServices.scheduler,\n    tokenManager: coreServices.tokenManager,\n    reader: coreServices.urlReader,\n    identity: coreServices.identity,\n  },\n  {\n    logger: log => loggerToWinstonLogger(log),\n    cache: cache => cacheToPluginCacheManager(cache),\n  },\n);\n","/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  BackstageCredentials,\n  BackstageNonePrincipal,\n  BackstagePrincipalAccessRestrictions,\n  BackstageServicePrincipal,\n  BackstageUserPrincipal,\n} from '@backstage/backend-plugin-api';\nimport { InternalBackstageCredentials } from './types';\n\nexport function createCredentialsWithServicePrincipal(\n  sub: string,\n  token?: string,\n  accessRestrictions?: BackstagePrincipalAccessRestrictions,\n): InternalBackstageCredentials<BackstageServicePrincipal> {\n  return {\n    $$type: '@backstage/BackstageCredentials',\n    version: 'v1',\n    token,\n    principal: {\n      type: 'service',\n      subject: sub,\n      accessRestrictions,\n    },\n  };\n}\n\nexport function createCredentialsWithUserPrincipal(\n  sub: string,\n  token: string,\n  expiresAt?: Date,\n): InternalBackstageCredentials<BackstageUserPrincipal> {\n  return {\n    $$type: '@backstage/BackstageCredentials',\n    version: 'v1',\n    token,\n    expiresAt,\n    principal: {\n      type: 'user',\n      userEntityRef: sub,\n    },\n  };\n}\n\nexport function createCredentialsWithNonePrincipal(): InternalBackstageCredentials<BackstageNonePrincipal> {\n  return {\n    $$type: '@backstage/BackstageCredentials',\n    version: 'v1',\n    principal: {\n      type: 'none',\n    },\n  };\n}\n\nexport function toInternalBackstageCredentials(\n  credentials: BackstageCredentials,\n): InternalBackstageCredentials<\n  BackstageUserPrincipal | BackstageServicePrincipal | BackstageNonePrincipal\n> {\n  if (credentials.$$type !== '@backstage/BackstageCredentials') {\n    throw new Error('Invalid credential type');\n  }\n\n  const internalCredentials = credentials as InternalBackstageCredentials<\n    BackstageUserPrincipal | BackstageServicePrincipal | BackstageNonePrincipal\n  >;\n\n  if (internalCredentials.version !== 'v1') {\n    throw new Error(\n      `Invalid credential version ${internalCredentials.version}`,\n    );\n  }\n\n  return internalCredentials;\n}\n","/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AuthService,\n  BackstageCredentials,\n  BackstageNonePrincipal,\n  BackstagePrincipalTypes,\n  BackstageServicePrincipal,\n  BackstageUserInfo,\n  BackstageUserPrincipal,\n  HttpAuthService,\n  IdentityService,\n  TokenManagerService,\n  UserInfoService,\n} from '@backstage/backend-plugin-api';\nimport { AuthenticationError, NotAllowedError } from '@backstage/errors';\nimport type { Request, Response } from 'express';\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport {\n  createCredentialsWithServicePrincipal,\n  createCredentialsWithUserPrincipal,\n  createCredentialsWithNonePrincipal,\n  toInternalBackstageCredentials,\n} from '../../../../backend-defaults/src/entrypoints/auth/helpers';\n// TODO is this circular thingy a problem? Test in e2e\nimport {\n  type IdentityApiGetIdentityRequest,\n  DefaultIdentityClient,\n} from '@backstage/plugin-auth-node';\nimport { decodeJwt } from 'jose';\nimport { TokenManager, PluginEndpointDiscovery } from '../../deprecated';\nimport { JsonObject } from '@backstage/types';\n\nclass AuthCompat implements AuthService {\n  constructor(\n    private readonly identity: IdentityService,\n    private readonly tokenManager?: TokenManagerService,\n  ) {}\n\n  isPrincipal<TType extends keyof BackstagePrincipalTypes>(\n    credentials: BackstageCredentials,\n    type: TType,\n  ): credentials is BackstageCredentials<BackstagePrincipalTypes[TType]> {\n    const principal = credentials.principal as\n      | BackstageUserPrincipal\n      | BackstageServicePrincipal;\n\n    if (principal.type !== type) {\n      return false;\n    }\n\n    return true;\n  }\n\n  async getNoneCredentials(): Promise<\n    BackstageCredentials<BackstageNonePrincipal>\n  > {\n    return createCredentialsWithNonePrincipal();\n  }\n\n  async getOwnServiceCredentials(): Promise<\n    BackstageCredentials<BackstageServicePrincipal>\n  > {\n    return createCredentialsWithServicePrincipal('external:backstage-plugin');\n  }\n\n  async authenticate(token: string): Promise<BackstageCredentials> {\n    // Defensively check whether it seems token-like first, just to support\n    // custom TokenManager implementations that don't emit JWTs specifically.\n    const payload =\n      token.split('.').length === 3 ? decodeJwt(token) : undefined;\n\n    if (payload?.aud === 'backstage') {\n      // User Backstage token\n      const identity = await this.identity.getIdentity({\n        request: {\n          headers: { authorization: `Bearer ${token}` },\n        },\n      } as IdentityApiGetIdentityRequest);\n\n      if (!identity) {\n        throw new AuthenticationError('Invalid user token');\n      }\n\n      return createCredentialsWithUserPrincipal(\n        identity.identity.userEntityRef,\n        token,\n        this.#getJwtExpiration(token),\n      );\n    }\n\n    await this.tokenManager?.authenticate(token);\n\n    return createCredentialsWithServicePrincipal(\n      'external:backstage-plugin',\n      token,\n    );\n  }\n\n  async getPluginRequestToken(options: {\n    onBehalfOf: BackstageCredentials;\n    targetPluginId: string;\n  }): Promise<{ token: string }> {\n    const internalForward = toInternalBackstageCredentials(options.onBehalfOf);\n    const { type } = internalForward.principal;\n\n    switch (type) {\n      // TODO: Check whether the principal is ourselves\n      case 'service': {\n        if (this.tokenManager) {\n          return this.tokenManager.getToken();\n        }\n        return { token: internalForward.token ?? '' };\n      }\n      case 'user':\n        if (!internalForward.token) {\n          throw new Error('User credentials is unexpectedly missing token');\n        }\n        return { token: internalForward.token };\n      // NOTE: this is not the behavior of this service in the new backend system, it only applies\n      //       here since we'll need to accept and forward requests without authentication.\n      case 'none':\n        return { token: '' };\n      default:\n        throw new AuthenticationError(\n          `Refused to issue service token for credential type '${type}'`,\n        );\n    }\n  }\n\n  async getLimitedUserToken(\n    credentials: BackstageCredentials<BackstageUserPrincipal>,\n  ): Promise<{ token: string; expiresAt: Date }> {\n    const internalCredentials = toInternalBackstageCredentials(credentials);\n\n    const { token } = internalCredentials;\n\n    if (!token) {\n      throw new AuthenticationError(\n        'User credentials is unexpectedly missing token',\n      );\n    }\n\n    return { token, expiresAt: this.#getJwtExpiration(token) };\n  }\n\n  #getJwtExpiration(token: string) {\n    const { exp } = decodeJwt(token);\n    if (!exp) {\n      throw new AuthenticationError('User token is missing expiration');\n    }\n    return new Date(exp * 1000);\n  }\n\n  listPublicServiceKeys(): Promise<{ keys: JsonObject[] }> {\n    throw new Error('Not implemented');\n  }\n}\n\nfunction getTokenFromRequest(req: Request) {\n  // TODO: support multiple auth headers (iterate rawHeaders)\n  const authHeader = req.headers.authorization;\n  if (typeof authHeader === 'string') {\n    const matches = authHeader.match(/^Bearer[ ]+(\\S+)$/i);\n    const token = matches?.[1];\n    if (token) {\n      return token;\n    }\n  }\n\n  return undefined;\n}\n\nconst credentialsSymbol = Symbol('backstage-credentials');\n\ntype RequestWithCredentials = Request & {\n  [credentialsSymbol]?: Promise<BackstageCredentials>;\n};\n\nclass HttpAuthCompat implements HttpAuthService {\n  #auth: AuthService;\n\n  constructor(auth: AuthService) {\n    this.#auth = auth;\n  }\n\n  async #extractCredentialsFromRequest(req: Request) {\n    const token = getTokenFromRequest(req);\n    if (!token) {\n      return this.#auth.getNoneCredentials();\n    }\n\n    return this.#auth.authenticate(token);\n  }\n\n  async #getCredentials(req: RequestWithCredentials) {\n    return (req[credentialsSymbol] ??=\n      this.#extractCredentialsFromRequest(req));\n  }\n\n  async credentials<TAllowed extends keyof BackstagePrincipalTypes = 'unknown'>(\n    req: Request,\n    options?: {\n      allow?: Array<TAllowed>;\n      allowLimitedAccess?: boolean;\n    },\n  ): Promise<BackstageCredentials<BackstagePrincipalTypes[TAllowed]>> {\n    const credentials = await this.#getCredentials(req);\n\n    const allowed = options?.allow;\n    if (!allowed) {\n      return credentials as any;\n    }\n\n    if (this.#auth.isPrincipal(credentials, 'none')) {\n      if (allowed.includes('none' as TAllowed)) {\n        return credentials as any;\n      }\n\n      throw new AuthenticationError('Missing credentials');\n    } else if (this.#auth.isPrincipal(credentials, 'user')) {\n      if (allowed.includes('user' as TAllowed)) {\n        return credentials as any;\n      }\n\n      throw new NotAllowedError(\n        `This endpoint does not allow 'user' credentials`,\n      );\n    } else if (this.#auth.isPrincipal(credentials, 'service')) {\n      if (allowed.includes('service' as TAllowed)) {\n        return credentials as any;\n      }\n\n      throw new NotAllowedError(\n        `This endpoint does not allow 'service' credentials`,\n      );\n    }\n\n    throw new NotAllowedError(\n      'Unknown principal type, this should never happen',\n    );\n  }\n\n  async issueUserCookie(_res: Response): Promise<{ expiresAt: Date }> {\n    return { expiresAt: new Date(Date.now() + 3600_000) };\n  }\n}\n\nexport class UserInfoCompat implements UserInfoService {\n  async getUserInfo(\n    credentials: BackstageCredentials,\n  ): Promise<BackstageUserInfo> {\n    const internalCredentials = toInternalBackstageCredentials(credentials);\n    if (internalCredentials.principal.type !== 'user') {\n      throw new Error('Only user credentials are supported');\n    }\n    if (!internalCredentials.token) {\n      throw new Error('User credentials is unexpectedly missing token');\n    }\n    const { sub: userEntityRef, ent: ownershipEntityRefs = [] } = decodeJwt(\n      internalCredentials.token,\n    );\n\n    if (typeof userEntityRef !== 'string') {\n      throw new Error('User entity ref must be a string');\n    }\n    if (\n      !Array.isArray(ownershipEntityRefs) ||\n      ownershipEntityRefs.some(ref => typeof ref !== 'string')\n    ) {\n      throw new Error('Ownership entity refs must be an array of strings');\n    }\n\n    return { userEntityRef, ownershipEntityRefs };\n  }\n}\n\n/**\n * An adapter that ensures presence of the auth and/or httpAuth services.\n * @public\n */\nexport function createLegacyAuthAdapters<\n  TOptions extends {\n    auth?: AuthService;\n    httpAuth?: HttpAuthService;\n    userInfo?: UserInfoService;\n    identity?: IdentityService;\n    tokenManager?: TokenManager;\n    discovery: PluginEndpointDiscovery;\n  },\n  TAdapters = (TOptions extends { auth?: AuthService }\n    ? { auth: AuthService }\n    : {}) &\n    (TOptions extends { httpAuth?: HttpAuthService }\n      ? { httpAuth: HttpAuthService }\n      : {}) &\n    (TOptions extends { userInfo?: UserInfoService }\n      ? { userInfo: UserInfoService }\n      : {}),\n>(options: TOptions): TAdapters {\n  const {\n    auth,\n    httpAuth,\n    userInfo = new UserInfoCompat(),\n    discovery,\n  } = options;\n\n  if (auth && httpAuth) {\n    return {\n      auth,\n      httpAuth,\n      userInfo,\n    } as TAdapters;\n  }\n\n  if (auth) {\n    return {\n      auth,\n      userInfo,\n    } as TAdapters;\n  }\n\n  if (httpAuth) {\n    return {\n      httpAuth,\n      userInfo,\n    } as TAdapters;\n  }\n\n  const identity =\n    options.identity ?? DefaultIdentityClient.create({ discovery });\n\n  const authImpl = new AuthCompat(identity, options.tokenManager);\n\n  const httpAuthImpl = new HttpAuthCompat(authImpl);\n\n  return {\n    auth: authImpl,\n    httpAuth: httpAuthImpl,\n    userInfo,\n  } as TAdapters;\n}\n"],"names":["createHash","Keyv","merge","ddlLimiter","limiterFactory","knexFactory","yn","InputError","pluginPath","normalizeConnection","ConfigReader","omit","ForwardedError","path","ensureDirSync","DevDataStore","stringifyError","dropDatabase","ConflictError","getRawBody","Readable","ScmIntegrations","DefaultAzureDevOpsCredentialsProvider","getAzureFileFetchUrl","fetch","ReadUrlResponseFactory","NotFoundError","getAzureCommitsUrl","NotModifiedError","getAzureDownloadUrl","Minimatch","getBitbucketCloudFileFetchUrl","getBitbucketCloudRequestOptions","parseGitUrl","getBitbucketCloudDownloadUrl","trimEnd","getBitbucketCloudDefaultBranch","getBitbucketFileFetchUrl","getBitbucketRequestOptions","getBitbucketDownloadUrl","getBitbucketDefaultBranch","getBitbucketServerFileFetchUrl","getBitbucketServerRequestOptions","getBitbucketServerDownloadUrl","getGerritFileContentsApiUrl","getGerritRequestOptions","Base64Decode","getGerritBranchApiUrl","parseGerritJsonResponse","parseGerritGitilesUrl","buildGerritGitilesArchiveUrl","DefaultGithubCredentialsProvider","getGithubFileFetchUrl","getGitLabRequestOptions","getGitLabIntegrationRelativePath","trimStart","getGitLabFileFetchUrl","getGiteaFileContentsUrl","getGiteaRequestOptions","AuthenticationError","getGiteaArchiveUrl","parseGiteaUrl","getGiteaLatestCommitUrl","getHarnessFileContentsUrl","getHarnessRequestOptions","getHarnessArchiveUrl","parseHarnessUrl","getHarnessLatestCommitUrl","parseUrl","DefaultAwsCredentialsManager","fromTemporaryCredentials","S3Client","stream","abortController","AbortController","GetObjectCommand","ListObjectsV2Command","relative","NotAllowedError","pipeline","promisify","pipelineCb","concatStream","Parse","tar","fs","platformPath","yauzl","archiver","resolveSafeChildPath","dirname","os","readGoogleGcsIntegrationConfig","GoogleCloud","repositoryName","commitSpecifier","CodeCommitClient","GetFileCommand","GetFolderCommand","AzureUrlReader","BitbucketCloudUrlReader","BitbucketServerUrlReader","BitbucketUrlReader","GerritUrlReader","GithubUrlReader","GiteaUrlReader","GitlabUrlReader","HarnessUrlReader","AwsS3UrlReader","FetchUrlReader","createConfigSecretEnumerator","getPackages","loadConfigSchema","_createConfigSecretEnumerator","loadBackendConfig","parseArgs","resolvePath","findPaths","config","loadConfig","format","createLogger","transports","MESSAGE","createServiceFactory","coreServices","WinstonLogger","_WinstonLogger","winston","newLoadBackendConfig","git","http","logger","Duration","base64url","generateSecret","exportJWK","SignJWT","DateTime","jwtVerify","applyCspDirectives","helmet","kebabCase","randomBytes","assertError","compression","morgan","cors","serializeError","NotImplementedError","ServiceUnavailableError","forge","stoppableServer","https","express","defaultRequestLoggingHandler","defaultErrorHandler","Router","PassThrough","error","BatchV1Api","Log","uuid","Watch","HttpError","_HostDiscovery","_CacheManager","_DatabaseManager","_dropDatabase","_isDatabaseConflictError","_resolvePackagePath","_resolveSafeChildPath","_isChildPath","_AzureUrlReader","_BitbucketCloudUrlReader","_BitbucketUrlReader","_BitbucketServerUrlReader","_GerritUrlReader","_GithubUrlReader","_GitlabUrlReader","_GiteaUrlReader","_HarnessUrlReader","_AwsS3UrlReader","_FetchUrlReader","_UrlReaders","_ReadUrlResponseFactory","Transport","createBackendPlugin","decodeJwt","DefaultIdentityClient"],"mappings":"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"}