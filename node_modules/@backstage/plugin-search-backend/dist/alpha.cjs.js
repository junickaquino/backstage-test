'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var backendPluginApi = require('@backstage/backend-plugin-api');
var pluginSearchBackendNode = require('@backstage/plugin-search-backend-node');
var alpha$1 = require('@backstage/plugin-search-backend-node/alpha');
var router = require('./cjs/router-BtXZDOsQ.cjs.js');
require('zod');
require('@backstage/backend-common');
require('@backstage/errors');
require('@backstage/plugin-permission-common');
require('lodash');
require('qs');
require('dataloader');
require('@backstage/backend-openapi-utils');

class SearchIndexRegistry {
  collators = [];
  decorators = [];
  addCollator(options) {
    this.collators.push(options);
  }
  addDecorator(options) {
    this.decorators.push(options);
  }
  getCollators() {
    return this.collators;
  }
  getDecorators() {
    return this.decorators;
  }
}
class SearchEngineRegistry {
  searchEngine = null;
  setSearchEngine(searchEngine) {
    if (this.searchEngine) {
      throw new Error("Multiple Search engines is not supported at this time");
    }
    this.searchEngine = searchEngine;
  }
  getSearchEngine() {
    return this.searchEngine;
  }
}
var alpha = backendPluginApi.createBackendPlugin({
  pluginId: "search",
  register(env) {
    const searchIndexRegistry = new SearchIndexRegistry();
    env.registerExtensionPoint(
      alpha$1.searchIndexRegistryExtensionPoint,
      searchIndexRegistry
    );
    const searchEngineRegistry = new SearchEngineRegistry();
    env.registerExtensionPoint(
      alpha$1.searchEngineRegistryExtensionPoint,
      searchEngineRegistry
    );
    env.registerInit({
      deps: {
        logger: backendPluginApi.coreServices.logger,
        config: backendPluginApi.coreServices.rootConfig,
        discovery: backendPluginApi.coreServices.discovery,
        permissions: backendPluginApi.coreServices.permissions,
        auth: backendPluginApi.coreServices.auth,
        http: backendPluginApi.coreServices.httpRouter,
        httpAuth: backendPluginApi.coreServices.httpAuth,
        lifecycle: backendPluginApi.coreServices.rootLifecycle,
        searchIndexService: alpha$1.searchIndexServiceRef
      },
      async init({
        config,
        logger,
        discovery,
        permissions,
        auth,
        http,
        httpAuth,
        lifecycle,
        searchIndexService
      }) {
        let searchEngine = searchEngineRegistry.getSearchEngine();
        if (!searchEngine) {
          searchEngine = new pluginSearchBackendNode.LunrSearchEngine({
            logger
          });
        }
        const collators = searchIndexRegistry.getCollators();
        const decorators = searchIndexRegistry.getDecorators();
        searchIndexService.init({
          searchEngine,
          collators,
          decorators
        });
        lifecycle.addStartupHook(async () => {
          await searchIndexService.start();
        });
        lifecycle.addShutdownHook(async () => {
          await searchIndexService.stop();
        });
        const router$1 = await router.createRouter({
          config,
          discovery,
          permissions,
          auth,
          httpAuth,
          logger,
          engine: searchEngine,
          types: searchIndexService.getDocumentTypes()
        });
        http.use(router$1);
      }
    });
  }
});

exports.default = alpha;
//# sourceMappingURL=alpha.cjs.js.map
