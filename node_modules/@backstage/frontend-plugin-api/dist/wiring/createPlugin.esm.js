import { resolveExtensionDefinition } from './resolveExtensionDefinition.esm.js';

function createPlugin(options) {
  const extensions = (options.extensions ?? []).map(
    (def) => resolveExtensionDefinition(def, { namespace: options.id })
  );
  const extensionIds = extensions.map((e) => e.id);
  if (extensionIds.length !== new Set(extensionIds).size) {
    const duplicates = Array.from(
      new Set(
        extensionIds.filter((id, index) => extensionIds.indexOf(id) !== index)
      )
    );
    throw new Error(
      `Plugin '${options.id}' provided duplicate extensions: ${duplicates.join(
        ", "
      )}`
    );
  }
  return {
    $$type: "@backstage/BackstagePlugin",
    version: "v1",
    id: options.id,
    routes: options.routes ?? {},
    externalRoutes: options.externalRoutes ?? {},
    featureFlags: options.featureFlags ?? [],
    extensions,
    toString() {
      return `Plugin{id=${options.id}}`;
    }
  };
}

export { createPlugin };
//# sourceMappingURL=createPlugin.esm.js.map
