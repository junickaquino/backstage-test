{"version":3,"file":"alpha.cjs.js","sources":["../src/tasks/serializer.ts","../src/alpha.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport tar from 'tar';\nimport concatStream from 'concat-stream';\nimport { promisify } from 'util';\nimport { pipeline as pipelineCb, Readable } from 'stream';\n\nconst pipeline = promisify(pipelineCb);\n/**\n * Serializes provided path into tar archive\n *\n * @alpha\n */\nexport const serializeWorkspace = async (opts: {\n  path: string;\n}): Promise<{ contents: Buffer }> => {\n  return new Promise<{ contents: Buffer }>(async resolve => {\n    await pipeline(\n      tar.create({ cwd: opts.path }, ['']),\n      concatStream(buffer => {\n        return resolve({ contents: buffer });\n      }),\n    );\n  });\n};\n\n/**\n * Rehydrates the provided buffer of tar archive into the provide destination path\n *\n * @alpha\n */\nexport const restoreWorkspace = async (opts: {\n  path: string;\n  buffer?: Buffer;\n}): Promise<void> => {\n  const { buffer, path } = opts;\n  if (buffer) {\n    await pipeline(\n      Readable.from(buffer),\n      tar.extract({\n        C: path,\n      }),\n    );\n  }\n};\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createExtensionPoint } from '@backstage/backend-plugin-api';\nimport {\n  TemplateAction,\n  TemplateFilter,\n  TemplateGlobal,\n  TaskBroker,\n} from '@backstage/plugin-scaffolder-node';\n\nexport * from './tasks/alpha';\n\n/**\n * Extension point for managing scaffolder actions.\n *\n * @alpha\n */\nexport interface ScaffolderActionsExtensionPoint {\n  addActions(...actions: TemplateAction<any, any>[]): void;\n}\n\n/**\n * Extension point for managing scaffolder actions.\n *\n * @alpha\n */\nexport const scaffolderActionsExtensionPoint =\n  createExtensionPoint<ScaffolderActionsExtensionPoint>({\n    id: 'scaffolder.actions',\n  });\n\n/**\n * Extension point for replacing the scaffolder task broker.\n *\n * @alpha\n */\nexport interface ScaffolderTaskBrokerExtensionPoint {\n  setTaskBroker(taskBroker: TaskBroker): void;\n}\n\n/**\n * Extension point for replacing the scaffolder task broker.\n *\n * @alpha\n */\nexport const scaffolderTaskBrokerExtensionPoint =\n  createExtensionPoint<ScaffolderTaskBrokerExtensionPoint>({\n    id: 'scaffolder.taskBroker',\n  });\n\n/**\n * Extension point for adding template filters and globals.\n *\n * @alpha\n */\nexport interface ScaffolderTemplatingExtensionPoint {\n  addTemplateFilters(filters: Record<string, TemplateFilter>): void;\n\n  addTemplateGlobals(filters: Record<string, TemplateGlobal>): void;\n}\n\n/**\n * Extension point for adding template filters and globals.\n *\n * @alpha\n */\nexport const scaffolderTemplatingExtensionPoint =\n  createExtensionPoint<ScaffolderTemplatingExtensionPoint>({\n    id: 'scaffolder.templating',\n  });\n\n/**\n * Autocomplete handler for the scaffolder.\n * @alpha\n */\nexport type AutocompleteHandler = ({\n  resource,\n  token,\n  context,\n}: {\n  resource: string;\n  token: string;\n  context: Record<string, string>;\n}) => Promise<{ results: { title: string }[] }>;\n\n/**\n * Extension point for adding autocomplete handler providers\n * @alpha\n */\nexport interface ScaffolderAutocompleteExtensionPoint {\n  addAutocompleteProvider({\n    id,\n    handler,\n  }: {\n    id: string;\n    handler: AutocompleteHandler;\n  }): void;\n}\n\n/**\n * Extension point for adding autocomplete handlers.\n *\n * @alpha\n */\nexport const scaffolderAutocompleteExtensionPoint =\n  createExtensionPoint<ScaffolderAutocompleteExtensionPoint>({\n    id: 'scaffolder.autocomplete',\n  });\n\n/**\n * This provider has to be implemented to make it possible to serialize/deserialize scaffolder workspace.\n *\n * @alpha\n */\nexport interface WorkspaceProvider {\n  serializeWorkspace({\n    path,\n    taskId,\n  }: {\n    path: string;\n    taskId: string;\n  }): Promise<void>;\n\n  cleanWorkspace(options: { taskId: string }): Promise<void>;\n\n  rehydrateWorkspace(options: {\n    taskId: string;\n    targetPath: string;\n  }): Promise<void>;\n}\n\n/**\n * Extension point for adding workspace providers.\n *\n * @alpha\n */\nexport interface ScaffolderWorkspaceProviderExtensionPoint {\n  addProviders(providers: Record<string, WorkspaceProvider>): void;\n}\n\n/**\n * Extension point for adding workspace providers.\n *\n * @alpha\n */\nexport const scaffolderWorkspaceProviderExtensionPoint =\n  createExtensionPoint<ScaffolderWorkspaceProviderExtensionPoint>({\n    id: 'scaffolder.workspace.provider',\n  });\n"],"names":["promisify","pipelineCb","tar","concatStream","Readable","createExtensionPoint"],"mappings":";;;;;;;;;;;;;AAqBA,MAAM,QAAA,GAAWA,eAAUC,eAAU,CAAA,CAAA;AAMxB,MAAA,kBAAA,GAAqB,OAAO,IAEJ,KAAA;AACnC,EAAO,OAAA,IAAI,OAA8B,CAAA,OAAM,OAAW,KAAA;AACxD,IAAM,MAAA,QAAA;AAAA,MACJC,oBAAA,CAAI,OAAO,EAAE,GAAA,EAAK,KAAK,IAAK,EAAA,EAAG,CAAC,EAAE,CAAC,CAAA;AAAA,MACnCC,8BAAa,CAAU,MAAA,KAAA;AACrB,QAAA,OAAO,OAAQ,CAAA,EAAE,QAAU,EAAA,MAAA,EAAQ,CAAA,CAAA;AAAA,OACpC,CAAA;AAAA,KACH,CAAA;AAAA,GACD,CAAA,CAAA;AACH,EAAA;AAOa,MAAA,gBAAA,GAAmB,OAAO,IAGlB,KAAA;AACnB,EAAM,MAAA,EAAE,MAAQ,EAAA,IAAA,EAAS,GAAA,IAAA,CAAA;AACzB,EAAA,IAAI,MAAQ,EAAA;AACV,IAAM,MAAA,QAAA;AAAA,MACJC,eAAA,CAAS,KAAK,MAAM,CAAA;AAAA,MACpBF,qBAAI,OAAQ,CAAA;AAAA,QACV,CAAG,EAAA,IAAA;AAAA,OACJ,CAAA;AAAA,KACH,CAAA;AAAA,GACF;AACF;;AClBO,MAAM,kCACXG,qCAAsD,CAAA;AAAA,EACpD,EAAI,EAAA,oBAAA;AACN,CAAC,EAAA;AAgBI,MAAM,qCACXA,qCAAyD,CAAA;AAAA,EACvD,EAAI,EAAA,uBAAA;AACN,CAAC,EAAA;AAkBI,MAAM,qCACXA,qCAAyD,CAAA;AAAA,EACvD,EAAI,EAAA,uBAAA;AACN,CAAC,EAAA;AAmCI,MAAM,uCACXA,qCAA2D,CAAA;AAAA,EACzD,EAAI,EAAA,yBAAA;AACN,CAAC,EAAA;AAsCI,MAAM,4CACXA,qCAAgE,CAAA;AAAA,EAC9D,EAAI,EAAA,+BAAA;AACN,CAAC;;;;;;;;;;"}