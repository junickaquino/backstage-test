function getHarnessEditContentsUrl(config, url) {
  const parsedUrl = parseHarnessUrl(config, url);
  return `${parsedUrl.baseUrl}/ng/account/${parsedUrl.accountId}/module/code/orgs/${parsedUrl.orgName}/projects/${parsedUrl.projectName}/repos/${parsedUrl.repoName}/files/${parsedUrl.branch}/~/${parsedUrl.path}`;
}
function getHarnessFileContentsUrl(config, url) {
  const parsedUrl = parseHarnessUrl(config, url);
  return `${parsedUrl.baseUrl}/gateway/code/api/v1/repos/${parsedUrl.accountId}/${parsedUrl.orgName}/${parsedUrl.projectName}/${parsedUrl.repoName}/+/raw/${parsedUrl.path}?routingId=${parsedUrl.accountId}&git_ref=refs/heads/${parsedUrl.refString}`;
}
function getHarnessArchiveUrl(config, url) {
  const parsedUrl = parseHarnessUrl(config, url);
  return `${parsedUrl.baseUrl}/gateway/code/api/v1/repos/${parsedUrl.accountId}/${parsedUrl.orgName}/${parsedUrl.projectName}/${parsedUrl.repoName}/+/archive/${parsedUrl.branch}.zip?routingId=${parsedUrl.accountId}`;
}
function getHarnessLatestCommitUrl(config, url) {
  const parsedUrl = parseHarnessUrl(config, url);
  return `${parsedUrl.baseUrl}/gateway/code/api/v1/repos/${parsedUrl.accountId}/${parsedUrl.orgName}/${parsedUrl.projectName}/${parsedUrl.repoName}/+/content?routingId=${parsedUrl.accountId}&include_commit=true&git_ref=refs/heads/${parsedUrl.branch}`;
}
function getHarnessRequestOptions(config) {
  const headers = {};
  const { token, apiKey } = config;
  if (apiKey) {
    headers["x-api-key"] = apiKey;
  } else if (token) {
    headers.Authorization = `Bearer ${token}`;
  }
  return {
    headers
  };
}
function parseHarnessUrl(config, url) {
  const baseUrl = `https://${config.host}`;
  try {
    const pathUrl = new URL(url);
    const pathSegments = pathUrl.pathname.split("/").filter((segment) => segment !== "");
    const urlParts = pathUrl.pathname.split("/");
    const [
      _ng,
      _account,
      accountId,
      _module,
      _moduleName,
      _org,
      orgName,
      _projects,
      projectName,
      _repos,
      repoName,
      _files,
      _ref,
      _branch,
      ..._path
    ] = pathSegments;
    const refAndPath = urlParts.slice(
      urlParts.findIndex((i) => i === "files" || i === "edit") + 1
    );
    const refIndex = refAndPath.findIndex((item) => item === "~");
    const refString = refAndPath.slice(0, refIndex).join("/");
    const pathWithoutSlash = refIndex !== -1 ? refAndPath.slice(refIndex + 1).join("/").replace(/^\//, "") : "";
    return {
      baseUrl,
      accountId,
      orgName,
      projectName,
      refString,
      path: pathWithoutSlash,
      repoName,
      refDashStr: refAndPath.slice(0, refIndex).join("-"),
      branch: refIndex !== -1 ? refAndPath.slice(0, refIndex).join("/") : refAndPath.join("/")
    };
  } catch (e) {
    throw new Error(`Incorrect URL: ${url}, ${e}`);
  }
}

export { getHarnessArchiveUrl, getHarnessEditContentsUrl, getHarnessFileContentsUrl, getHarnessLatestCommitUrl, getHarnessRequestOptions, parseHarnessUrl };
//# sourceMappingURL=core.esm.js.map
