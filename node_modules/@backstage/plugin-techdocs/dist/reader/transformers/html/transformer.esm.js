import DOMPurify from 'dompurify';
import { useCallback, useMemo } from 'react';
import { useApi, configApiRef } from '@backstage/core-plugin-api';
import { removeUnsafeLinks } from './hooks/links.esm.js';
import { removeUnsafeIframes } from './hooks/iframes.esm.js';

const useSanitizerConfig = () => {
  const configApi = useApi(configApiRef);
  return useMemo(() => {
    return configApi.getOptionalConfig("techdocs.sanitizer");
  }, [configApi]);
};
const useSanitizerTransformer = () => {
  const config = useSanitizerConfig();
  return useCallback(
    async (dom) => {
      const hosts = config?.getOptionalStringArray("allowedIframeHosts");
      DOMPurify.addHook("beforeSanitizeElements", removeUnsafeLinks);
      const tags = ["link"];
      if (hosts) {
        tags.push("iframe");
        DOMPurify.addHook("beforeSanitizeElements", removeUnsafeIframes(hosts));
      }
      return DOMPurify.sanitize(dom.outerHTML, {
        ADD_TAGS: tags,
        FORBID_TAGS: ["style"],
        WHOLE_DOCUMENT: true,
        RETURN_DOM: true
      });
    },
    [config]
  );
};

export { useSanitizerTransformer };
//# sourceMappingURL=transformer.esm.js.map
