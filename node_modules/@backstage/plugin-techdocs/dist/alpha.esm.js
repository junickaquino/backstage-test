import React from 'react';
import LibraryBooks from '@material-ui/icons/LibraryBooks';
import { createApiExtension, createSchemaFromZod, createPageExtension, createNavItemExtension, createPlugin } from '@backstage/frontend-plugin-api';
import { createSearchResultListItemExtension } from '@backstage/plugin-search-react/alpha';
import { createApiFactory, configApiRef, discoveryApiRef, fetchApiRef } from '@backstage/core-plugin-api';
import { compatWrapper, convertLegacyRouteRef, convertLegacyRouteRefs } from '@backstage/core-compat-api';
import { techdocsStorageApiRef, techdocsApiRef } from '@backstage/plugin-techdocs-react';
import { TechDocsStorageClient, TechDocsClient } from './client.esm.js';
import { rootRouteRef, rootDocsRouteRef, rootCatalogDocsRouteRef } from './routes.esm.js';
import { createEntityContentExtension } from '@backstage/plugin-catalog-react/alpha';

const techDocsStorageApi = createApiExtension({
  factory: createApiFactory({
    api: techdocsStorageApiRef,
    deps: {
      configApi: configApiRef,
      discoveryApi: discoveryApiRef,
      fetchApi: fetchApiRef
    },
    factory: ({ configApi, discoveryApi, fetchApi }) => new TechDocsStorageClient({
      configApi,
      discoveryApi,
      fetchApi
    })
  })
});
const techDocsClientApi = createApiExtension({
  factory: createApiFactory({
    api: techdocsApiRef,
    deps: {
      configApi: configApiRef,
      discoveryApi: discoveryApiRef,
      fetchApi: fetchApiRef
    },
    factory: ({ configApi, discoveryApi, fetchApi }) => new TechDocsClient({
      configApi,
      discoveryApi,
      fetchApi
    })
  })
});
const techDocsSearchResultListItemExtension = createSearchResultListItemExtension({
  configSchema: createSchemaFromZod(
    (z) => z.object({
      // TODO: Define how the icon can be configurable
      title: z.string().optional(),
      lineClamp: z.number().default(5),
      asLink: z.boolean().default(true),
      asListItem: z.boolean().default(true),
      noTrack: z.boolean().default(false)
    })
  ),
  predicate: (result) => result.type === "techdocs",
  component: async ({ config }) => {
    const { TechDocsSearchResultListItem } = await import('./search/components/TechDocsSearchResultListItem.esm.js');
    return (props) => compatWrapper(/* @__PURE__ */ React.createElement(TechDocsSearchResultListItem, { ...props, ...config }));
  }
});
const techDocsPage = createPageExtension({
  defaultPath: "/docs",
  routeRef: convertLegacyRouteRef(rootRouteRef),
  loader: () => import('./home/components/TechDocsIndexPage.esm.js').then(
    (m) => compatWrapper(/* @__PURE__ */ React.createElement(m.TechDocsIndexPage, null))
  )
});
const techDocsReaderPage = createPageExtension({
  name: "reader",
  defaultPath: "/docs/:namespace/:kind/:name",
  routeRef: convertLegacyRouteRef(rootDocsRouteRef),
  loader: () => import('./reader/components/TechDocsReaderPage/index.esm.js').then(
    (m) => compatWrapper(/* @__PURE__ */ React.createElement(m.TechDocsReaderPage, null))
  )
});
const techDocsEntityContent = createEntityContentExtension({
  defaultPath: "docs",
  defaultTitle: "TechDocs",
  loader: () => import('./Router.esm.js').then((m) => compatWrapper(/* @__PURE__ */ React.createElement(m.EmbeddedDocsRouter, null)))
});
const techDocsNavItem = createNavItemExtension({
  icon: LibraryBooks,
  title: "Docs",
  routeRef: convertLegacyRouteRef(rootRouteRef)
});
var alpha = createPlugin({
  id: "techdocs",
  extensions: [
    techDocsClientApi,
    techDocsStorageApi,
    techDocsNavItem,
    techDocsPage,
    techDocsReaderPage,
    techDocsEntityContent,
    techDocsSearchResultListItemExtension
  ],
  routes: convertLegacyRouteRefs({
    root: rootRouteRef,
    docRoot: rootDocsRouteRef,
    entityContent: rootCatalogDocsRouteRef
  })
});

export { alpha as default, techDocsSearchResultListItemExtension };
//# sourceMappingURL=alpha.esm.js.map
