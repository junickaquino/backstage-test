import React from 'react';
import { StructuredMetadataTable } from '@backstage/core-components';
import { Draft07 } from 'json-schema-library';

const ReviewState = (props) => {
  const reviewData = Object.fromEntries(
    Object.entries(props.formState).map(([key, value]) => {
      for (const step of props.schemas) {
        const parsedSchema = new Draft07(step.mergedSchema);
        const definitionInSchema = parsedSchema.getSchema({
          pointer: `#/${key}`,
          data: props.formState
        });
        if (definitionInSchema) {
          const backstageReviewOptions = definitionInSchema["ui:backstage"]?.review;
          if (backstageReviewOptions) {
            if (backstageReviewOptions.mask) {
              return [key, backstageReviewOptions.mask];
            }
            if (backstageReviewOptions.show === false) {
              return [];
            }
          }
          if (definitionInSchema["ui:widget"] === "password") {
            return [key, "******"];
          }
          if (definitionInSchema.enum && definitionInSchema.enumNames) {
            return [
              key,
              definitionInSchema.enumNames[definitionInSchema.enum.indexOf(value)] || value
            ];
          }
        }
      }
      return [key, value];
    }).filter((prop) => prop.length > 0)
  );
  return /* @__PURE__ */ React.createElement(StructuredMetadataTable, { metadata: reviewData });
};

export { ReviewState };
//# sourceMappingURL=ReviewState.esm.js.map
